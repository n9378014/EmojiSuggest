{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { TiledHexagons } from 'tiled-hexagons';\nimport { useState, useEffect } from 'react';\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nconst fs = require('fs');\n\nconst numEmojis = 259;\nconst maxHorizontal = 19; //111\n\nconst maxVertical = Math.ceil(numEmojis / maxHorizontal);\nconst center = Math.round(maxHorizontal * (maxVertical / 4) + (maxHorizontal - 1) * (maxVertical / 4)) - Math.round(maxHorizontal / 2); //Math.ceil(numEmojis/2)-3;\n\nconst lenHistory = Math.ceil(maxHorizontal / 2);\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\n\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073].hexcode);\n}\n\nconst cat1Index = [0, 1, 2, 3, 4, 5, 19, 20, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 56, 57, 58, 59, 60, 61, 62, 74, 75, 76, 77, 78, 79, 80, 81, 93, 94, 95, 96, 97, 98, 99, 100];\nconst cat2Index = [7, 8, 9, 10, 11, 26, 27, 28, 29, 45, 46, 47, 64, 65, 83];\n\nconst Hexgrid = () => {\n  _s();\n\n  const [emojiHistory, setEmojiHistory] = useState([]);\n  var iniTileObj = newTileObject([defaultEmojis]);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj);\n\n  function getTileColour(tileIndex) {\n    let colour = 'white';\n\n    if (tileIndex <= center - 1 && tileIndex >= center - lenHistory + 1) {\n      colour = '#dbf7fd'; //'#d4d4d4';\n    }\n\n    if (tileIndex === center) {\n      colour = '#a4eefc';\n    }\n\n    return colour;\n  }\n\n  function getTileImage(tileIndex, hexcode) {\n    let image = `nothing`;\n\n    if (Array.isArray(hexcode)) {\n      //Then hexcode is a blend\n      console.log('in image function, not fetched yet');\n      image = `/images/1F4A9.svg`;\n      fetch(\"http://localhost:9000/blendemojis/\" + hexcode[0] + \"/\" + \"1F0CF\").then(res => res.json()).then(data => {\n        image = \"http://localhost:9000/public/blends/\" + data.url;\n      }).then(() => {\n        return image;\n      });\n    } else {\n      //it is a single emoji character\n      image = `/images/${hexcode}.svg`;\n      return image;\n    }\n  }\n\n  function newTileObject(_emojis, selectedHexcode) {\n    let hexcodes = _emojis[0];\n    let blendedHexcodes = _emojis[1];\n    console.log(\"creating new tile object..\");\n    /*\n    TODO: Substitute blendedHexcodes into hexcodes where appropriate\n    */\n\n    if (blendedHexcodes !== undefined && blendedHexcodes !== null && selectedHexcode !== undefined) {\n      cat1Index.forEach(index => {\n        hexcodes[index] = blendedHexcodes[cat1Index.indexOf(index)]; //console.log(hexcodes[index]);\n      });\n    }\n    /*\n    Insert emoji history into active tiles\n    */\n\n\n    if (emojiHistory.length >= 1) {\n      for (let i = 0; i < emojiHistory.length; i++) {\n        if (center - i > 49) {\n          hexcodes[center - i] = emojiHistory[emojiHistory.length - 1 - i];\n        }\n      }\n    }\n    /*\n    TODO: Make promises, so everything resolves on time.\n    */\n    //map tiles then return then\n\n\n    const tileMapPromise = new Promise((resolve, reject) => {\n      /*\n      Map hexcodes to tiles \n      */\n      const tileObj = hexcodes.map((hexcode, index) => {\n        /*  \n        Assign tile colour based on position in grid\n        */\n        let colour = getTileColour(index);\n        /*  \n        Assign tile image based on position in grid\n        */\n\n        let image = `/images/1F4EF.svg`;\n        image = getTileImage(index, hexcode); //get image then return tile\n        //console.log(image);\n\n        return {\n          img: image,\n          key: index,\n          onClick: e => handleClick(index, hexcode, e),\n          fill: '',\n          styles: {\n            normal: {\n              fill: colour\n            },\n            hover: {\n              fill: '#6cc7da'\n            },\n            active: {\n              fill: '#779df1'\n            }\n          }\n        };\n      });\n      resolve(tileObj);\n    });\n    tileMapPromise.then(value => {\n      console.log('returning tile');\n      return value;\n    }).catch(err => {\n      console.log('err');\n    });\n    /*\n    Get blends from backend \n    TODO: Move this to handleclick, poor placement here. not working out.\n    */\n\n    var obj;\n\n    if (selectedHexcode !== null && selectedHexcode !== undefined) {// fetch(\"http://localhost:9000/randomblendhexcodes/\" + selectedHexcode + \"?limit=\" + randomBlendIndex.length.toString())\n      //   .then(res => res.json())\n      //   .then(data => obj = JSON.parse(data))\n      //   .then(obj => blendedHexcodes = obj)\n      //   .then(() => {\n      //     /*\n      //     Add blends into hexcodes[] \n      //     */\n      //     for (let i = 0; i < hexcodes.length; i++) {\n      //       if (randomBlendIndex.includes(i)) {\n      //         let j = randomBlendIndex.indexOf(i);\n      //         hexcodes[i] = blendedHexcodes[j];\n      //       }\n      //     }\n      //   })\n\n      /*\n      Map hexcodes to tiles \n      */\n    }\n  }\n  /*  \n  Get random emojis for every tile\n  */\n\n\n  function getRandomHexcodes() {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => {\n        resolve(obj);\n      });\n    });\n  }\n  /*  \n  Get random blends\n  */\n\n\n  function getRandomBlendHexcodes(hexcode) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"http://localhost:9000/randomblendhexcodes/\" + hexcode + \"?limit=\" + cat1Index.length.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => {\n        resolve(obj);\n      });\n    });\n  }\n  /*\n  Update emoji history and remove the oldest entry if length exceeds max.\n  */\n\n\n  function updateEmojiHistory(hexcode, num) {\n    let newEmojis = emojiHistory;\n\n    for (let i = 0; i < num; i++) {\n      newEmojis.push(hexcode);\n\n      if (newEmojis.length > lenHistory) {\n        newEmojis.shift();\n      }\n    }\n\n    setEmojiHistory(newEmojis);\n  }\n\n  const handleClick = (id, hexcode, e) => {\n    //TODO: Remove this before final build:\n    console.log(hexcode + ' was clicked. ID is ' + id);\n    /*\n    TODO: Replace all emoji with 'loading' emoji with no click handler\n    */\n\n    /*\n    Add clicked emoji to emoji history\n    */\n\n    updateEmojiHistory(hexcode, 1);\n    /*\n    Get hexcodes for new tiles, then assign them to tiles.\n    */\n\n    Promise.all([getRandomHexcodes(), getRandomBlendHexcodes(hexcode)]).then(values => {\n      console.log(values);\n      var newTileObj;\n      const tilePromise = new Promise((resolve, reject) => {\n        resolve(newTileObject(values, hexcode));\n      });\n      tilePromise.then(value => {\n        newTileObj = value;\n        setEmojiTiles(newTileObj);\n      }).catch(err => {\n        console.log('err');\n      }); //newTileObj = newTileObject(values, hexcode); //gen tiles then return them\n    }); //var testimg;\n    //var fetchurl = \"http://localhost:9000/blendemojis/demo/\" + emoji.hexcode + \"/\" + \"1F0CF\";\n    // fetch(fetchurl, { headers: { 'Content-Type': 'blob' } })\n    //   .then(response => response.body)\n    //   .then(body => {\n    //     const reader = body.getReader();\n    //     return new ReadableStream({\n    //       start(controller) {\n    //         return pump();\n    //         function pump() {\n    //           return reader.read().then(({ done, value }) => {\n    //             // When no more data needs to be consumed, close the stream\n    //             if (done) {\n    //               controller.close();\n    //               return;\n    //             }\n    //             // Enqueue the next data chunk into our target stream\n    //             controller.enqueue(value);\n    //             return pump();\n    //           });\n    //         }\n    //       }\n    //     })\n    //   })\n    //   .then(stream => new Response(stream))\n    //   .then(response => response.blob())\n    //   .then(blob => URL.createObjectURL(blob))\n    //   .then(url => testimg = url)\n    //   .then(() => {\n    //     var obj;\n    //     var newTileObj;\n    //     fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString())\n    //       .then(res => res.json())\n    //       .then(data => obj = JSON.parse(data))\n    //       .then(() => newTileObj = newTileObject(obj, demoBlends, testimg))\n    //       .then(() => setEmojiTiles(newTileObj))\n    //   })\n    //   .catch(err => console.error(err));\n  };\n  /*\n  Display the initial emoji options.\n  This is occuring twice according to the API terminal\n  */\n\n\n  window.addEventListener('DOMContentLoaded', event => {\n    /*\n      Fill the emoji history with placeholders\n    */\n    updateEmojiHistory(openmoji.openmojis[3073].hexcode, lenHistory);\n    /*\n      TODO: Replace this with a call to the getrandoms function\n    */\n\n    var obj;\n    fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => iniTileObj = newTileObject([obj, []])).then(() => setEmojiTiles(iniTileObj));\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TiledHexagons, {\n      tileSideLengths: 60,\n      tileGap: 4,\n      tileBorderRadii: 9,\n      maxHorizontal: maxHorizontal,\n      tileTextStyles: {\n        fontFamily: 'Source Sans Pro',\n        fontSize: '68px'\n      },\n      tiles: emojiTiles,\n      onLoad: () => handleClick()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Hexgrid, \"+3VtAv/BIw3CeMu2hnKoMc1i9do=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["TiledHexagons","useState","useEffect","React","Component","openmoji","require","fs","numEmojis","maxHorizontal","maxVertical","Math","ceil","center","round","lenHistory","lenRandom","defaultEmojis","index","push","openmojis","hexcode","cat1Index","cat2Index","Hexgrid","emojiHistory","setEmojiHistory","iniTileObj","newTileObject","emojiTiles","setEmojiTiles","getTileColour","tileIndex","colour","getTileImage","image","Array","isArray","console","log","fetch","then","res","json","data","url","_emojis","selectedHexcode","hexcodes","blendedHexcodes","undefined","forEach","indexOf","length","i","tileMapPromise","Promise","resolve","reject","tileObj","map","img","key","onClick","e","handleClick","fill","styles","normal","hover","active","value","catch","err","obj","getRandomHexcodes","toString","JSON","parse","getRandomBlendHexcodes","updateEmojiHistory","num","newEmojis","shift","id","all","values","newTileObj","tilePromise","window","addEventListener","event","fontFamily","fontSize"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,gBAA9B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AAEA,MAAME,SAAS,GAAG,GAAlB;AACA,MAAMC,aAAa,GAAG,EAAtB,C,CAAyB;;AACzB,MAAMC,WAAW,GAAGC,IAAI,CAACC,IAAL,CAAUJ,SAAS,GAAGC,aAAtB,CAApB;AAEA,MAAMI,MAAM,GAAGF,IAAI,CAACG,KAAL,CAAYL,aAAa,IAAIC,WAAW,GAAG,CAAlB,CAAd,GAAuC,CAACD,aAAa,GAAG,CAAjB,KAAuBC,WAAW,GAAG,CAArC,CAAlD,IAA8FC,IAAI,CAACG,KAAL,CAAYL,aAAD,GAAkB,CAA7B,CAA7G,C,CAA6I;;AAC7I,MAAMM,UAAU,GAAGJ,IAAI,CAACC,IAAL,CAAUH,aAAa,GAAG,CAA1B,CAAnB;AACA,MAAMO,SAAS,GAAGD,UAAlB;AACA,MAAME,aAAa,GAAG,EAAtB;;AAEA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGV,SAA5B,EAAuCU,KAAK,EAA5C,EAAgD;AAC9CD,EAAAA,aAAa,CAACE,IAAd,CAAmBd,QAAQ,CAACe,SAAT,CAAmB,IAAnB,EAAyBC,OAA5C;AACD;;AAED,MAAMC,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EACA,EADA,EACI,EADJ,EACQ,EADR,EACY,EADZ,EACgB,EADhB,EACoB,EADpB,EAEA,EAFA,EAEI,EAFJ,EAEQ,EAFR,EAEY,EAFZ,EAEgB,EAFhB,EAEoB,EAFpB,EAEwB,EAFxB,EAGA,EAHA,EAGI,EAHJ,EAGQ,EAHR,EAGY,EAHZ,EAGgB,EAHhB,EAGoB,EAHpB,EAGwB,EAHxB,EAIA,EAJA,EAII,EAJJ,EAIQ,EAJR,EAIY,EAJZ,EAIgB,EAJhB,EAIoB,EAJpB,EAIwB,EAJxB,EAI4B,EAJ5B,EAKA,EALA,EAKI,EALJ,EAKQ,EALR,EAKY,EALZ,EAKgB,EALhB,EAKoB,EALpB,EAKwB,EALxB,EAK4B,GAL5B,CAAlB;AAOA,MAAMC,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,EAAc,EAAd,EACA,EADA,EACI,EADJ,EACQ,EADR,EACY,EADZ,EAEA,EAFA,EAEI,EAFJ,EAEQ,EAFR,EAGA,EAHA,EAGI,EAHJ,EAIA,EAJA,CAAlB;;AAMA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCzB,QAAQ,CAAC,EAAD,CAAhD;AACA,MAAI0B,UAAU,GAAGC,aAAa,CAAC,CAACX,aAAD,CAAD,CAA9B;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8B7B,QAAQ,CAAC0B,UAAD,CAA5C;;AAIA,WAASI,aAAT,CAAuBC,SAAvB,EAAkC;AAChC,QAAIC,MAAM,GAAG,OAAb;;AACA,QAAID,SAAS,IAAKnB,MAAM,GAAG,CAAvB,IAA6BmB,SAAS,IAAKnB,MAAM,GAAGE,UAAT,GAAsB,CAArE,EAAyE;AACvEkB,MAAAA,MAAM,GAAG,SAAT,CADuE,CACpD;AACpB;;AACD,QAAID,SAAS,KAAKnB,MAAlB,EAA0B;AACxBoB,MAAAA,MAAM,GAAG,SAAT;AACD;;AACD,WAAOA,MAAP;AACD;;AAED,WAASC,YAAT,CAAsBF,SAAtB,EAAiCX,OAAjC,EAA0C;AACxC,QAAIc,KAAK,GAAI,SAAb;;AAEA,QAAIC,KAAK,CAACC,OAAN,CAAchB,OAAd,CAAJ,EAA4B;AAAE;AAC5BiB,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACAJ,MAAAA,KAAK,GAAI,mBAAT;AACAK,MAAAA,KAAK,CAAC,uCAAuCnB,OAAO,CAAC,CAAD,CAA9C,GAAoD,GAApD,GAA0D,OAA3D,CAAL,CACCoB,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,IAAI,IAAI;AAACT,QAAAA,KAAK,GAAG,yCAAyCS,IAAI,CAACC,GAAtD;AAA0D,OAFzE,EAGCJ,IAHD,CAGM,MAAM;AAAC,eAAON,KAAP;AAAa,OAH1B;AAID,KAPD,MAQK;AAAE;AACLA,MAAAA,KAAK,GAAI,WAAUd,OAAQ,MAA3B;AACA,aAAOc,KAAP;AACD;AACF;;AAED,WAASP,aAAT,CAAuBkB,OAAvB,EAAgCC,eAAhC,EAAiD;AAC/C,QAAIC,QAAQ,GAAGF,OAAO,CAAC,CAAD,CAAtB;AACA,QAAIG,eAAe,GAAGH,OAAO,CAAC,CAAD,CAA7B;AAEAR,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA;AACJ;AACA;;AACI,QAAGU,eAAe,KAAKC,SAApB,IAAiCD,eAAe,KAAK,IAArD,IAA6DF,eAAe,KAAKG,SAApF,EAA8F;AAC5F5B,MAAAA,SAAS,CAAC6B,OAAV,CAAkBjC,KAAK,IAAI;AACzB8B,QAAAA,QAAQ,CAAC9B,KAAD,CAAR,GAAkB+B,eAAe,CAAC3B,SAAS,CAAC8B,OAAV,CAAkBlC,KAAlB,CAAD,CAAjC,CADyB,CAEzB;AACD,OAHD;AAID;AAED;AACJ;AACA;;;AACI,QAAIO,YAAY,CAAC4B,MAAb,IAAuB,CAA3B,EAA8B;AAC5B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7B,YAAY,CAAC4B,MAAjC,EAAyCC,CAAC,EAA1C,EAA8C;AAC5C,YAAIzC,MAAM,GAAGyC,CAAT,GAAa,EAAjB,EAAqB;AACnBN,UAAAA,QAAQ,CAACnC,MAAM,GAAGyC,CAAV,CAAR,GAAuB7B,YAAY,CAACA,YAAY,CAAC4B,MAAb,GAAsB,CAAtB,GAA0BC,CAA3B,CAAnC;AACD;AACF;AACF;AAED;AACJ;AACA;AACG;;;AACA,UAAMC,cAAc,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrD;AACN;AACA;AACM,YAAMC,OAAO,GAAGX,QAAQ,CAACY,GAAT,CAAa,CAACvC,OAAD,EAAUH,KAAV,KAAoB;AAC/C;AACR;AACA;AACQ,YAAIe,MAAM,GAAGF,aAAa,CAACb,KAAD,CAA1B;AAEA;AACR;AACA;;AACQ,YAAIiB,KAAK,GAAI,mBAAb;AACAA,QAAAA,KAAK,GAAGD,YAAY,CAAChB,KAAD,EAAQG,OAAR,CAApB,CAV+C,CAUT;AAEtC;;AACA,eAAO;AACLwC,UAAAA,GAAG,EAAE1B,KADA;AAEL2B,UAAAA,GAAG,EAAE5C,KAFA;AAGL6C,UAAAA,OAAO,EAAGC,CAAD,IAAOC,WAAW,CAAC/C,KAAD,EAAQG,OAAR,EAAiB2C,CAAjB,CAHtB;AAILE,UAAAA,IAAI,EAAE,EAJD;AAKLC,UAAAA,MAAM,EAAE;AACNC,YAAAA,MAAM,EAAE;AACNF,cAAAA,IAAI,EAAEjC;AADA,aADF;AAINoC,YAAAA,KAAK,EAAE;AACLH,cAAAA,IAAI,EAAE;AADD,aAJD;AAONI,YAAAA,MAAM,EAAE;AACNJ,cAAAA,IAAI,EAAE;AADA;AAPF;AALH,SAAP;AAiBD,OA9Be,CAAhB;AA+BAT,MAAAA,OAAO,CAACE,OAAD,CAAP;AACH,KApCuB,CAAvB;AAsCDJ,IAAAA,cAAc,CACbd,IADD,CACM8B,KAAK,IAAI;AAACjC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AAA8B,aAAOgC,KAAP;AAAc,KAD5D,EAECC,KAFD,CAEOC,GAAG,IAAI;AAAEnC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AAAoB,KAFpC;AAII;AACN;AACA;AACA;;AACM,QAAImC,GAAJ;;AACA,QAAI3B,eAAe,KAAK,IAApB,IAA4BA,eAAe,KAAKG,SAApD,EAA+D,CAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACR;AACA;AAEG;AAAC;AAEF;AACF;AACA;;;AACE,WAASyB,iBAAT,GAA6B;AAC3B,WAAO,IAAInB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAIgB,GAAJ;AACAlC,MAAAA,KAAK,CAAC,gDAAgDhC,SAAS,CAACoE,QAAV,EAAjD,CAAL,CACGnC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,IAAI,IAAI8B,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAWlC,IAAX,CAFtB,EAGGH,IAHH,CAGQ,MAAM;AAAEgB,QAAAA,OAAO,CAACiB,GAAD,CAAP;AAAe,OAH/B;AAID,KANM,CAAP;AAOD;AAED;AACF;AACA;;;AACE,WAASK,sBAAT,CAAgC1D,OAAhC,EAAyC;AACvC,WAAO,IAAImC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAIgB,GAAJ;AACAlC,MAAAA,KAAK,CAAC,+CAA+CnB,OAA/C,GAAyD,SAAzD,GAAqEC,SAAS,CAAC+B,MAAV,CAAiBuB,QAAjB,EAAtE,CAAL,CACGnC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,IAAI,IAAI8B,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAWlC,IAAX,CAFtB,EAGGH,IAHH,CAGQ,MAAM;AAAEgB,QAAAA,OAAO,CAACiB,GAAD,CAAP;AAAe,OAH/B;AAID,KANM,CAAP;AAOD;AAED;AACF;AACA;;;AACE,WAASM,kBAAT,CAA4B3D,OAA5B,EAAqC4D,GAArC,EAA0C;AACxC,QAAIC,SAAS,GAAGzD,YAAhB;;AACA,SAAK,IAAI6B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2B,GAApB,EAAyB3B,CAAC,EAA1B,EAA8B;AAC5B4B,MAAAA,SAAS,CAAC/D,IAAV,CAAeE,OAAf;;AACA,UAAI6D,SAAS,CAAC7B,MAAV,GAAmBtC,UAAvB,EAAmC;AACjCmE,QAAAA,SAAS,CAACC,KAAV;AACD;AACF;;AACDzD,IAAAA,eAAe,CAACwD,SAAD,CAAf;AACD;;AAED,QAAMjB,WAAW,GAAG,CAACmB,EAAD,EAAK/D,OAAL,EAAc2C,CAAd,KAAoB;AACtC;AACA1B,IAAAA,OAAO,CAACC,GAAR,CAAYlB,OAAO,GAAG,sBAAV,GAAmC+D,EAA/C;AAEA;AACJ;AACA;;AAEI;AACJ;AACA;;AACIJ,IAAAA,kBAAkB,CAAC3D,OAAD,EAAU,CAAV,CAAlB;AAEA;AACJ;AACA;;AACImC,IAAAA,OAAO,CAAC6B,GAAR,CAAY,CAACV,iBAAiB,EAAlB,EAAsBI,sBAAsB,CAAC1D,OAAD,CAA5C,CAAZ,EAAoEoB,IAApE,CAA0E6C,MAAD,IAAY;AACnFhD,MAAAA,OAAO,CAACC,GAAR,CAAY+C,MAAZ;AACA,UAAIC,UAAJ;AACA,YAAMC,WAAW,GAAG,IAAIhC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACnDD,QAAAA,OAAO,CAAC7B,aAAa,CAAC0D,MAAD,EAASjE,OAAT,CAAd,CAAP;AACD,OAFmB,CAApB;AAGAmE,MAAAA,WAAW,CACV/C,IADD,CACM8B,KAAK,IAAI;AAACgB,QAAAA,UAAU,GAAGhB,KAAb;AAAoBzC,QAAAA,aAAa,CAACyD,UAAD,CAAb;AAA2B,OAD/D,EAECf,KAFD,CAEOC,GAAG,IAAI;AAAEnC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AAAoB,OAFpC,EANmF,CAUnF;AAED,KAZD,EAhBsC,CA8BtC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GArED;AAuEA;AACF;AACA;AACA;;;AACEkD,EAAAA,MAAM,CAACC,gBAAP,CAAwB,kBAAxB,EAA6CC,KAAD,IAAW;AACrD;AACJ;AACA;AACIX,IAAAA,kBAAkB,CAAC3E,QAAQ,CAACe,SAAT,CAAmB,IAAnB,EAAyBC,OAA1B,EAAmCN,UAAnC,CAAlB;AAEA;AACJ;AACA;;AACI,QAAI2D,GAAJ;AACAlC,IAAAA,KAAK,CAAC,gDAAgDhC,SAAS,CAACoE,QAAV,EAAjD,CAAL,CACGnC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,IAAI,IAAI8B,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAWlC,IAAX,CAFtB,EAGGH,IAHH,CAGQ,MAAMd,UAAU,GAAGC,aAAa,CAAC,CAAC8C,GAAD,EAAM,EAAN,CAAD,CAHxC,EAIGjC,IAJH,CAIQ,MAAMX,aAAa,CAACH,UAAD,CAJ3B;AAKD,GAfD;AAiBA,sBACE;AAAA,2BACE,QAAC,aAAD;AACE,MAAA,eAAe,EAAE,EADnB;AAEE,MAAA,OAAO,EAAE,CAFX;AAGE,MAAA,eAAe,EAAE,CAHnB;AAIE,MAAA,aAAa,EAAElB,aAJjB;AAKE,MAAA,cAAc,EAAE;AACdmF,QAAAA,UAAU,EAAE,iBADE;AAEdC,QAAAA,QAAQ,EAAE;AAFI,OALlB;AASE,MAAA,KAAK,EAAEhE,UATT;AAUE,MAAA,MAAM,EAAE,MAAMoC,WAAW;AAV3B;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAgBD,CA1RD;;GAAMzC,O;;KAAAA,O;AA4RN,eAAeA,OAAf","sourcesContent":["import { TiledHexagons } from 'tiled-hexagons'\nimport { useState, useEffect } from 'react'\nimport React, { Component } from 'react';\n\nconst openmoji = require('openmoji');\nconst fs = require('fs');\n\nconst numEmojis = 259;\nconst maxHorizontal = 19;//111\nconst maxVertical = Math.ceil(numEmojis / maxHorizontal);\n\nconst center = Math.round((maxHorizontal * (maxVertical / 4)) + ((maxHorizontal - 1) * (maxVertical / 4))) - Math.round((maxHorizontal) / 2);//Math.ceil(numEmojis/2)-3;\nconst lenHistory = Math.ceil(maxHorizontal / 2);\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\n\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073].hexcode);\n}\n\nconst cat1Index = [0, 1, 2, 3, 4, 5,\n                  19, 20, 21, 22, 23, 24,\n                  37, 38, 39, 40, 41, 42, 43,\n                  56, 57, 58, 59, 60, 61, 62,\n                  74, 75, 76, 77, 78, 79, 80, 81,\n                  93, 94, 95, 96, 97, 98, 99, 100];\n\nconst cat2Index = [7, 8, 9, 10, 11,\n                  26, 27, 28, 29,\n                  45, 46, 47,\n                  64, 65,\n                  83];\n  \nconst Hexgrid = () => {\n  const [emojiHistory, setEmojiHistory] = useState([]);\n  var iniTileObj = newTileObject([defaultEmojis]);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj)\n\n\n  \n  function getTileColour(tileIndex) {\n    let colour = 'white';\n    if (tileIndex <= (center - 1) && tileIndex >= (center - lenHistory + 1)) {\n      colour = '#dbf7fd';//'#d4d4d4';\n    }\n    if (tileIndex === center) {\n      colour = '#a4eefc';\n    }\n    return colour;\n  }\n\n  function getTileImage(tileIndex, hexcode) {\n    let image = `nothing`;\n\n    if (Array.isArray(hexcode)) { //Then hexcode is a blend\n      console.log('in image function, not fetched yet');\n      image = `/images/1F4A9.svg`;\n      fetch(\"http://localhost:9000/blendemojis/\" + hexcode[0] + \"/\" + \"1F0CF\")\n      .then(res => res.json())\n      .then(data => {image = \"http://localhost:9000/public/blends/\" + data.url})\n      .then(() => {return image})\n    }\n    else { //it is a single emoji character\n      image = `/images/${hexcode}.svg`;\n      return image;\n    }\n  }\n\n  function newTileObject(_emojis, selectedHexcode) {\n    let hexcodes = _emojis[0];\n    let blendedHexcodes = _emojis[1];\n\n    console.log(\"creating new tile object..\");\n    /*\n    TODO: Substitute blendedHexcodes into hexcodes where appropriate\n    */\n    if(blendedHexcodes !== undefined && blendedHexcodes !== null && selectedHexcode !== undefined){\n      cat1Index.forEach(index => {\n        hexcodes[index] = blendedHexcodes[cat1Index.indexOf(index)];\n        //console.log(hexcodes[index]);\n      });\n    }\n\n    /*\n    Insert emoji history into active tiles\n    */\n    if (emojiHistory.length >= 1) {\n      for (let i = 0; i < emojiHistory.length; i++) {\n        if (center - i > 49) {\n          hexcodes[center - i] = emojiHistory[emojiHistory.length - 1 - i];\n        }\n      }\n    }\n\n    /*\n    TODO: Make promises, so everything resolves on time.\n    */\n   //map tiles then return then\n   const tileMapPromise = new Promise((resolve, reject) => {\n      /*\n      Map hexcodes to tiles \n      */\n      const tileObj = hexcodes.map((hexcode, index) => {\n        /*  \n        Assign tile colour based on position in grid\n        */\n        let colour = getTileColour(index);\n\n        /*  \n        Assign tile image based on position in grid\n        */\n        let image = `/images/1F4EF.svg`;\n        image = getTileImage(index, hexcode); //get image then return tile\n\n        //console.log(image);\n        return {\n          img: image,\n          key: index,\n          onClick: (e) => handleClick(index, hexcode, e),\n          fill: '',\n          styles: {\n            normal: {\n              fill: colour\n            },\n            hover: {\n              fill: '#6cc7da'\n            },\n            active: {\n              fill: '#779df1'\n            }\n          }\n        }\n      })\n      resolve(tileObj);\n  });\n  \n  tileMapPromise\n  .then(value => {console.log('returning tile');return value;})\n  .catch(err => { console.log('err') });\n\n      /*\n      Get blends from backend \n      TODO: Move this to handleclick, poor placement here. not working out.\n      */\n      var obj;\n      if (selectedHexcode !== null && selectedHexcode !== undefined) {\n        // fetch(\"http://localhost:9000/randomblendhexcodes/\" + selectedHexcode + \"?limit=\" + randomBlendIndex.length.toString())\n        //   .then(res => res.json())\n        //   .then(data => obj = JSON.parse(data))\n        //   .then(obj => blendedHexcodes = obj)\n        //   .then(() => {\n        //     /*\n        //     Add blends into hexcodes[] \n        //     */\n        //     for (let i = 0; i < hexcodes.length; i++) {\n        //       if (randomBlendIndex.includes(i)) {\n        //         let j = randomBlendIndex.indexOf(i);\n        //         hexcodes[i] = blendedHexcodes[j];\n        //       }\n        //     }\n        //   })\n        /*\n        Map hexcodes to tiles \n        */\n    \n  }}\n\n  /*  \n  Get random emojis for every tile\n  */\n  function getRandomHexcodes() {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString())\n        .then(res => res.json())\n        .then(data => obj = JSON.parse(data))\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  /*  \n  Get random blends\n  */\n  function getRandomBlendHexcodes(hexcode) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"http://localhost:9000/randomblendhexcodes/\" + hexcode + \"?limit=\" + cat1Index.length.toString())\n        .then(res => res.json())\n        .then(data => obj = JSON.parse(data))\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  /*\n  Update emoji history and remove the oldest entry if length exceeds max.\n  */\n  function updateEmojiHistory(hexcode, num) {\n    let newEmojis = emojiHistory;\n    for (let i = 0; i < num; i++) {\n      newEmojis.push(hexcode);   \n      if (newEmojis.length > lenHistory) {\n        newEmojis.shift();\n      }   \n    }\n    setEmojiHistory(newEmojis);\n  }\n\n  const handleClick = (id, hexcode, e) => {\n    //TODO: Remove this before final build:\n    console.log(hexcode + ' was clicked. ID is ' + id);\n\n    /*\n    TODO: Replace all emoji with 'loading' emoji with no click handler\n    */\n\n    /*\n    Add clicked emoji to emoji history\n    */\n    updateEmojiHistory(hexcode, 1);\n\n    /*\n    Get hexcodes for new tiles, then assign them to tiles.\n    */\n    Promise.all([getRandomHexcodes(), getRandomBlendHexcodes(hexcode)]).then((values) => {\n      console.log(values);\n      var newTileObj;\n      const tilePromise = new Promise((resolve, reject) => {\n        resolve(newTileObject(values, hexcode));\n      });\n      tilePromise\n      .then(value => {newTileObj = value; setEmojiTiles(newTileObj);})\n      .catch(err => { console.log('err') });\n\n      //newTileObj = newTileObject(values, hexcode); //gen tiles then return them\n      \n    });\n\n    //var testimg;\n    //var fetchurl = \"http://localhost:9000/blendemojis/demo/\" + emoji.hexcode + \"/\" + \"1F0CF\";\n    // fetch(fetchurl, { headers: { 'Content-Type': 'blob' } })\n    //   .then(response => response.body)\n    //   .then(body => {\n    //     const reader = body.getReader();\n\n    //     return new ReadableStream({\n    //       start(controller) {\n    //         return pump();\n    //         function pump() {\n    //           return reader.read().then(({ done, value }) => {\n    //             // When no more data needs to be consumed, close the stream\n    //             if (done) {\n    //               controller.close();\n    //               return;\n    //             }\n    //             // Enqueue the next data chunk into our target stream\n    //             controller.enqueue(value);\n    //             return pump();\n    //           });\n    //         }\n    //       }\n    //     })\n    //   })\n    //   .then(stream => new Response(stream))\n    //   .then(response => response.blob())\n    //   .then(blob => URL.createObjectURL(blob))\n    //   .then(url => testimg = url)\n    //   .then(() => {\n    //     var obj;\n    //     var newTileObj;\n    //     fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString())\n    //       .then(res => res.json())\n    //       .then(data => obj = JSON.parse(data))\n    //       .then(() => newTileObj = newTileObject(obj, demoBlends, testimg))\n    //       .then(() => setEmojiTiles(newTileObj))\n    //   })\n    //   .catch(err => console.error(err));\n  }\n\n  /*\n  Display the initial emoji options.\n  This is occuring twice according to the API terminal\n  */\n  window.addEventListener('DOMContentLoaded', (event) => {\n    /*\n      Fill the emoji history with placeholders\n    */\n    updateEmojiHistory(openmoji.openmojis[3073].hexcode, lenHistory);\n\n    /*\n      TODO: Replace this with a call to the getrandoms function\n    */\n    var obj;\n    fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString())\n      .then(res => res.json())\n      .then(data => obj = JSON.parse(data))\n      .then(() => iniTileObj = newTileObject([obj, []]))\n      .then(() => setEmojiTiles(iniTileObj))\n  });\n\n  return (\n    <>\n      <TiledHexagons\n        tileSideLengths={60}\n        tileGap={4}\n        tileBorderRadii={9}\n        maxHorizontal={maxHorizontal}\n        tileTextStyles={{\n          fontFamily: 'Source Sans Pro',\n          fontSize: '68px',\n        }}\n        tiles={emojiTiles}\n        onLoad={() => handleClick()}\n      />\n    </>\n  );\n}\n\nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}