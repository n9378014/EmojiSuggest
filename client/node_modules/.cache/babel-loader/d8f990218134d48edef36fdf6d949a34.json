{"ast":null,"code":"import _slicedToArray from\"/Users/graceheffernan/Documents/GitHub/EmojiSuggest/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{TiledHexagons}from'tiled-hexagons';import{useState,useEffect}from'react';import React,{Component}from'react';import{saveAs}from'file-saver';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var openmoji=require('openmoji');var fs=require('fs');var numEmojis=259;var maxHorizontal=19;//111\nvar maxVertical=Math.ceil(numEmojis/maxHorizontal);var center=Math.round(maxHorizontal*(maxVertical/4)+(maxHorizontal-1)*(maxVertical/4))-Math.round(maxHorizontal/2);//Math.ceil(numEmojis/2)-3;\nvar lenHistory=Math.ceil(maxHorizontal/2)-1;var lenRandom=lenHistory;var defaultEmojis=[];for(var index=0;index<numEmojis;index++){defaultEmojis.push(openmoji.openmojis[3073].hexcode);}var cat1Index=[0,1,2,3,4,5,19,20,21,22,23,24,37,38,39,40,41,42,43,56,57,58,59,60,61,62,74,75,76,77,78,79,80,81,93,94,95,96,97,98,99];//100\nvar cat2Index=[7,8,9,10,11,26,27,28,29,45,46,47,64,65,83];var cat3Index=[13,14,15,16,17,18,31,32,33,34,35,36,49,50,51,52,53,54,55,67,68,69,70,71,72,73,85,86,87,88,89,90,91,92,103,104,105,106,107,108,109,110];var cat4Index=[];//137\nvar cat5Index=[];var cat6Index=[];var cat7Index=[121,122,123,124,125,126,127,128,129];//Line heading right from center\nvar imageURLs=new Array(numEmojis);var Hexgrid=function Hexgrid(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),emojiHistory=_useState2[0],setEmojiHistory=_useState2[1];var iniTileObj=newTileObject([defaultEmojis]);var _useState3=useState(iniTileObj),_useState4=_slicedToArray(_useState3,2),emojiTiles=_useState4[0],setEmojiTiles=_useState4[1];//\nfunction getTileColour(tileIndex){var colour='white';if(tileIndex<=center-1&&tileIndex>=center-lenHistory){//If tile is part of emoji history\ncolour='#dbf7fd';//'#d4d4d4';\n}if(tileIndex===center){//If active emoji tile\ncolour='#a4eefc';}return colour;}function getTileImage(tileIndex,hexcode){var image=\"\";if(Array.isArray(hexcode)){//Then hexcode is a blend\n//image = `http://localhost:9000/blends/1F9431F0CF.png`;\n// fetch(\"http://localhost:9000/blendemojis/\" + hexcode[0] + \"/\" + hexcode[1])\n//   .then(res => res.json())\n//   .then(data => { image = \"http://localhost:9000/blends/\" + data.url;})\n//   .then(() => { return image })\n//return 'http://localhost:9000/blends/1F9431F0CF.png';\nreturn image;}else{//it is a single emoji character\nimage=\"/images/\"+hexcode+\".png\";return image;}}function newTileObject(_emojis,selectedHexcode){var hexcodes=_emojis[0];var blendedHexcodes=_emojis[1];for(var i=0;i<hexcodes.length;i++){imageURLs[i]=getTileImage(i,hexcodes[i]);}/*\n    Substitute blendedHexcodes into hexcodes where appropriate\n    */if(blendedHexcodes!==undefined&&blendedHexcodes!==null&&selectedHexcode!==undefined){cat1Index.forEach(function(index){hexcodes[index]=blendedHexcodes[cat1Index.indexOf(index)];//console.log(hexcodes[index]);\n});}/*\n      Insert emoji history into active tiles\n      */if(emojiHistory.length>=1){for(var _i=0;_i<emojiHistory.length;_i++){if(center-_i-1>=center-lenHistory){hexcodes[center-_i-1]=emojiHistory[emojiHistory.length-2-_i];}}}// if (emojiHistory.length >= 1) {\n//   values[0][center] = emojiHistory[emojiHistory.length-1];\n//   for (let i = 0; i < emojiHistory.length-1; i++) {\n//     if (center - i -1> 49) {\n//       values[0][center - i - 2] = emojiHistory[emojiHistory.length - 1 - i];\n//     }\n//   }\n// }\n/*\n    Map hexcodes to tiles \n    */var tileObj=hexcodes.map(function(hexcode,index){/*  \n      Assign tile colour based on position in grid\n      */var colour=getTileColour(index);/*  \n      Assign tile image based on position in grid\n      */ //let image = `/images/1F4EF.svg`;\n//image = imageURLs[index];//getTileImage(index, hexcode); //get image then return tile\nif(Array.isArray(hexcode)){//Then hexcode is a blend\n//image = `http://localhost:9000/blends/1F9431F0CF.png`;\n// fetch(\"http://localhost:9000/blendemojis/\" + hexcode[0] + \"/\" + \"1F0CF\")\n//   .then(res => res.json())\n//   .then(data => { imageURLs[index] = \"http://localhost:9000/blends/\" + data.url })\n//return 'http://localhost:9000/blends/1F9431F0CF.png';\n//return image\nimageURLs[index]=\"/blends/\"+hexcode[0]+hexcode[1]+'.png';}else{//it is a single emoji character\nimageURLs[index]=\"/images/\"+hexcode+\".png\";}return{img:imageURLs[index],key:index,onClick:function onClick(e){return handleClick(index,hexcode,e);},fill:'',styles:{normal:{fill:colour},hover:{fill:'#6cc7da'},active:{fill:'#779df1'}}};});return tileObj;}/*  \n  Get random emojis for every tile\n  */function getRandomHexcodes(){return new Promise(function(resolve,reject){var obj;fetch(\"/api/randomhexcodes?limit=\"+numEmojis.toString()).then(function(res){return res.json();}).then(function(data){return obj=JSON.parse(data);}).then(function(){resolve(obj);});});}/*  \n  Get random blends\n  */function getRandomBlendHexcodes(hexcode){return new Promise(function(resolve,reject){var obj;fetch(\"/api/randomblendhexcodes/\"+hexcode+\"?limit=\"+cat1Index.length.toString()).then(function(res){return res.json();}).then(function(data){return obj=JSON.parse(data);}).then(function(){resolve(obj);});});}/*  \n  Get markov emojis\n  */function getMarkovHexcodes(hexcode){return new Promise(function(resolve,reject){var obj;fetch(\"/api/markovhexcodes/\"+hexcode+\"?limit=\"+cat7Index.length.toString()).then(function(res){return res.json();}).then(function(data){return obj=JSON.parse(data);}).then(function(){resolve(obj);});});}/*  \n  Get markov blends\n  */function getMarkovBlendHexcodes(hexcode,limit){return new Promise(function(resolve,reject){var obj;fetch(\"/api/markovblendhexcodes/\"+hexcode+\"?limit=\"+limit.toString()).then(function(res){return res.json();}).then(function(data){return obj=JSON.parse(data);}).then(function(){resolve(obj);});});}/*\n  Update emoji history and remove the oldest entry if length exceeds max.\n  */function updateEmojiHistory(hexcode,num){var newEmojis=emojiHistory;for(var i=0;i<num;i++){newEmojis.push(hexcode);if(newEmojis.length>lenHistory+1){newEmojis.shift();}}setEmojiHistory(newEmojis);}function getBlendHexcode(hexcode1,hexcode2){return new Promise(function(resolve,reject){var obj;fetch(\"/api/blendemojis/\"+hexcode1+\"/\"+hexcode2).then(function(res){return res.json();}).then(function(){obj=[hexcode1,hexcode2];}).then(function(){resolve(obj);});});}var handleClick=function handleClick(id,hexcode,e){console.log(hexcode+' was clicked. ID is '+id);if(id===center){var imgURL='';if(Array.isArray(hexcode)){//Then hexcode is a blend\nimgURL=\"/blends/\"+hexcode[0]+hexcode[1]+'.png';}else{//it is a single emoji character\nimgURL=\"/images/\"+hexcode+\".png\";}saveAs(imgURL,'blend.png');}else{updateEmojiHistory(hexcode,1);//Add clicked emoji to emoji history\n/*\n      TODO: Replace all emoji with 'loading' emoji with no click handler\n      */ //TODO: This is a quick fix, find a way to send both hexcodes and still get blends:\nif(Array.isArray(hexcode)){//Then hexcode is a blend\nhexcode=hexcode[1];}//Get hexcodes for new tiles, then assign them to tiles:\nPromise.all([getRandomHexcodes(),getRandomBlendHexcodes(hexcode),getMarkovHexcodes(hexcode),getBlendHexcode(hexcode,emojiHistory[emojiHistory.length-2]),getBlendHexcode(emojiHistory[emojiHistory.length-2],hexcode),getMarkovBlendHexcodes(hexcode,cat2Index.length)]).then(function(values){//Substitute blendedHexcodes into hexcodes where appropriate:\nif(values[1]!==undefined&&values[1]!==null&&values[2]!==null&&hexcode!==undefined){cat1Index.forEach(function(index){values[0][index]=values[1][cat1Index.indexOf(index)];});cat7Index.forEach(function(index){values[0][index]=values[2][cat7Index.indexOf(index)];});cat2Index.forEach(function(index){values[0][index]=values[5][cat2Index.indexOf(index)];console.log(\"Cat2: \"+values[5][cat2Index.indexOf(index)]);});}values[0][100]=values[3];//Make this one a blend between current and most recent history\nvalues[0][137]=values[4];//Make this one a blend between current and most recent history\n//Insert emoji history into active tiles:\nif(emojiHistory.length>=1){values[0][center]=emojiHistory[emojiHistory.length-1];for(var i=0;i<emojiHistory.length;i++){if(center-i-1>=center-lenHistory){values[0][center-i-1]=emojiHistory[emojiHistory.length-1-i];}}}var newTileObj;var tilePromise=new Promise(function(resolve,reject){newTileObj=newTileObject(values,hexcode);resolve();});tilePromise.then(function(){setEmojiTiles(newTileObj);}).catch(function(error){console.log(\"Something went wrong with the tilePromise.\");console.error(error.message);});//newTileObj = newTileObject(values, hexcode); //gen tiles then return them\n}).catch(function(error){console.error(error.message);});}};/*\n  Display the initial emoji options.\n  This is occuring twice according to the API terminal\n  */window.addEventListener('DOMContentLoaded',function(event){/*\n      Fill the emoji history with placeholders\n    */updateEmojiHistory(openmoji.openmojis[3073].hexcode,lenHistory+1);/*\n      TODO: Replace this with a call to the getrandoms function\n    */var obj;fetch(\"/api/randomhexcodes?limit=\"+numEmojis.toString()).then(function(res){return res.json();}).then(function(data){return obj=JSON.parse(data);}).then(function(){return iniTileObj=newTileObject([obj,[]]);}).then(function(){return setEmojiTiles(iniTileObj);}).catch(function(error){console.log(\"Something went wrong with the randomhexcodes fetch request.\");console.error(error.message);});});return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(TiledHexagons,{tileSideLengths:60,tileGap:4,tileBorderRadii:9,maxHorizontal:maxHorizontal,tileTextStyles:{fontFamily:'Source Sans Pro',fontSize:'68px'},tiles:emojiTiles,onLoad:function onLoad(){return handleClick();}})});};export default Hexgrid;","map":{"version":3,"sources":["/Users/graceheffernan/Documents/GitHub/EmojiSuggest/client/src/Hexgrid.js"],"names":["TiledHexagons","useState","useEffect","React","Component","saveAs","openmoji","require","fs","numEmojis","maxHorizontal","maxVertical","Math","ceil","center","round","lenHistory","lenRandom","defaultEmojis","index","push","openmojis","hexcode","cat1Index","cat2Index","cat3Index","cat4Index","cat5Index","cat6Index","cat7Index","imageURLs","Array","Hexgrid","emojiHistory","setEmojiHistory","iniTileObj","newTileObject","emojiTiles","setEmojiTiles","getTileColour","tileIndex","colour","getTileImage","image","isArray","_emojis","selectedHexcode","hexcodes","blendedHexcodes","i","length","undefined","forEach","indexOf","tileObj","map","img","key","onClick","e","handleClick","fill","styles","normal","hover","active","getRandomHexcodes","Promise","resolve","reject","obj","fetch","toString","then","res","json","data","JSON","parse","getRandomBlendHexcodes","getMarkovHexcodes","getMarkovBlendHexcodes","limit","updateEmojiHistory","num","newEmojis","shift","getBlendHexcode","hexcode1","hexcode2","id","console","log","imgURL","all","values","newTileObj","tilePromise","catch","error","message","window","addEventListener","event","fontFamily","fontSize"],"mappings":"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","sourcesContent":["import { TiledHexagons } from 'tiled-hexagons'\nimport { useState, useEffect } from 'react'\nimport React, { Component } from 'react';\nimport { saveAs } from 'file-saver';\n\nconst openmoji = require('openmoji');\nconst fs = require('fs');\n\nconst numEmojis = 259;\nconst maxHorizontal = 19;//111\nconst maxVertical = Math.ceil(numEmojis / maxHorizontal);\n\nconst center = Math.round((maxHorizontal * (maxVertical / 4)) + ((maxHorizontal - 1) * (maxVertical / 4))) - Math.round((maxHorizontal) / 2);//Math.ceil(numEmojis/2)-3;\nconst lenHistory = Math.ceil(maxHorizontal / 2) - 1;\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\n\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073].hexcode);\n}\n\nconst cat1Index = [0, 1, 2, 3, 4, 5,\n  19, 20, 21, 22, 23, 24,\n  37, 38, 39, 40, 41, 42, 43,\n  56, 57, 58, 59, 60, 61, 62,\n  74, 75, 76, 77, 78, 79, 80, 81,\n  93, 94, 95, 96, 97, 98, 99]; //100\n\nconst cat2Index = [7, 8, 9, 10, 11,\n  26, 27, 28, 29,\n  45, 46, 47,\n  64, 65,\n  83];\n\nconst cat3Index = [13, 14, 15, 16, 17, 18,\n                  31, 32, 33, 34, 35, 36,\n                  49, 50, 51, 52, 53, 54, 55,\n                  67, 68, 69, 70, 71, 72, 73,\n                  85, 86, 87, 88, 89, 90, 91, 92,\n                  103, 104, 105, 106, 107, 108, 109, 110];\n\nconst cat4Index = []; //137\nconst cat5Index = [];\nconst cat6Index = [];\nconst cat7Index = [121, 122, 123, 124, 125, 126, 127, 128, 129]; //Line heading right from center\n\nlet imageURLs = new Array(numEmojis);\n\nconst Hexgrid = () => {\n  const [emojiHistory, setEmojiHistory] = useState([]);\n  var iniTileObj = newTileObject([defaultEmojis]);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj); //\n\n  function getTileColour(tileIndex) {\n    let colour = 'white';\n    if (tileIndex <= (center - 1) && tileIndex >= (center - lenHistory)) { //If tile is part of emoji history\n      colour = '#dbf7fd';//'#d4d4d4';\n    }\n    if (tileIndex === center) { //If active emoji tile\n      colour = '#a4eefc';\n    }\n    return colour;\n  }\n\n  function getTileImage(tileIndex, hexcode) {\n    let image = ``;\n\n    if (Array.isArray(hexcode)) { //Then hexcode is a blend\n      //image = `http://localhost:9000/blends/1F9431F0CF.png`;\n      // fetch(\"http://localhost:9000/blendemojis/\" + hexcode[0] + \"/\" + hexcode[1])\n      //   .then(res => res.json())\n      //   .then(data => { image = \"http://localhost:9000/blends/\" + data.url;})\n      //   .then(() => { return image })\n      //return 'http://localhost:9000/blends/1F9431F0CF.png';\n      return image\n    }\n    else { //it is a single emoji character\n      image = \"/images/\" + hexcode + \".png\";\n      return image;\n    }\n  }\n\n  function newTileObject(_emojis, selectedHexcode) {\n    let hexcodes = _emojis[0];\n    let blendedHexcodes = _emojis[1];\n    for (let i = 0; i < hexcodes.length; i++) {\n      imageURLs[i] = getTileImage(i, hexcodes[i]);\n    }\n\n    /*\n    Substitute blendedHexcodes into hexcodes where appropriate\n    */\n    if (blendedHexcodes !== undefined && blendedHexcodes !== null && selectedHexcode !== undefined) {\n      cat1Index.forEach(index => {\n        hexcodes[index] = blendedHexcodes[cat1Index.indexOf(index)];\n        //console.log(hexcodes[index]);\n      });\n    }\n\n      /*\n      Insert emoji history into active tiles\n      */\n      if (emojiHistory.length >= 1) {\n        for (let i = 0; i < emojiHistory.length; i++) {\n          if (center - i - 1 >= (center - lenHistory)) {\n            hexcodes[center - i -1] = emojiHistory[emojiHistory.length - 2 - i];\n          }\n        }\n      }\n\n      // if (emojiHistory.length >= 1) {\n      //   values[0][center] = emojiHistory[emojiHistory.length-1];\n      //   for (let i = 0; i < emojiHistory.length-1; i++) {\n      //     if (center - i -1> 49) {\n      //       values[0][center - i - 2] = emojiHistory[emojiHistory.length - 1 - i];\n      //     }\n      //   }\n      // }\n\n    /*\n    Map hexcodes to tiles \n    */\n    const tileObj = hexcodes.map((hexcode, index) => {\n      /*  \n      Assign tile colour based on position in grid\n      */\n      let colour = getTileColour(index);\n\n      /*  \n      Assign tile image based on position in grid\n      */\n      //let image = `/images/1F4EF.svg`;\n      //image = imageURLs[index];//getTileImage(index, hexcode); //get image then return tile\n      if (Array.isArray(hexcode)) { //Then hexcode is a blend\n        //image = `http://localhost:9000/blends/1F9431F0CF.png`;\n        // fetch(\"http://localhost:9000/blendemojis/\" + hexcode[0] + \"/\" + \"1F0CF\")\n        //   .then(res => res.json())\n        //   .then(data => { imageURLs[index] = \"http://localhost:9000/blends/\" + data.url })\n        //return 'http://localhost:9000/blends/1F9431F0CF.png';\n        //return image\n        imageURLs[index] = \"/blends/\" + hexcode[0] + hexcode[1] + '.png';\n      }\n      else { //it is a single emoji character\n        imageURLs[index] = \"/images/\" + hexcode + \".png\";\n      }\n      return {\n        img: imageURLs[index],\n        key: index,\n        onClick: (e) => handleClick(index, hexcode, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      }\n    })\n\n    return tileObj;\n  }\n\n  /*  \n  Get random emojis for every tile\n  */\n  function getRandomHexcodes() {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"/api/randomhexcodes?limit=\" + numEmojis.toString())\n        .then(res => res.json())\n        .then(data => obj = JSON.parse(data))\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  /*  \n  Get random blends\n  */\n  function getRandomBlendHexcodes(hexcode) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"/api/randomblendhexcodes/\" + hexcode + \"?limit=\" + cat1Index.length.toString())\n        .then(res => res.json())\n        .then(data => obj = JSON.parse(data))\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  /*  \n  Get markov emojis\n  */\n  function getMarkovHexcodes(hexcode) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"/api/markovhexcodes/\" + hexcode + \"?limit=\" + cat7Index.length.toString())\n        .then(res => res.json())\n        .then(data => obj = JSON.parse(data))\n        .then(() => { resolve(obj); })\n    })\n  }\n\n    /*  \n  Get markov blends\n  */\n  function getMarkovBlendHexcodes(hexcode, limit) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"/api/markovblendhexcodes/\" + hexcode + \"?limit=\" + limit.toString())\n        .then(res => res.json())\n        .then(data => obj = JSON.parse(data))\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  /*\n  Update emoji history and remove the oldest entry if length exceeds max.\n  */\n  function updateEmojiHistory(hexcode, num) {\n    let newEmojis = emojiHistory;\n    for (let i = 0; i < num; i++) {\n      newEmojis.push(hexcode);\n      if (newEmojis.length > lenHistory+1) {\n        newEmojis.shift();\n      }\n    }\n    setEmojiHistory(newEmojis);\n  }\n\n  function getBlendHexcode(hexcode1, hexcode2) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"/api/blendemojis/\" + hexcode1 + \"/\" + hexcode2)\n        .then(res => res.json())\n        .then(() => { obj = [hexcode1, hexcode2]; })\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  const handleClick = (id, hexcode, e) => {\n    console.log(hexcode + ' was clicked. ID is ' + id);\n\n    if (id === center) {\n      var imgURL = '';\n    \n      if (Array.isArray(hexcode)) { //Then hexcode is a blend\n        imgURL = \"/blends/\" + hexcode[0] + hexcode[1] + '.png';\n      }\n      else { //it is a single emoji character\n        imgURL = \"/images/\" + hexcode + \".png\";\n      }\n  \n      saveAs(imgURL, 'blend.png');\n    }\n    else {\n      updateEmojiHistory(hexcode, 1); //Add clicked emoji to emoji history\n\n      /*\n      TODO: Replace all emoji with 'loading' emoji with no click handler\n      */\n  \n      //TODO: This is a quick fix, find a way to send both hexcodes and still get blends:\n      if(Array.isArray(hexcode)){ //Then hexcode is a blend\n        hexcode = hexcode[1];\n      }\n  \n      //Get hexcodes for new tiles, then assign them to tiles:\n      Promise.all([getRandomHexcodes(), getRandomBlendHexcodes(hexcode), getMarkovHexcodes(hexcode), getBlendHexcode(hexcode, emojiHistory[emojiHistory.length - 2]), getBlendHexcode(emojiHistory[emojiHistory.length - 2], hexcode), getMarkovBlendHexcodes(hexcode, cat2Index.length)]).then((values) => {\n        //Substitute blendedHexcodes into hexcodes where appropriate:\n        if (values[1] !== undefined && values[1] !== null && values[2] !== null && hexcode !== undefined) {\n          cat1Index.forEach(index => {\n            values[0][index] = values[1][cat1Index.indexOf(index)];\n          });\n          cat7Index.forEach(index => {\n            values[0][index] = values[2][cat7Index.indexOf(index)];\n          });\n          cat2Index.forEach(index => {\n            values[0][index] = values[5][cat2Index.indexOf(index)];\n            console.log(\"Cat2: \" + values[5][cat2Index.indexOf(index)]);\n          });\n        }\n  \n        values[0][100] = values[3]; //Make this one a blend between current and most recent history\n        values[0][137] = values[4]; //Make this one a blend between current and most recent history\n  \n        //Insert emoji history into active tiles:\n        if (emojiHistory.length >= 1) {\n          values[0][center] = emojiHistory[emojiHistory.length-1];\n          for (let i = 0; i < emojiHistory.length; i++) {\n            if (center - i - 1 >= (center - lenHistory)) {\n              values[0][center - i - 1] = emojiHistory[emojiHistory.length - 1 - i];\n            }\n          }\n        }\n  \n        var newTileObj;\n        const tilePromise = new Promise((resolve, reject) => {\n          newTileObj = newTileObject(values, hexcode);\n          resolve();\n        });\n        tilePromise\n          .then(() => { setEmojiTiles(newTileObj); }).catch(error => {\n            console.log(\"Something went wrong with the tilePromise.\")\n            console.error(error.message)\n          });\n  \n        //newTileObj = newTileObject(values, hexcode); //gen tiles then return them\n      }).catch(error => {\n        console.error(error.message)\n      });\n    }\n  }\n\n  /*\n  Display the initial emoji options.\n  This is occuring twice according to the API terminal\n  */\n  window.addEventListener('DOMContentLoaded', (event) => {\n    /*\n      Fill the emoji history with placeholders\n    */\n    updateEmojiHistory(openmoji.openmojis[3073].hexcode, lenHistory+1 );\n    \n    /*\n      TODO: Replace this with a call to the getrandoms function\n    */\n    var obj;\n    fetch(\"/api/randomhexcodes?limit=\" + numEmojis.toString())\n      .then(res => res.json())\n      .then(data => obj = JSON.parse(data))\n      .then(() => iniTileObj = newTileObject([obj, []]))\n      .then(() => setEmojiTiles(iniTileObj))\n      .catch(error => {\n        console.log(\"Something went wrong with the randomhexcodes fetch request.\")\n        console.error(error.message)\n      })\n  });\n\n  return (\n    <>\n      <TiledHexagons\n        tileSideLengths={60}\n        tileGap={4}\n        tileBorderRadii={9}\n        maxHorizontal={maxHorizontal}\n        tileTextStyles={{\n          fontFamily: 'Source Sans Pro',\n          fontSize: '68px',\n        }}\n        tiles={emojiTiles}\n        onLoad={() => handleClick()}\n      />\n    </>\n  );\n}\n\nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}