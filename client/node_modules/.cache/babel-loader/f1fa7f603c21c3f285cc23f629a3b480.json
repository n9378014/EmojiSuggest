{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { TiledHexagons } from 'tiled-hexagons';\nimport { useState, useEffect } from 'react';\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nconst fs = require('fs');\n\nconst numEmojis = 259;\nconst maxHorizontal = 19; //111\n\nconst maxVertical = Math.ceil(numEmojis / maxHorizontal);\nconst center = Math.round(maxHorizontal * (maxVertical / 4) + (maxHorizontal - 1) * (maxVertical / 4)) - Math.round(maxHorizontal / 2); //Math.ceil(numEmojis/2)-3;\n\nconst lenHistory = Math.ceil(maxHorizontal / 2);\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\n\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073].hexcode);\n}\n\nconst cat1Index = [0, 1, 2, 3, 4, 5, 19, 20, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 56, 57, 58, 59, 60, 61, 62, 74, 75, 76, 77, 78, 79, 80, 81, 93, 94, 95, 96, 97, 98, 99, 100];\nconst cat2Index = [7, 8, 9, 10, 11, 26, 27, 28, 29, 45, 46, 47, 64, 65, 83];\nconst cat3Index = [13, 14, 15, 16, 17, 18, 31, 32, 33, 34, 35, 36, 49, 50, 51, 52, 53, 54, 55, 67, 68, 69, 70, 71, 72, 73, 85, 86, 87, 88, 89, 90, 91, 92, 103, 104, 105, 106, 107, 108, 109, 110];\nconst cat4Index = [];\nconst cat5Index = [];\nconst cat6Index = [];\nlet imageURLs = new Array(numEmojis);\n\nconst Hexgrid = () => {\n  _s();\n\n  const [emojiHistory, setEmojiHistory] = useState([]);\n  var iniTileObj = newTileObject([defaultEmojis]);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj); //\n\n  function getTileColour(tileIndex) {\n    let colour = 'white';\n\n    if (tileIndex <= center - 1 && tileIndex >= center - lenHistory + 1) {\n      colour = '#dbf7fd'; //'#d4d4d4';\n    }\n\n    if (tileIndex === center) {\n      colour = '#a4eefc';\n    }\n\n    return colour;\n  }\n\n  function getTileImage(tileIndex, hexcode) {\n    let image = ``;\n\n    if (Array.isArray(hexcode)) {\n      //Then hexcode is a blend\n      //image = `http://localhost:9000/blends/1F9431F0CF.png`;\n      fetch(\"http://localhost:9000/blendemojis/\" + hexcode[0] + \"/\" + \"1F0CF\").then(res => res.json()).then(data => {\n        image = \"http://localhost:9000/public/blends/\" + data.url;\n      }).then(() => {\n        return image;\n      }); //return 'http://localhost:9000/blends/1F9431F0CF.png';\n      //return image\n    } else {\n      //it is a single emoji character\n      image = `/images/${hexcode}.svg`;\n      return image;\n    }\n  }\n\n  function newTileObject(_emojis, selectedHexcode) {\n    let hexcodes = _emojis[0];\n    let blendedHexcodes = _emojis[1];\n\n    for (let i = 0; i < hexcodes.length; i++) {\n      imageURLs[i] = getTileImage(i, hexcodes[i]);\n    }\n    /*\n    Substitute blendedHexcodes into hexcodes where appropriate\n    */\n\n\n    if (blendedHexcodes !== undefined && blendedHexcodes !== null && selectedHexcode !== undefined) {\n      cat1Index.forEach(index => {\n        hexcodes[index] = blendedHexcodes[cat1Index.indexOf(index)]; //console.log(hexcodes[index]);\n      });\n    }\n    /*\n    Insert emoji history into active tiles\n    */\n\n\n    if (emojiHistory.length >= 1) {\n      for (let i = 0; i < emojiHistory.length; i++) {\n        if (center - i > 49) {\n          hexcodes[center - i] = emojiHistory[emojiHistory.length - 1 - i];\n        }\n      }\n    }\n    /*\n    TODO: Get image URLs BEFORE MAPPING TILES\n    */\n\n    /*\n    Map hexcodes to tiles \n    */\n\n\n    const tileObj = hexcodes.map((hexcode, index) => {\n      /*  \n      Assign tile colour based on position in grid\n      */\n      let colour = getTileColour(index);\n      /*  \n      Assign tile image based on position in grid\n      */\n      //let image = `/images/1F4EF.svg`;\n      //image = imageURLs[index];//getTileImage(index, hexcode); //get image then return tile\n\n      if (Array.isArray(hexcode)) {\n        //Then hexcode is a blend\n        //image = `http://localhost:9000/blends/1F9431F0CF.png`;\n        fetch(\"http://localhost:9000/blendemojis/\" + hexcode[0] + \"/\" + \"1F0CF\").then(res => res.json()).then(data => {\n          imageURLs[index] = \"http://localhost:9000/blends/\" + data.url;\n        }); //return 'http://localhost:9000/blends/1F9431F0CF.png';\n        //return image\n        //imageURLs[index] = \"http://localhost:9000/blends/\" + hexcode[0] + '1F0CF.png';\n      } else {\n        //it is a single emoji character\n        imageURLs[index] = `/images/${hexcode}.svg`;\n      } //console.log(image);\n\n\n      return {\n        img: imageURLs[index],\n        key: index,\n        onClick: e => handleClick(index, hexcode, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      };\n    });\n    return tileObj;\n  }\n  /*  \n  Get random emojis for every tile\n  */\n\n\n  function getRandomHexcodes() {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => {\n        resolve(obj);\n      });\n    });\n  }\n  /*  \n  Get random blends\n  */\n\n\n  function getRandomBlendHexcodes(hexcode) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"http://localhost:9000/randomblendhexcodes/\" + hexcode + \"?limit=\" + cat1Index.length.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => {\n        resolve(obj);\n      });\n    });\n  }\n  /*\n  Update emoji history and remove the oldest entry if length exceeds max.\n  */\n\n\n  function updateEmojiHistory(hexcode, num) {\n    let newEmojis = emojiHistory;\n\n    for (let i = 0; i < num; i++) {\n      newEmojis.push(hexcode);\n\n      if (newEmojis.length > lenHistory) {\n        newEmojis.shift();\n      }\n    }\n\n    setEmojiHistory(newEmojis);\n  }\n\n  const handleClick = (id, hexcode, e) => {\n    //TODO: Remove this before final build:\n    console.log(hexcode + ' was clicked. ID is ' + id);\n    /*\n    TODO: Replace all emoji with 'loading' emoji with no click handler\n    */\n\n    if (Array.isArray(hexcode)) {\n      //Then hexcode is a blend\n      hexcode = hexcode[0];\n    }\n    /*\n    Add clicked emoji to emoji history\n    */\n\n\n    updateEmojiHistory(hexcode, 1);\n    /*\n    Get hexcodes for new tiles, then assign them to tiles.\n    */\n\n    Promise.all([getRandomHexcodes(), getRandomBlendHexcodes(hexcode)]).then(values => {\n      //console.log(values);\n\n      /*\n      Substitute blendedHexcodes into hexcodes where appropriate\n      */\n      if (values[1] !== undefined && values[1] !== null && hexcode !== undefined) {\n        cat1Index.forEach(index => {\n          values[0][index] = values[1][cat1Index.indexOf(index)]; //console.log(hexcodes[index]);\n        });\n      }\n      /*\n      Insert emoji history into active tiles\n      */\n\n\n      if (emojiHistory.length >= 1) {\n        for (let i = 0; i < emojiHistory.length; i++) {\n          if (center - i > 49) {\n            values[0][center - i] = emojiHistory[emojiHistory.length - 1 - i];\n          }\n        }\n      }\n\n      var newTileObj;\n      const tilePromise = new Promise((resolve, reject) => {\n        newTileObj = newTileObject(values, hexcode);\n        resolve();\n      });\n      tilePromise.then(() => {\n        setEmojiTiles(newTileObj);\n      }); //newTileObj = newTileObject(values, hexcode); //gen tiles then return them\n    });\n  };\n  /*\n  Display the initial emoji options.\n  This is occuring twice according to the API terminal\n  */\n\n\n  window.addEventListener('DOMContentLoaded', event => {\n    /*\n      Fill the emoji history with placeholders\n    */\n    updateEmojiHistory(openmoji.openmojis[3073].hexcode, lenHistory);\n    /*\n      TODO: Replace this with a call to the getrandoms function\n    */\n\n    var obj;\n    fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => iniTileObj = newTileObject([obj, []])).then(() => setEmojiTiles(iniTileObj));\n  });\n  useEffect(() => {\n    // Triggers whenever the tiles are updated\n    console.log(\"USEEFFECT\");\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TiledHexagons, {\n      tileSideLengths: 60,\n      tileGap: 4,\n      tileBorderRadii: 9,\n      maxHorizontal: maxHorizontal,\n      tileTextStyles: {\n        fontFamily: 'Source Sans Pro',\n        fontSize: '68px'\n      },\n      tiles: emojiTiles,\n      onLoad: () => handleClick()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Hexgrid, \"wE2pZtomitMqTbbO8EKk9WhTvEs=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["TiledHexagons","useState","useEffect","React","Component","openmoji","require","fs","numEmojis","maxHorizontal","maxVertical","Math","ceil","center","round","lenHistory","lenRandom","defaultEmojis","index","push","openmojis","hexcode","cat1Index","cat2Index","cat3Index","cat4Index","cat5Index","cat6Index","imageURLs","Array","Hexgrid","emojiHistory","setEmojiHistory","iniTileObj","newTileObject","emojiTiles","setEmojiTiles","getTileColour","tileIndex","colour","getTileImage","image","isArray","fetch","then","res","json","data","url","_emojis","selectedHexcode","hexcodes","blendedHexcodes","i","length","undefined","forEach","indexOf","tileObj","map","img","key","onClick","e","handleClick","fill","styles","normal","hover","active","getRandomHexcodes","Promise","resolve","reject","obj","toString","JSON","parse","getRandomBlendHexcodes","updateEmojiHistory","num","newEmojis","shift","id","console","log","all","values","newTileObj","tilePromise","window","addEventListener","event","fontFamily","fontSize"],"mappings":"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","sourcesContent":["import { TiledHexagons } from 'tiled-hexagons'\nimport { useState, useEffect } from 'react'\nimport React, { Component } from 'react';\n\nconst openmoji = require('openmoji');\nconst fs = require('fs');\n\nconst numEmojis = 259;\nconst maxHorizontal = 19;//111\nconst maxVertical = Math.ceil(numEmojis / maxHorizontal);\n\nconst center = Math.round((maxHorizontal * (maxVertical / 4)) + ((maxHorizontal - 1) * (maxVertical / 4))) - Math.round((maxHorizontal) / 2);//Math.ceil(numEmojis/2)-3;\nconst lenHistory = Math.ceil(maxHorizontal / 2);\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\n\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073].hexcode);\n}\n\nconst cat1Index = [0, 1, 2, 3, 4, 5,\n  19, 20, 21, 22, 23, 24,\n  37, 38, 39, 40, 41, 42, 43,\n  56, 57, 58, 59, 60, 61, 62,\n  74, 75, 76, 77, 78, 79, 80, 81,\n  93, 94, 95, 96, 97, 98, 99, 100];\n\nconst cat2Index = [7, 8, 9, 10, 11,\n  26, 27, 28, 29,\n  45, 46, 47,\n  64, 65,\n  83];\n\nconst cat3Index = [13, 14, 15, 16, 17, 18,\n                  31, 32, 33, 34, 35, 36,\n                  49, 50, 51, 52, 53, 54, 55,\n                  67, 68, 69, 70, 71, 72, 73,\n                  85, 86, 87, 88, 89, 90, 91, 92,\n                  103, 104, 105, 106, 107, 108, 109, 110];\n\nconst cat4Index = [];\nconst cat5Index = [];\nconst cat6Index = [];\n\nlet imageURLs = new Array(numEmojis);\n\nconst Hexgrid = () => {\n  const [emojiHistory, setEmojiHistory] = useState([]);\n  var iniTileObj = newTileObject([defaultEmojis]);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj); //\n\n  function getTileColour(tileIndex) {\n    let colour = 'white';\n    if (tileIndex <= (center - 1) && tileIndex >= (center - lenHistory + 1)) {\n      colour = '#dbf7fd';//'#d4d4d4';\n    }\n    if (tileIndex === center) {\n      colour = '#a4eefc';\n    }\n    return colour;\n  }\n\n  function getTileImage(tileIndex, hexcode) {\n    let image = ``;\n\n    if (Array.isArray(hexcode)) { //Then hexcode is a blend\n      //image = `http://localhost:9000/blends/1F9431F0CF.png`;\n      fetch(\"http://localhost:9000/blendemojis/\" + hexcode[0] + \"/\" + \"1F0CF\")\n        .then(res => res.json())\n        .then(data => { image = \"http://localhost:9000/public/blends/\" + data.url })\n        .then(() => { return image })\n      //return 'http://localhost:9000/blends/1F9431F0CF.png';\n      //return image\n    }\n    else { //it is a single emoji character\n      image = `/images/${hexcode}.svg`;\n      return image;\n    }\n  }\n\n  function newTileObject(_emojis, selectedHexcode) {\n    let hexcodes = _emojis[0];\n    let blendedHexcodes = _emojis[1];\n    for (let i = 0; i < hexcodes.length; i++) {\n      imageURLs[i] = getTileImage(i, hexcodes[i]);\n    }\n\n    /*\n    Substitute blendedHexcodes into hexcodes where appropriate\n    */\n    if (blendedHexcodes !== undefined && blendedHexcodes !== null && selectedHexcode !== undefined) {\n      cat1Index.forEach(index => {\n        hexcodes[index] = blendedHexcodes[cat1Index.indexOf(index)];\n        //console.log(hexcodes[index]);\n      });\n    }\n\n      /*\n      Insert emoji history into active tiles\n      */\n      if (emojiHistory.length >= 1) {\n        for (let i = 0; i < emojiHistory.length; i++) {\n          if (center - i > 49) {\n            hexcodes[center - i] = emojiHistory[emojiHistory.length - 1 - i];\n          }\n        }\n      }\n\n\n    /*\n    TODO: Get image URLs BEFORE MAPPING TILES\n    */\n\n    /*\n    Map hexcodes to tiles \n    */\n    const tileObj = hexcodes.map((hexcode, index) => {\n      /*  \n      Assign tile colour based on position in grid\n      */\n      let colour = getTileColour(index);\n\n      /*  \n      Assign tile image based on position in grid\n      */\n      //let image = `/images/1F4EF.svg`;\n      //image = imageURLs[index];//getTileImage(index, hexcode); //get image then return tile\n      if (Array.isArray(hexcode)) { //Then hexcode is a blend\n        //image = `http://localhost:9000/blends/1F9431F0CF.png`;\n        fetch(\"http://localhost:9000/blendemojis/\" + hexcode[0] + \"/\" + \"1F0CF\")\n          .then(res => res.json())\n          .then(data => { imageURLs[index] = \"http://localhost:9000/blends/\" + data.url })\n        //return 'http://localhost:9000/blends/1F9431F0CF.png';\n        //return image\n        //imageURLs[index] = \"http://localhost:9000/blends/\" + hexcode[0] + '1F0CF.png';\n      }\n      else { //it is a single emoji character\n        imageURLs[index] = `/images/${hexcode}.svg`;\n      }\n      \n      //console.log(image);\n      return {\n        img: imageURLs[index],\n        key: index,\n        onClick: (e) => handleClick(index, hexcode, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      }\n    })\n\n    return tileObj;\n  }\n\n  /*  \n  Get random emojis for every tile\n  */\n  function getRandomHexcodes() {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString())\n        .then(res => res.json())\n        .then(data => obj = JSON.parse(data))\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  /*  \n  Get random blends\n  */\n  function getRandomBlendHexcodes(hexcode) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"http://localhost:9000/randomblendhexcodes/\" + hexcode + \"?limit=\" + cat1Index.length.toString())\n        .then(res => res.json())\n        .then(data => obj = JSON.parse(data))\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  /*\n  Update emoji history and remove the oldest entry if length exceeds max.\n  */\n  function updateEmojiHistory(hexcode, num) {\n    let newEmojis = emojiHistory;\n    for (let i = 0; i < num; i++) {\n      newEmojis.push(hexcode);\n      if (newEmojis.length > lenHistory) {\n        newEmojis.shift();\n      }\n    }\n    setEmojiHistory(newEmojis);\n  }\n\n  const handleClick = (id, hexcode, e) => {\n    //TODO: Remove this before final build:\n    console.log(hexcode + ' was clicked. ID is ' + id);\n\n    /*\n    TODO: Replace all emoji with 'loading' emoji with no click handler\n    */\n\n    if(Array.isArray(hexcode)){ //Then hexcode is a blend\n      hexcode = hexcode[0];\n    }\n\n\n    /*\n    Add clicked emoji to emoji history\n    */\n    updateEmojiHistory(hexcode, 1);\n\n    /*\n    Get hexcodes for new tiles, then assign them to tiles.\n    */\n    Promise.all([getRandomHexcodes(), getRandomBlendHexcodes(hexcode)]).then((values) => {\n      //console.log(values);\n\n      /*\n      Substitute blendedHexcodes into hexcodes where appropriate\n      */\n      if (values[1] !== undefined && values[1] !== null && hexcode !== undefined) {\n        cat1Index.forEach(index => {\n          values[0][index] = values[1][cat1Index.indexOf(index)];\n          //console.log(hexcodes[index]);\n        });\n      }\n\n      /*\n      Insert emoji history into active tiles\n      */\n      if (emojiHistory.length >= 1) {\n        for (let i = 0; i < emojiHistory.length; i++) {\n          if (center - i > 49) {\n            values[0][center - i] = emojiHistory[emojiHistory.length - 1 - i];\n          }\n        }\n      }\n\n      var newTileObj;\n      const tilePromise = new Promise((resolve, reject) => {\n        newTileObj = newTileObject(values, hexcode);\n        resolve();\n      });\n      tilePromise\n        .then(() => { setEmojiTiles(newTileObj); });\n\n      //newTileObj = newTileObject(values, hexcode); //gen tiles then return them\n\n    });\n  }\n\n  /*\n  Display the initial emoji options.\n  This is occuring twice according to the API terminal\n  */\n  window.addEventListener('DOMContentLoaded', (event) => {\n    /*\n      Fill the emoji history with placeholders\n    */\n    updateEmojiHistory(openmoji.openmojis[3073].hexcode, lenHistory);\n\n    /*\n      TODO: Replace this with a call to the getrandoms function\n    */\n    var obj;\n    fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString())\n      .then(res => res.json())\n      .then(data => obj = JSON.parse(data))\n      .then(() => iniTileObj = newTileObject([obj, []]))\n      .then(() => setEmojiTiles(iniTileObj))\n  });\n\n  useEffect(() => {\n    // Triggers whenever the tiles are updated\n    console.log(\"USEEFFECT\");\n  });\n\n  return (\n    <>\n      <TiledHexagons\n        tileSideLengths={60}\n        tileGap={4}\n        tileBorderRadii={9}\n        maxHorizontal={maxHorizontal}\n        tileTextStyles={{\n          fontFamily: 'Source Sans Pro',\n          fontSize: '68px',\n        }}\n        tiles={emojiTiles}\n        onLoad={() => handleClick()}\n      />\n    </>\n  );\n}\n\nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}