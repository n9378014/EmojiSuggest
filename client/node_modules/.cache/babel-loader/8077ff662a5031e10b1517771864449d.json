{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { TiledHexagons } from 'tiled-hexagons';\nimport { useState, useEffect } from 'react';\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nconst fs = require('fs');\n\nconst numEmojis = 259;\nconst maxHorizontal = 19; //111\n\nconst maxVertical = Math.ceil(numEmojis / maxHorizontal);\nconst center = Math.round(maxHorizontal * (maxVertical / 4) + (maxHorizontal - 1) * (maxVertical / 4)) - Math.round(maxHorizontal / 2); //Math.ceil(numEmojis/2)-3;\n\nconst lenHistory = Math.ceil(maxHorizontal / 2);\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\n\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073].hexcode);\n}\n\nconst cat1Index = [0, 1, 2, 3, 4, 5, 19, 20, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 56, 57, 58, 59, 60, 61, 62, 74, 75, 76, 77, 78, 79, 80, 81, 93, 94, 95, 96, 97, 98, 99, 100];\nconst cat2Index = [7, 8, 9, 10, 11, 26, 27, 28, 29, 45, 46, 47, 64, 65, 83];\n\nconst Hexgrid = () => {\n  _s();\n\n  const [emojiHistory, setEmojiHistory] = useState([]);\n  var iniTileObj = newTileObject([defaultEmojis]);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj); //\n\n  function getTileColour(tileIndex) {\n    let colour = 'white';\n\n    if (tileIndex <= center - 1 && tileIndex >= center - lenHistory + 1) {\n      colour = '#dbf7fd'; //'#d4d4d4';\n    }\n\n    if (tileIndex === center) {\n      colour = '#a4eefc';\n    }\n\n    return colour;\n  }\n\n  function getTileImage(tileIndex, hexcode) {\n    let image = `nothing`;\n\n    if (Array.isArray(hexcode)) {\n      //Then hexcode is a blend\n      console.log('in image function, not fetched yet'); //image = `http://localhost:9000/blends/1F9431F0CF.png`;\n\n      fetch(\"http://localhost:9000/blendemojis/\" + hexcode[0] + \"/\" + \"1F0CF\").then(res => res.json()).then(data => {\n        image = \"http://localhost:9000/public/blends/\" + data.url;\n      }).then(() => {\n        return image;\n      }); //return 'http://localhost:9000/blends/1F9431F0CF.png';\n\n      return image;\n    } else {\n      //it is a single emoji character\n      image = `/images/${hexcode}.svg`;\n      return image;\n    }\n  }\n\n  function newTileObject(_emojis, selectedHexcode) {\n    let hexcodes = _emojis[0];\n    let blendedHexcodes = _emojis[1];\n    let imageURLs = new Array(hexcodes.length);\n    /*\n    Substitute blendedHexcodes into hexcodes where appropriate\n    */\n\n    if (blendedHexcodes !== undefined && blendedHexcodes !== null && selectedHexcode !== undefined) {\n      cat1Index.forEach(index => {\n        hexcodes[index] = blendedHexcodes[cat1Index.indexOf(index)]; //console.log(hexcodes[index]);\n      });\n    }\n    /*\n    Insert emoji history into active tiles\n    */\n\n\n    if (emojiHistory.length >= 1) {\n      for (let i = 0; i < emojiHistory.length; i++) {\n        if (center - i > 49) {\n          hexcodes[center - i] = emojiHistory[emojiHistory.length - 1 - i];\n        }\n      }\n    }\n    /*\n    TODO: Get image URLs\n    */\n\n\n    for (let i = 0; i < hexcodes.length; i++) {\n      let image = `nothing`;\n\n      if (Array.isArray(hexcodes[i])) {\n        //Then hexcode is a blend\n        console.log('in image function, not fetched yet'); //image = `http://localhost:9000/blends/1F9431F0CF.png`;\n\n        fetch(\"http://localhost:9000/blendemojis/\" + hexcode[0] + \"/\" + \"1F0CF\").then(res => res.json()).then(data => {\n          image = \"http://localhost:9000/public/blends/\" + data.url;\n        }).then(() => {\n          imageURLs[i] = image; //getTileImage(i, hexcodes[i]);\n        }); //return 'http://localhost:9000/blends/1F9431F0CF.png';\n      } else {\n        //it is a single emoji character\n        image = `/images/${hexcode}.svg`;\n        imageURLs[i] = image; //getTileImage(i, hexcodes[i]);\n      }\n    }\n    /*\n    Map hexcodes to tiles \n    */\n\n\n    const tileObj = hexcodes.map((hexcode, index) => {\n      /*  \n      Assign tile colour based on position in grid\n      */\n      let colour = getTileColour(index);\n      /*  \n      Assign tile image based on position in grid\n      */\n\n      let image = `/images/1F4EF.svg`;\n      image = imageURLs[index]; //getTileImage(index, hexcode); //get image then return tile\n      //console.log(image);\n\n      return {\n        img: image,\n        key: index,\n        onClick: e => handleClick(index, hexcode, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      };\n    });\n    return tileObj;\n  }\n  /*  \n  Get random emojis for every tile\n  */\n\n\n  function getRandomHexcodes() {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => {\n        resolve(obj);\n      });\n    });\n  }\n  /*  \n  Get random blends\n  */\n\n\n  function getRandomBlendHexcodes(hexcode) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"http://localhost:9000/randomblendhexcodes/\" + hexcode + \"?limit=\" + cat1Index.length.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => {\n        resolve(obj);\n      });\n    });\n  }\n  /*\n  Update emoji history and remove the oldest entry if length exceeds max.\n  */\n\n\n  function updateEmojiHistory(hexcode, num) {\n    let newEmojis = emojiHistory;\n\n    for (let i = 0; i < num; i++) {\n      newEmojis.push(hexcode);\n\n      if (newEmojis.length > lenHistory) {\n        newEmojis.shift();\n      }\n    }\n\n    setEmojiHistory(newEmojis);\n  }\n\n  const handleClick = (id, hexcode, e) => {\n    //TODO: Remove this before final build:\n    console.log(hexcode + ' was clicked. ID is ' + id);\n    /*\n    TODO: Replace all emoji with 'loading' emoji with no click handler\n    */\n\n    /*\n    Add clicked emoji to emoji history\n    */\n\n    updateEmojiHistory(hexcode, 1);\n    /*\n    Get hexcodes for new tiles, then assign them to tiles.\n    */\n\n    Promise.all([getRandomHexcodes(), getRandomBlendHexcodes(hexcode)]).then(values => {\n      console.log(values);\n      var newTileObj;\n      const tilePromise = new Promise((resolve, reject) => {\n        resolve(newTileObject(values, hexcode));\n      });\n      tilePromise.then(value => {\n        newTileObj = value;\n        setEmojiTiles(newTileObj);\n      }); //newTileObj = newTileObject(values, hexcode); //gen tiles then return them\n    });\n  };\n  /*\n  Display the initial emoji options.\n  This is occuring twice according to the API terminal\n  */\n\n\n  window.addEventListener('DOMContentLoaded', event => {\n    /*\n      Fill the emoji history with placeholders\n    */\n    updateEmojiHistory(openmoji.openmojis[3073].hexcode, lenHistory);\n    /*\n      TODO: Replace this with a call to the getrandoms function\n    */\n\n    var obj;\n    fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => iniTileObj = newTileObject([obj, []])).then(() => setEmojiTiles(iniTileObj));\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TiledHexagons, {\n      tileSideLengths: 60,\n      tileGap: 4,\n      tileBorderRadii: 9,\n      maxHorizontal: maxHorizontal,\n      tileTextStyles: {\n        fontFamily: 'Source Sans Pro',\n        fontSize: '68px'\n      },\n      tiles: emojiTiles,\n      onLoad: () => handleClick()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Hexgrid, \"+3VtAv/BIw3CeMu2hnKoMc1i9do=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["TiledHexagons","useState","useEffect","React","Component","openmoji","require","fs","numEmojis","maxHorizontal","maxVertical","Math","ceil","center","round","lenHistory","lenRandom","defaultEmojis","index","push","openmojis","hexcode","cat1Index","cat2Index","Hexgrid","emojiHistory","setEmojiHistory","iniTileObj","newTileObject","emojiTiles","setEmojiTiles","getTileColour","tileIndex","colour","getTileImage","image","Array","isArray","console","log","fetch","then","res","json","data","url","_emojis","selectedHexcode","hexcodes","blendedHexcodes","imageURLs","length","undefined","forEach","indexOf","i","tileObj","map","img","key","onClick","e","handleClick","fill","styles","normal","hover","active","getRandomHexcodes","Promise","resolve","reject","obj","toString","JSON","parse","getRandomBlendHexcodes","updateEmojiHistory","num","newEmojis","shift","id","all","values","newTileObj","tilePromise","value","window","addEventListener","event","fontFamily","fontSize"],"mappings":"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","sourcesContent":["import { TiledHexagons } from 'tiled-hexagons'\nimport { useState, useEffect } from 'react'\nimport React, { Component } from 'react';\n\nconst openmoji = require('openmoji');\nconst fs = require('fs');\n\nconst numEmojis = 259;\nconst maxHorizontal = 19;//111\nconst maxVertical = Math.ceil(numEmojis / maxHorizontal);\n\nconst center = Math.round((maxHorizontal * (maxVertical / 4)) + ((maxHorizontal - 1) * (maxVertical / 4))) - Math.round((maxHorizontal) / 2);//Math.ceil(numEmojis/2)-3;\nconst lenHistory = Math.ceil(maxHorizontal / 2);\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\n\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073].hexcode);\n}\n\nconst cat1Index = [0, 1, 2, 3, 4, 5,\n                  19, 20, 21, 22, 23, 24,\n                  37, 38, 39, 40, 41, 42, 43,\n                  56, 57, 58, 59, 60, 61, 62,\n                  74, 75, 76, 77, 78, 79, 80, 81,\n                  93, 94, 95, 96, 97, 98, 99, 100];\n\nconst cat2Index = [7, 8, 9, 10, 11,\n                  26, 27, 28, 29,\n                  45, 46, 47,\n                  64, 65,\n                  83];\n  \nconst Hexgrid = () => {\n  const [emojiHistory, setEmojiHistory] = useState([]);\n  var iniTileObj = newTileObject([defaultEmojis]);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj); //\n\n  function getTileColour(tileIndex) {\n    let colour = 'white';\n    if (tileIndex <= (center - 1) && tileIndex >= (center - lenHistory + 1)) {\n      colour = '#dbf7fd';//'#d4d4d4';\n    }\n    if (tileIndex === center) {\n      colour = '#a4eefc';\n    }\n    return colour;\n  }\n\n  function getTileImage(tileIndex, hexcode) {\n    let image = `nothing`;\n\n    if (Array.isArray(hexcode)) { //Then hexcode is a blend\n      console.log('in image function, not fetched yet');\n      //image = `http://localhost:9000/blends/1F9431F0CF.png`;\n      fetch(\"http://localhost:9000/blendemojis/\" + hexcode[0] + \"/\" + \"1F0CF\")\n      .then(res => res.json())\n      .then(data => {image = \"http://localhost:9000/public/blends/\" + data.url})\n      .then(() => {return image})\n      //return 'http://localhost:9000/blends/1F9431F0CF.png';\n      return image\n    }\n    else { //it is a single emoji character\n      image = `/images/${hexcode}.svg`;\n      return image;\n    }\n  }\n\n  function newTileObject(_emojis, selectedHexcode) {\n    let hexcodes = _emojis[0];\n    let blendedHexcodes = _emojis[1];\n    let imageURLs = new Array(hexcodes.length); \n    /*\n    Substitute blendedHexcodes into hexcodes where appropriate\n    */\n    if(blendedHexcodes !== undefined && blendedHexcodes !== null && selectedHexcode !== undefined){\n      cat1Index.forEach(index => {\n        hexcodes[index] = blendedHexcodes[cat1Index.indexOf(index)];\n        //console.log(hexcodes[index]);\n      });\n    }\n\n    /*\n    Insert emoji history into active tiles\n    */\n    if (emojiHistory.length >= 1) {\n      for (let i = 0; i < emojiHistory.length; i++) {\n        if (center - i > 49) {\n          hexcodes[center - i] = emojiHistory[emojiHistory.length - 1 - i];\n        }\n      }\n    }\n\n    /*\n    TODO: Get image URLs\n    */\n    for (let i = 0; i < hexcodes.length; i++) {\n      let image = `nothing`;\n\n      if (Array.isArray(hexcodes[i])) { //Then hexcode is a blend\n        console.log('in image function, not fetched yet');\n        //image = `http://localhost:9000/blends/1F9431F0CF.png`;\n        fetch(\"http://localhost:9000/blendemojis/\" + hexcode[0] + \"/\" + \"1F0CF\")\n        .then(res => res.json())\n        .then(data => {image = \"http://localhost:9000/public/blends/\" + data.url})\n        .then(() => {\n          imageURLs[i] = image; //getTileImage(i, hexcodes[i]);\n        })\n        //return 'http://localhost:9000/blends/1F9431F0CF.png';\n      }\n      else { //it is a single emoji character\n        image = `/images/${hexcode}.svg`;\n        imageURLs[i] = image; //getTileImage(i, hexcodes[i]);\n      }\n    }\n      /*\n      Map hexcodes to tiles \n      */\n      const tileObj = hexcodes.map((hexcode, index) => {\n        /*  \n        Assign tile colour based on position in grid\n        */\n        let colour = getTileColour(index);\n\n        /*  \n        Assign tile image based on position in grid\n        */\n        let image = `/images/1F4EF.svg`;\n        image = imageURLs[index];//getTileImage(index, hexcode); //get image then return tile\n\n        //console.log(image);\n        return {\n          img: image,\n          key: index,\n          onClick: (e) => handleClick(index, hexcode, e),\n          fill: '',\n          styles: {\n            normal: {\n              fill: colour\n            },\n            hover: {\n              fill: '#6cc7da'\n            },\n            active: {\n              fill: '#779df1'\n            }\n          }\n        }\n      })\n\n      return tileObj;\n}\n\n  /*  \n  Get random emojis for every tile\n  */\n  function getRandomHexcodes() {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString())\n        .then(res => res.json())\n        .then(data => obj = JSON.parse(data))\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  /*  \n  Get random blends\n  */\n  function getRandomBlendHexcodes(hexcode) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"http://localhost:9000/randomblendhexcodes/\" + hexcode + \"?limit=\" + cat1Index.length.toString())\n        .then(res => res.json())\n        .then(data => obj = JSON.parse(data))\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  /*\n  Update emoji history and remove the oldest entry if length exceeds max.\n  */\n  function updateEmojiHistory(hexcode, num) {\n    let newEmojis = emojiHistory;\n    for (let i = 0; i < num; i++) {\n      newEmojis.push(hexcode);   \n      if (newEmojis.length > lenHistory) {\n        newEmojis.shift();\n      }   \n    }\n    setEmojiHistory(newEmojis);\n  }\n\n  const handleClick = (id, hexcode, e) => {\n    //TODO: Remove this before final build:\n    console.log(hexcode + ' was clicked. ID is ' + id);\n\n    /*\n    TODO: Replace all emoji with 'loading' emoji with no click handler\n    */\n\n    /*\n    Add clicked emoji to emoji history\n    */\n    updateEmojiHistory(hexcode, 1);\n\n    /*\n    Get hexcodes for new tiles, then assign them to tiles.\n    */\n    Promise.all([getRandomHexcodes(), getRandomBlendHexcodes(hexcode)]).then((values) => {\n      console.log(values);\n      var newTileObj;\n      const tilePromise = new Promise((resolve, reject) => {\n        resolve(newTileObject(values, hexcode));\n      });\n      tilePromise\n      .then(value => {newTileObj = value; setEmojiTiles(newTileObj);});\n\n      //newTileObj = newTileObject(values, hexcode); //gen tiles then return them\n      \n    });\n  }\n\n  /*\n  Display the initial emoji options.\n  This is occuring twice according to the API terminal\n  */\n  window.addEventListener('DOMContentLoaded', (event) => {\n    /*\n      Fill the emoji history with placeholders\n    */\n    updateEmojiHistory(openmoji.openmojis[3073].hexcode, lenHistory);\n\n    /*\n      TODO: Replace this with a call to the getrandoms function\n    */\n    var obj;\n    fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString())\n      .then(res => res.json())\n      .then(data => obj = JSON.parse(data))\n      .then(() => iniTileObj = newTileObject([obj, []]))\n      .then(() => setEmojiTiles(iniTileObj))\n  });\n\n  return (\n    <>\n      <TiledHexagons\n        tileSideLengths={60}\n        tileGap={4}\n        tileBorderRadii={9}\n        maxHorizontal={maxHorizontal}\n        tileTextStyles={{\n          fontFamily: 'Source Sans Pro',\n          fontSize: '68px',\n        }}\n        tiles={emojiTiles}\n        onLoad={() => handleClick()}\n      />\n    </>\n  );\n}\n\nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}