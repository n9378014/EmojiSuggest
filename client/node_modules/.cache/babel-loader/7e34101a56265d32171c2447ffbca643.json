{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { TiledHexagons } from 'tiled-hexagons';\nimport { useState, useEffect } from 'react';\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nconst fs = require('fs');\n\nconst numEmojis = 259;\nconst maxHorizontal = 19; //111\n\nconst maxVertical = Math.ceil(numEmojis / maxHorizontal);\nconst center = Math.round(maxHorizontal * (maxVertical / 4) + (maxHorizontal - 1) * (maxVertical / 4)) - Math.round(maxHorizontal / 2); //Math.ceil(numEmojis/2)-3;\n\nconst lenHistory = Math.ceil(maxHorizontal / 2) - 1;\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\n\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073]);\n} //3073\n\n\nvar count = 1;\n\nconst Hexgrid = () => {\n  _s();\n\n  const [selectedEmojis, setSelectedEmojis] = useState([]);\n  var iniTileObj = newTileObject(defaultEmojis);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj);\n\n  function newTileObject(_emojis, blends, demo) {\n    let emojis = _emojis; //For testing, sets one hex to blend\n\n    if (blends != null && blends.length > 1) {\n      emojis[57] = blends[0];\n    }\n\n    if (selectedEmojis.length >= 1) {\n      for (let i = 0; i < selectedEmojis.length; i++) {\n        if (center - i > 49) {\n          emojis[center - i] = selectedEmojis[selectedEmojis.length - 1 - i];\n        }\n      }\n    }\n\n    const tileObj = emojis.map((emoji, index) => {\n      let colour = 'white'; //emojiFills[index].toString();\n      //console.log(selectedEmojis.length);\n\n      if (index <= center - 1 && index >= center - lenHistory) {\n        colour = '#dbf7fd'; //'#d4d4d4';\n      }\n\n      if (index === center) {\n        //TODO: No magic numbers\n        colour = '#a4eefc';\n      }\n\n      let image = `/images/${emoji.hexcode}.svg`;\n      let img2 = new Image();\n\n      if (demo != undefined) {\n        console.log(demo);\n        img2.src = demo;\n        image = demo;\n      } else {\n        console.log(\"Demo is null\");\n      }\n\n      return {\n        //img: `/images/${emoji.hexcode}.svg`, \n        img: image,\n        key: index,\n        onClick: e => handleClick(index, emoji, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      };\n    });\n    return tileObj;\n  }\n\n  function download(emoji) {}\n\n  const handleClick = (id, emoji, e) => {\n    //console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n    //Update emoji history:\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis);\n    var blendObj;\n    let demoBlends = []; // fetch(\"http://localhost:9000/emojiblends/\" + emoji.hexcode)\n    // .then(res => res.json())\n    // .then(data => blendObj = data)\n    // .then(() => demoBlends = blendObj.relatedEmoji)\n\n    var testimg;\n    var url = \"http://localhost:9000/blendemojis/\" + emoji.hexcode + \"/\" + \"1F0CF\";\n    fetch(url) //                         vvvv\n    .then(response => response.blob()).then(imageBlob => {\n      // Then create a local URL for that image and print it \n      const imageObjectURL = URL.createObjectURL(imageBlob); //console.log(imageObjectURL);\n\n      testimg = imageObjectURL;\n    });\n\n    if (testimg === undefined) {\n      console.log('testimg is undefined');\n    } else {\n      console.log(testimg);\n    }\n\n    var obj;\n    var newTileObj;\n    fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => newTileObj = newTileObject(obj, demoBlends, testimg)).then(() => setEmojiTiles(newTileObj));\n  };\n\n  function setupGrid() {\n    var obj; // var iniTileObj = newTileObject(defaultEmojis);\n\n    fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => iniTileObj = newTileObject(obj)).then(() => setEmojiTiles(iniTileObj));\n  }\n\n  window.addEventListener('DOMContentLoaded', event => {\n    setupGrid();\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TiledHexagons, {\n      tileSideLengths: 60,\n      tileGap: 4,\n      tileBorderRadii: 9,\n      maxHorizontal: maxHorizontal,\n      tileTextStyles: {\n        fontFamily: 'Source Sans Pro',\n        fontSize: '68px'\n      },\n      tiles: emojiTiles,\n      onLoad: () => handleClick()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Hexgrid, \"UmqgXtnRhHxUOsrV1qZ5MYNowxc=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["TiledHexagons","useState","useEffect","React","Component","openmoji","require","fs","numEmojis","maxHorizontal","maxVertical","Math","ceil","center","round","lenHistory","lenRandom","defaultEmojis","index","push","openmojis","count","Hexgrid","selectedEmojis","setSelectedEmojis","iniTileObj","newTileObject","emojiTiles","setEmojiTiles","_emojis","blends","demo","emojis","length","i","tileObj","map","emoji","colour","image","hexcode","img2","Image","undefined","console","log","src","img","key","onClick","e","handleClick","fill","styles","normal","hover","active","download","id","newEmojis","blendObj","demoBlends","testimg","url","fetch","then","response","blob","imageBlob","imageObjectURL","URL","createObjectURL","obj","newTileObj","toString","res","json","data","JSON","parse","setupGrid","window","addEventListener","event","fontFamily","fontSize"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,gBAA9B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AAEA,MAAME,SAAS,GAAG,GAAlB;AACA,MAAMC,aAAa,GAAG,EAAtB,C,CAAyB;;AACzB,MAAMC,WAAW,GAAGC,IAAI,CAACC,IAAL,CAAUJ,SAAS,GAACC,aAApB,CAApB;AAEA,MAAMI,MAAM,GAAGF,IAAI,CAACG,KAAL,CAAYL,aAAa,IAAIC,WAAW,GAAC,CAAhB,CAAd,GAAqC,CAACD,aAAa,GAAC,CAAf,KAAqBC,WAAW,GAAC,CAAjC,CAAhD,IAAwFC,IAAI,CAACG,KAAL,CAAYL,aAAD,GAAgB,CAA3B,CAAvG,C,CAAqI;;AACrI,MAAMM,UAAU,GAAGJ,IAAI,CAACC,IAAL,CAAUH,aAAa,GAAC,CAAxB,IAA2B,CAA9C;AACA,MAAMO,SAAS,GAAGD,UAAlB;AACA,MAAME,aAAa,GAAG,EAAtB;;AACA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGV,SAA5B,EAAuCU,KAAK,EAA5C,EAAgD;AAC9CD,EAAAA,aAAa,CAACE,IAAd,CAAmBd,QAAQ,CAACe,SAAT,CAAmB,IAAnB,CAAnB;AACD,C,CAED;;;AACA,IAAIC,KAAK,GAAG,CAAZ;;AACA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCvB,QAAQ,CAAC,EAAD,CAApD;AACA,MAAIwB,UAAU,GAAGC,aAAa,CAACT,aAAD,CAA9B;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8B3B,QAAQ,CAACwB,UAAD,CAA5C;;AAEA,WAASC,aAAT,CAAuBG,OAAvB,EAAgCC,MAAhC,EAAwCC,IAAxC,EAA6C;AAC3C,QAAIC,MAAM,GAAGH,OAAb,CAD2C,CAG3C;;AACA,QAAGC,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAACG,MAAP,GAAgB,CAArC,EAAuC;AACrCD,MAAAA,MAAM,CAAC,EAAD,CAAN,GAAaF,MAAM,CAAC,CAAD,CAAnB;AACD;;AAED,QAAIP,cAAc,CAACU,MAAf,IAAyB,CAA7B,EAAgC;AAC9B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,cAAc,CAACU,MAAnC,EAA2CC,CAAC,EAA5C,EAAgD;AAC9C,YAAGrB,MAAM,GAACqB,CAAP,GAAW,EAAd,EAAiB;AACfF,UAAAA,MAAM,CAACnB,MAAM,GAACqB,CAAR,CAAN,GAAmBX,cAAc,CAACA,cAAc,CAACU,MAAf,GAAsB,CAAtB,GAAwBC,CAAzB,CAAjC;AACD;AACF;AACF;;AACD,UAAMC,OAAO,GAAGH,MAAM,CAACI,GAAP,CAAW,CAACC,KAAD,EAAQnB,KAAR,KAAkB;AAC3C,UAAIoB,MAAM,GAAG,OAAb,CAD2C,CACtB;AACrB;;AACA,UAAGpB,KAAK,IAAKL,MAAM,GAAC,CAAjB,IAAuBK,KAAK,IAAKL,MAAM,GAACE,UAA3C,EAAuD;AACrDuB,QAAAA,MAAM,GAAG,SAAT,CADqD,CAClC;AACpB;;AACD,UAAGpB,KAAK,KAAKL,MAAb,EAAoB;AAAE;AACpByB,QAAAA,MAAM,GAAG,SAAT;AACD;;AACC,UAAIC,KAAK,GAAK,WAAUF,KAAK,CAACG,OAAQ,MAAtC;AACA,UAAIC,IAAI,GAAG,IAAIC,KAAJ,EAAX;;AACA,UAAGX,IAAI,IAAIY,SAAX,EAAqB;AACnBC,QAAAA,OAAO,CAACC,GAAR,CAAYd,IAAZ;AACAU,QAAAA,IAAI,CAACK,GAAL,GAAWf,IAAX;AACAQ,QAAAA,KAAK,GAAIR,IAAT;AACD,OAJD,MAKI;AACFa,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD;;AAED,aAAO;AACL;AACAE,QAAAA,GAAG,EAAER,KAFA;AAGLS,QAAAA,GAAG,EAAE9B,KAHA;AAIL+B,QAAAA,OAAO,EAAGC,CAAD,IAAOC,WAAW,CAACjC,KAAD,EAAQmB,KAAR,EAAea,CAAf,CAJtB;AAKLE,QAAAA,IAAI,EAAE,EALD;AAMLC,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAE;AACJF,YAAAA,IAAI,EAAEd;AADF,WADF;AAINiB,UAAAA,KAAK,EAAE;AACLH,YAAAA,IAAI,EAAE;AADD,WAJD;AAONI,UAAAA,MAAM,EAAE;AACNJ,YAAAA,IAAI,EAAE;AADA;AAPF;AANH,OAAP;AAkBD,KAtCa,CAAhB;AAwCE,WAAOjB,OAAP;AACH;;AAED,WAASsB,QAAT,CAAkBpB,KAAlB,EAAyB,CACxB;;AAED,QAAMc,WAAW,GAAG,CAACO,EAAD,EAAKrB,KAAL,EAAYa,CAAZ,KAAkB;AACpC;AAEA;AACA,QAAIS,SAAS,GAAGpC,cAAhB;AACAoC,IAAAA,SAAS,CAACxC,IAAV,CAAekB,KAAf;AACAb,IAAAA,iBAAiB,CAACmC,SAAD,CAAjB;AAEA,QAAIC,QAAJ;AACA,QAAIC,UAAU,GAAG,EAAjB,CAToC,CAUpC;AACA;AACA;AACA;;AAGA,QAAIC,OAAJ;AACA,QAAIC,GAAG,GAAG,uCAAuC1B,KAAK,CAACG,OAA7C,GAAuD,GAAvD,GAA6D,OAAvE;AACAwB,IAAAA,KAAK,CAACD,GAAD,CAAL,CACE;AADF,KAEGE,IAFH,CAEQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAFpB,EAGGF,IAHH,CAGQG,SAAS,IAAI;AACjB;AACA,YAAMC,cAAc,GAAGC,GAAG,CAACC,eAAJ,CAAoBH,SAApB,CAAvB,CAFiB,CAGjB;;AACAN,MAAAA,OAAO,GAAGO,cAAV;AACD,KARH;;AAUA,QAAGP,OAAO,KAAKnB,SAAf,EAAyB;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,KAFD,MAGI;AACFD,MAAAA,OAAO,CAACC,GAAR,CAAYiB,OAAZ;AACD;;AAED,QAAIU,GAAJ;AACA,QAAIC,UAAJ;AACAT,IAAAA,KAAK,CAAC,8CAA8CxD,SAAS,CAACkE,QAAV,EAA/C,CAAL,CACCT,IADD,CACMU,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECX,IAFD,CAEMY,IAAI,IAAIL,GAAG,GAAGM,IAAI,CAACC,KAAL,CAAWF,IAAX,CAFpB,EAGCZ,IAHD,CAGM,MAAMQ,UAAU,GAAG/C,aAAa,CAAC8C,GAAD,EAAMX,UAAN,EAAkBC,OAAlB,CAHtC,EAICG,IAJD,CAIM,MAAMrC,aAAa,CAAC6C,UAAD,CAJzB;AAKD,GA1CD;;AA4CA,WAASO,SAAT,GAAoB;AAClB,QAAIR,GAAJ,CADkB,CAElB;;AAEAR,IAAAA,KAAK,CAAC,8CAA8CxD,SAAS,CAACkE,QAAV,EAA/C,CAAL,CACGT,IADH,CACQU,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGX,IAFH,CAEQY,IAAI,IAAIL,GAAG,GAAGM,IAAI,CAACC,KAAL,CAAWF,IAAX,CAFtB,EAGGZ,IAHH,CAGQ,MAAMxC,UAAU,GAAGC,aAAa,CAAC8C,GAAD,CAHxC,EAIGP,IAJH,CAIQ,MAAMrC,aAAa,CAACH,UAAD,CAJ3B;AAKD;;AAEDwD,EAAAA,MAAM,CAACC,gBAAP,CAAwB,kBAAxB,EAA6CC,KAAD,IAAW;AACrDH,IAAAA,SAAS;AACZ,GAFC;AAIE,sBACI;AAAA,2BACI,QAAC,aAAD;AACA,MAAA,eAAe,EAAE,EADjB;AAEA,MAAA,OAAO,EAAE,CAFT;AAGA,MAAA,eAAe,EAAE,CAHjB;AAIA,MAAA,aAAa,EAAEvE,aAJf;AAKA,MAAA,cAAc,EAAE;AAChB2E,QAAAA,UAAU,EAAE,iBADI;AAEhBC,QAAAA,QAAQ,EAAE;AAFM,OALhB;AASA,MAAA,KAAK,EAAE1D,UATP;AAUA,MAAA,MAAM,EAAE,MAAMwB,WAAW;AAVzB;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAgBH,CA7ID;;GAAM7B,O;;KAAAA,O;AA+IN,eAAeA,OAAf","sourcesContent":["import { TiledHexagons } from 'tiled-hexagons'\nimport { useState, useEffect } from 'react'\nimport React, { Component } from 'react';\n\nconst openmoji = require('openmoji');\nconst fs = require('fs');\n\nconst numEmojis = 259;\nconst maxHorizontal = 19;//111\nconst maxVertical = Math.ceil(numEmojis/maxHorizontal);\n\nconst center = Math.round((maxHorizontal * (maxVertical/4)) + ((maxHorizontal-1) * (maxVertical/4))) - Math.round((maxHorizontal)/2);//Math.ceil(numEmojis/2)-3;\nconst lenHistory = Math.ceil(maxHorizontal/2)-1;\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073]);\n}\n\n//3073\nvar count = 1;\nconst Hexgrid = () => {\n  const [selectedEmojis, setSelectedEmojis] = useState([]);\n  var iniTileObj = newTileObject(defaultEmojis);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj)\n\n  function newTileObject(_emojis, blends, demo){\n    let emojis = _emojis;\n\n    //For testing, sets one hex to blend\n    if(blends != null && blends.length > 1){\n      emojis[57] = blends[0];\n    }\n    \n    if (selectedEmojis.length >= 1) {\n      for (let i = 0; i < selectedEmojis.length; i++) {\n        if(center-i > 49){\n          emojis[center-i] = selectedEmojis[selectedEmojis.length-1-i];\n        }\n      }\n    }\n    const tileObj = emojis.map((emoji, index) => {\n      let colour = 'white';//emojiFills[index].toString();\n      //console.log(selectedEmojis.length);\n      if(index <= (center-1) && index >= (center-lenHistory)){\n        colour = '#dbf7fd';//'#d4d4d4';\n      }\n      if(index === center){ //TODO: No magic numbers\n        colour = '#a4eefc';\n      }\n        let image =  `/images/${emoji.hexcode}.svg`;\n        let img2 = new Image();\n        if(demo != undefined){\n          console.log(demo);\n          img2.src = demo;\n          image =  demo;\n        }\n        else{\n          console.log(\"Demo is null\");\n        }\n\n        return { \n          //img: `/images/${emoji.hexcode}.svg`, \n          img: image,\n          key: index,\n          onClick: (e) => handleClick(index, emoji, e),\n          fill: '',\n          styles: {\n            normal: {\n                fill: colour\n            },\n            hover: {\n              fill: '#6cc7da'\n            },\n            active: {\n              fill: '#779df1'\n            }\n        }\n        }\n      })\n\n      return tileObj;\n  }\n\n  function download(emoji) {\n  }\n\n  const handleClick = (id, emoji, e) => {\n    //console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n\n    //Update emoji history:\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis);\n    \n    var blendObj;\n    let demoBlends = [];\n    // fetch(\"http://localhost:9000/emojiblends/\" + emoji.hexcode)\n    // .then(res => res.json())\n    // .then(data => blendObj = data)\n    // .then(() => demoBlends = blendObj.relatedEmoji)\n\n\n    var testimg;\n    var url = \"http://localhost:9000/blendemojis/\" + emoji.hexcode + \"/\" + \"1F0CF\";\n    fetch(url)\n      //                         vvvv\n      .then(response => response.blob())\n      .then(imageBlob => {\n        // Then create a local URL for that image and print it \n        const imageObjectURL = URL.createObjectURL(imageBlob);\n        //console.log(imageObjectURL);\n        testimg = imageObjectURL;\n      });\n\n    if(testimg === undefined){\n      console.log('testimg is undefined');\n    }\n    else{\n      console.log(testimg);\n    }\n\n    var obj;\n    var newTileObj;\n    fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString())\n    .then(res => res.json())\n    .then(data => obj = JSON.parse(data))\n    .then(() => newTileObj = newTileObject(obj, demoBlends, testimg))\n    .then(() => setEmojiTiles(newTileObj))\n  }\n\n  function setupGrid(){\n    var obj;\n    // var iniTileObj = newTileObject(defaultEmojis);\n      \n    fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString())\n      .then(res => res.json())\n      .then(data => obj = JSON.parse(data))\n      .then(() => iniTileObj = newTileObject(obj))\n      .then(() => setEmojiTiles(iniTileObj))\n  }\n\n  window.addEventListener('DOMContentLoaded', (event) => {\n    setupGrid();\n});\n\n    return ( \n        <>\n            <TiledHexagons\n            tileSideLengths={60}\n            tileGap={4}\n            tileBorderRadii={9}\n            maxHorizontal={maxHorizontal}\n            tileTextStyles={{\n            fontFamily: 'Source Sans Pro',\n            fontSize: '68px',\n            }}\n            tiles={emojiTiles}\n            onLoad={() => handleClick()}\n            />\n    </>\n    );\n}\n \nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}