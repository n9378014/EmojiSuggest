{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { TiledHexagons } from 'tiled-hexagons';\nimport { useState, useEffect } from 'react';\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nconst fs = require('fs');\n\nconst numEmojis = 259;\nconst maxHorizontal = 19; //111\n\nconst maxVertical = Math.ceil(numEmojis / maxHorizontal);\nconst center = Math.round(maxHorizontal * (maxVertical / 4) + (maxHorizontal - 1) * (maxVertical / 4)) - Math.round(maxHorizontal / 2); //Math.ceil(numEmojis/2)-3;\n\nconst lenHistory = Math.ceil(maxHorizontal / 2) - 1;\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\n\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073]);\n}\n\nconst randomBlendIndex = [93, 94, 95, 96, 97, 98, 99, 100];\n\nconst Hexgrid = () => {\n  _s();\n\n  const [selectedEmojis, setSelectedEmojis] = useState([]);\n  var iniTileObj = newTileObject(defaultEmojis);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj);\n\n  function getTileColour(tileIndex) {\n    let colour = 'white';\n\n    if (tileIndex <= center - 1 && tileIndex >= center - lenHistory) {\n      colour = '#dbf7fd'; //'#d4d4d4';\n    }\n\n    if (tileIndex === center) {\n      colour = '#a4eefc';\n    }\n\n    return colour;\n  }\n\n  function getTileImage(tileIndex) {\n    let colour = 'white';\n\n    if (tileIndex <= center - 1 && tileIndex >= center - lenHistory) {\n      colour = '#dbf7fd'; //'#d4d4d4';\n    }\n\n    if (tileIndex === center) {\n      colour = '#a4eefc';\n    }\n\n    return colour;\n  }\n\n  function newTileObject(_emojis, blends, demo) {\n    let emojis = _emojis; //For testing, sets one hex to blend\n\n    if (blends != null && blends.length > 1) {\n      emojis[57] = blends[0];\n    }\n\n    if (selectedEmojis.length >= 1) {\n      for (let i = 0; i < selectedEmojis.length; i++) {\n        if (center - i > 49) {\n          emojis[center - i] = selectedEmojis[selectedEmojis.length - 1 - i];\n        }\n      }\n    }\n\n    const tileObj = emojis.map((emoji, index) => {\n      /*  \n      Assign tile colour based on position in grid\n      */\n      let colour = getTileColour(index);\n      /*  \n      Assign tile image based on position in grid\n      */\n\n      let image = `/images/${emoji.hexcode}.svg`; // fetch(\"http://localhost:9000/blendemojis/\" + emoji.hexcode + \"/\" + \"1F0CF\")\n      // .then(res => res.json())\n      // .then(data => console.log(data))\n      // if (demo != undefined && demo != null) {\n      //   image = demo;\n      //   console.log(demo);\n      // }\n\n      return {\n        img: image,\n        key: index,\n        onClick: e => handleClick(index, emoji, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      };\n    });\n    return tileObj;\n  }\n\n  const handleClick = (id, emoji, e) => {\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n    /*\n    Update emoji history:\n    */\n\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis);\n    var blendObj;\n    let demoBlends = []; // fetch(\"http://localhost:9000/emojiblends/\" + emoji.hexcode)\n    // .then(res => res.json())\n    // .then(data => blendObj = data)\n    // .then(() => demoBlends = blendObj.relatedEmoji)\n    //combineEmoji(hexcode1, hexcode2);\n    //var testimg;\n    //var fetchurl = \"http://localhost:9000/blendemojis/demo/\" + emoji.hexcode + \"/\" + \"1F0CF\";\n    // fetch(fetchurl, { headers: { 'Content-Type': 'blob' } })\n    //   .then(response => response.body)\n    //   .then(body => {\n    //     const reader = body.getReader();\n    //     return new ReadableStream({\n    //       start(controller) {\n    //         return pump();\n    //         function pump() {\n    //           return reader.read().then(({ done, value }) => {\n    //             // When no more data needs to be consumed, close the stream\n    //             if (done) {\n    //               controller.close();\n    //               return;\n    //             }\n    //             // Enqueue the next data chunk into our target stream\n    //             controller.enqueue(value);\n    //             return pump();\n    //           });\n    //         }\n    //       }\n    //     })\n    //   })\n    //   .then(stream => new Response(stream))\n    //   .then(response => response.blob())\n    //   .then(blob => URL.createObjectURL(blob))\n    //   .then(url => testimg = url)\n    //   .then(() => {\n    //     var obj;\n    //     var newTileObj;\n    //     fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString())\n    //       .then(res => res.json())\n    //       .then(data => obj = JSON.parse(data))\n    //       .then(() => newTileObj = newTileObject(obj, demoBlends, testimg))\n    //       .then(() => setEmojiTiles(newTileObj))\n    //   })\n    //   .catch(err => console.error(err));\n  };\n\n  function setupGrid() {\n    var obj;\n    fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => iniTileObj = newTileObject(obj)).then(() => setEmojiTiles(iniTileObj));\n  }\n\n  window.addEventListener('DOMContentLoaded', event => {\n    setupGrid();\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TiledHexagons, {\n      tileSideLengths: 60,\n      tileGap: 4,\n      tileBorderRadii: 9,\n      maxHorizontal: maxHorizontal,\n      tileTextStyles: {\n        fontFamily: 'Source Sans Pro',\n        fontSize: '68px'\n      },\n      tiles: emojiTiles,\n      onLoad: () => handleClick()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Hexgrid, \"UmqgXtnRhHxUOsrV1qZ5MYNowxc=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["TiledHexagons","useState","useEffect","React","Component","openmoji","require","fs","numEmojis","maxHorizontal","maxVertical","Math","ceil","center","round","lenHistory","lenRandom","defaultEmojis","index","push","openmojis","randomBlendIndex","Hexgrid","selectedEmojis","setSelectedEmojis","iniTileObj","newTileObject","emojiTiles","setEmojiTiles","getTileColour","tileIndex","colour","getTileImage","_emojis","blends","demo","emojis","length","i","tileObj","map","emoji","image","hexcode","img","key","onClick","e","handleClick","fill","styles","normal","hover","active","id","console","log","newEmojis","blendObj","demoBlends","setupGrid","obj","fetch","toString","then","res","json","data","JSON","parse","window","addEventListener","event","fontFamily","fontSize"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,gBAA9B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AAEA,MAAME,SAAS,GAAG,GAAlB;AACA,MAAMC,aAAa,GAAG,EAAtB,C,CAAyB;;AACzB,MAAMC,WAAW,GAAGC,IAAI,CAACC,IAAL,CAAUJ,SAAS,GAAGC,aAAtB,CAApB;AAEA,MAAMI,MAAM,GAAGF,IAAI,CAACG,KAAL,CAAYL,aAAa,IAAIC,WAAW,GAAG,CAAlB,CAAd,GAAuC,CAACD,aAAa,GAAG,CAAjB,KAAuBC,WAAW,GAAG,CAArC,CAAlD,IAA8FC,IAAI,CAACG,KAAL,CAAYL,aAAD,GAAkB,CAA7B,CAA7G,C,CAA6I;;AAC7I,MAAMM,UAAU,GAAGJ,IAAI,CAACC,IAAL,CAAUH,aAAa,GAAG,CAA1B,IAA+B,CAAlD;AACA,MAAMO,SAAS,GAAGD,UAAlB;AACA,MAAME,aAAa,GAAG,EAAtB;;AACA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGV,SAA5B,EAAuCU,KAAK,EAA5C,EAAgD;AAC9CD,EAAAA,aAAa,CAACE,IAAd,CAAmBd,QAAQ,CAACe,SAAT,CAAmB,IAAnB,CAAnB;AACD;;AAED,MAAMC,gBAAgB,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,GAA7B,CAAzB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCvB,QAAQ,CAAC,EAAD,CAApD;AACA,MAAIwB,UAAU,GAAGC,aAAa,CAACT,aAAD,CAA9B;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8B3B,QAAQ,CAACwB,UAAD,CAA5C;;AAEA,WAASI,aAAT,CAAuBC,SAAvB,EAAkC;AAChC,QAAIC,MAAM,GAAG,OAAb;;AACA,QAAID,SAAS,IAAKjB,MAAM,GAAG,CAAvB,IAA6BiB,SAAS,IAAKjB,MAAM,GAAGE,UAAxD,EAAqE;AACnEgB,MAAAA,MAAM,GAAG,SAAT,CADmE,CAChD;AACpB;;AACD,QAAID,SAAS,KAAKjB,MAAlB,EAA0B;AACxBkB,MAAAA,MAAM,GAAG,SAAT;AACD;;AACD,WAAOA,MAAP;AACD;;AAED,WAASC,YAAT,CAAsBF,SAAtB,EAAiC;AAC/B,QAAIC,MAAM,GAAG,OAAb;;AACA,QAAID,SAAS,IAAKjB,MAAM,GAAG,CAAvB,IAA6BiB,SAAS,IAAKjB,MAAM,GAAGE,UAAxD,EAAqE;AACnEgB,MAAAA,MAAM,GAAG,SAAT,CADmE,CAChD;AACpB;;AACD,QAAID,SAAS,KAAKjB,MAAlB,EAA0B;AACxBkB,MAAAA,MAAM,GAAG,SAAT;AACD;;AACD,WAAOA,MAAP;AACD;;AAED,WAASL,aAAT,CAAuBO,OAAvB,EAAgCC,MAAhC,EAAwCC,IAAxC,EAA8C;AAC5C,QAAIC,MAAM,GAAGH,OAAb,CAD4C,CAG5C;;AACA,QAAIC,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAACG,MAAP,GAAgB,CAAtC,EAAyC;AACvCD,MAAAA,MAAM,CAAC,EAAD,CAAN,GAAaF,MAAM,CAAC,CAAD,CAAnB;AACD;;AAED,QAAIX,cAAc,CAACc,MAAf,IAAyB,CAA7B,EAAgC;AAC9B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,cAAc,CAACc,MAAnC,EAA2CC,CAAC,EAA5C,EAAgD;AAC9C,YAAIzB,MAAM,GAAGyB,CAAT,GAAa,EAAjB,EAAqB;AACnBF,UAAAA,MAAM,CAACvB,MAAM,GAAGyB,CAAV,CAAN,GAAqBf,cAAc,CAACA,cAAc,CAACc,MAAf,GAAwB,CAAxB,GAA4BC,CAA7B,CAAnC;AACD;AACF;AACF;;AAED,UAAMC,OAAO,GAAGH,MAAM,CAACI,GAAP,CAAW,CAACC,KAAD,EAAQvB,KAAR,KAAkB;AAC3C;AACN;AACA;AACM,UAAIa,MAAM,GAAGF,aAAa,CAACX,KAAD,CAA1B;AAEA;AACN;AACA;;AACM,UAAIwB,KAAK,GAAI,WAAUD,KAAK,CAACE,OAAQ,MAArC,CAT2C,CAU3C;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,aAAO;AACLC,QAAAA,GAAG,EAAEF,KADA;AAELG,QAAAA,GAAG,EAAE3B,KAFA;AAGL4B,QAAAA,OAAO,EAAGC,CAAD,IAAOC,WAAW,CAAC9B,KAAD,EAAQuB,KAAR,EAAeM,CAAf,CAHtB;AAILE,QAAAA,IAAI,EAAE,EAJD;AAKLC,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAE;AACNF,YAAAA,IAAI,EAAElB;AADA,WADF;AAINqB,UAAAA,KAAK,EAAE;AACLH,YAAAA,IAAI,EAAE;AADD,WAJD;AAONI,UAAAA,MAAM,EAAE;AACNJ,YAAAA,IAAI,EAAE;AADA;AAPF;AALH,OAAP;AAiBD,KApCe,CAAhB;AAsCA,WAAOV,OAAP;AACD;;AAED,QAAMS,WAAW,GAAG,CAACM,EAAD,EAAKb,KAAL,EAAYM,CAAZ,KAAkB;AACpCQ,IAAAA,OAAO,CAACC,GAAR,CAAYf,KAAK,CAACE,OAAN,GAAgB,sBAAhB,GAAyCW,EAArD;AAEA;AACJ;AACA;;AACI,QAAIG,SAAS,GAAGlC,cAAhB;AACAkC,IAAAA,SAAS,CAACtC,IAAV,CAAesB,KAAf;AACAjB,IAAAA,iBAAiB,CAACiC,SAAD,CAAjB;AAEA,QAAIC,QAAJ;AACA,QAAIC,UAAU,GAAG,EAAjB,CAXoC,CAYpC;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GA3DD;;AA6DA,WAASC,SAAT,GAAqB;AACnB,QAAIC,GAAJ;AACAC,IAAAA,KAAK,CAAC,8CAA8CtD,SAAS,CAACuD,QAAV,EAA/C,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,IAAI,IAAIN,GAAG,GAAGO,IAAI,CAACC,KAAL,CAAWF,IAAX,CAFtB,EAGGH,IAHH,CAGQ,MAAMvC,UAAU,GAAGC,aAAa,CAACmC,GAAD,CAHxC,EAIGG,IAJH,CAIQ,MAAMpC,aAAa,CAACH,UAAD,CAJ3B;AAKD;;AAED6C,EAAAA,MAAM,CAACC,gBAAP,CAAwB,kBAAxB,EAA6CC,KAAD,IAAW;AACrDZ,IAAAA,SAAS;AACV,GAFD;AAIA,sBACE;AAAA,2BACE,QAAC,aAAD;AACE,MAAA,eAAe,EAAE,EADnB;AAEE,MAAA,OAAO,EAAE,CAFX;AAGE,MAAA,eAAe,EAAE,CAHnB;AAIE,MAAA,aAAa,EAAEnD,aAJjB;AAKE,MAAA,cAAc,EAAE;AACdgE,QAAAA,UAAU,EAAE,iBADE;AAEdC,QAAAA,QAAQ,EAAE;AAFI,OALlB;AASE,MAAA,KAAK,EAAE/C,UATT;AAUE,MAAA,MAAM,EAAE,MAAMqB,WAAW;AAV3B;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAgBD,CA9KD;;GAAM1B,O;;KAAAA,O;AAgLN,eAAeA,OAAf","sourcesContent":["import { TiledHexagons } from 'tiled-hexagons'\nimport { useState, useEffect } from 'react'\nimport React, { Component } from 'react';\n\nconst openmoji = require('openmoji');\nconst fs = require('fs');\n\nconst numEmojis = 259;\nconst maxHorizontal = 19;//111\nconst maxVertical = Math.ceil(numEmojis / maxHorizontal);\n\nconst center = Math.round((maxHorizontal * (maxVertical / 4)) + ((maxHorizontal - 1) * (maxVertical / 4))) - Math.round((maxHorizontal) / 2);//Math.ceil(numEmojis/2)-3;\nconst lenHistory = Math.ceil(maxHorizontal / 2) - 1;\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073]);\n}\n\nconst randomBlendIndex = [93, 94, 95, 96, 97, 98, 99, 100];\n\nconst Hexgrid = () => {\n  const [selectedEmojis, setSelectedEmojis] = useState([]);\n  var iniTileObj = newTileObject(defaultEmojis);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj)\n\n  function getTileColour(tileIndex) {\n    let colour = 'white';\n    if (tileIndex <= (center - 1) && tileIndex >= (center - lenHistory)) {\n      colour = '#dbf7fd';//'#d4d4d4';\n    }\n    if (tileIndex === center) { \n      colour = '#a4eefc';\n    }\n    return colour;\n  }\n\n  function getTileImage(tileIndex) {\n    let colour = 'white';\n    if (tileIndex <= (center - 1) && tileIndex >= (center - lenHistory)) {\n      colour = '#dbf7fd';//'#d4d4d4';\n    }\n    if (tileIndex === center) { \n      colour = '#a4eefc';\n    }\n    return colour;\n  }\n\n  function newTileObject(_emojis, blends, demo) {\n    let emojis = _emojis;\n\n    //For testing, sets one hex to blend\n    if (blends != null && blends.length > 1) {\n      emojis[57] = blends[0];\n    }\n\n    if (selectedEmojis.length >= 1) {\n      for (let i = 0; i < selectedEmojis.length; i++) {\n        if (center - i > 49) {\n          emojis[center - i] = selectedEmojis[selectedEmojis.length - 1 - i];\n        }\n      }\n    }\n\n    const tileObj = emojis.map((emoji, index) => {\n      /*  \n      Assign tile colour based on position in grid\n      */\n      let colour = getTileColour(index);\n\n      /*  \n      Assign tile image based on position in grid\n      */\n      let image = `/images/${emoji.hexcode}.svg`;\n      // fetch(\"http://localhost:9000/blendemojis/\" + emoji.hexcode + \"/\" + \"1F0CF\")\n      // .then(res => res.json())\n      // .then(data => console.log(data))\n\n      // if (demo != undefined && demo != null) {\n      //   image = demo;\n      //   console.log(demo);\n      // }\n\n      return {\n        img: image,\n        key: index,\n        onClick: (e) => handleClick(index, emoji, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      }\n    })\n\n    return tileObj;\n  }\n\n  const handleClick = (id, emoji, e) => {\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n\n    /*\n    Update emoji history:\n    */\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis);\n\n    var blendObj;\n    let demoBlends = [];\n    // fetch(\"http://localhost:9000/emojiblends/\" + emoji.hexcode)\n    // .then(res => res.json())\n    // .then(data => blendObj = data)\n    // .then(() => demoBlends = blendObj.relatedEmoji)\n    //combineEmoji(hexcode1, hexcode2);\n\n\n\n    //var testimg;\n    //var fetchurl = \"http://localhost:9000/blendemojis/demo/\" + emoji.hexcode + \"/\" + \"1F0CF\";\n    // fetch(fetchurl, { headers: { 'Content-Type': 'blob' } })\n    //   .then(response => response.body)\n    //   .then(body => {\n    //     const reader = body.getReader();\n\n    //     return new ReadableStream({\n    //       start(controller) {\n    //         return pump();\n    //         function pump() {\n    //           return reader.read().then(({ done, value }) => {\n    //             // When no more data needs to be consumed, close the stream\n    //             if (done) {\n    //               controller.close();\n    //               return;\n    //             }\n    //             // Enqueue the next data chunk into our target stream\n    //             controller.enqueue(value);\n    //             return pump();\n    //           });\n    //         }\n    //       }\n    //     })\n    //   })\n    //   .then(stream => new Response(stream))\n    //   .then(response => response.blob())\n    //   .then(blob => URL.createObjectURL(blob))\n    //   .then(url => testimg = url)\n    //   .then(() => {\n    //     var obj;\n    //     var newTileObj;\n    //     fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString())\n    //       .then(res => res.json())\n    //       .then(data => obj = JSON.parse(data))\n    //       .then(() => newTileObj = newTileObject(obj, demoBlends, testimg))\n    //       .then(() => setEmojiTiles(newTileObj))\n    //   })\n    //   .catch(err => console.error(err));\n  }\n\n  function setupGrid() {\n    var obj;\n    fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString())\n      .then(res => res.json())\n      .then(data => obj = JSON.parse(data))\n      .then(() => iniTileObj = newTileObject(obj))\n      .then(() => setEmojiTiles(iniTileObj))\n  }\n\n  window.addEventListener('DOMContentLoaded', (event) => {\n    setupGrid();\n  });\n\n  return (\n    <>\n      <TiledHexagons\n        tileSideLengths={60}\n        tileGap={4}\n        tileBorderRadii={9}\n        maxHorizontal={maxHorizontal}\n        tileTextStyles={{\n          fontFamily: 'Source Sans Pro',\n          fontSize: '68px',\n        }}\n        tiles={emojiTiles}\n        onLoad={() => handleClick()}\n      />\n    </>\n  );\n}\n\nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}