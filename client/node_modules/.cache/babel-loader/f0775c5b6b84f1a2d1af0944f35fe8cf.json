{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { Hexagon, TiledHexagons } from 'tiled-hexagons';\nimport { useState } from 'react';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nclass Grid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colour: 'purple'\n    };\n  }\n\n  selectHex() {\n    if (this.state.colour === 'red') {\n      this.setState({\n        colour: 'blue'\n      });\n    } else {\n      this.setState({\n        colour: 'red'\n      });\n    }\n  }\n\n  render() {\n    let {\n      colour\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Hexagon, {\n      sideLength: 80,\n      fill: colour.toString(),\n      onClick: this.selectHex.bind(this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst Hexgrid = () => {\n  _s();\n\n  var numEmojis = 113; //id 56 is the center\n\n  let numbers = [];\n  let emojis = [];\n  const [selectedEmojis, setSelectedEmojis] = useState([]);\n\n  while (selectedEmojis.length + numbers.length < numEmojis) {\n    var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n    if (numbers.indexOf(r) === -1) numbers.push(r);\n  }\n\n  for (let index = 0; index < numbers.length; index++) {\n    emojis.push(openmoji.openmojis[numbers[index]]);\n  }\n\n  let emojiFills = [];\n\n  for (let index = 0; index < emojis.length; index++) {\n    if (index === 56) {\n      emojiFills.push('blue');\n    } else {\n      emojiFills.push('white');\n    }\n  }\n\n  const handleClick = (id, emoji, e) => {\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis);\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n    console.log(selectedEmojis);\n\n    if (selectedEmojis.length >= 1) {\n      emojis[56] = selectedEmojis[selectedEmojis.length - 1];\n      setEmojiTiles(emojis);\n    }\n  };\n\n  const [emojiTiles, setEmojiTiles] = useState(emojis.map((emoji, index) => {\n    let colour = emojiFills[index].toString();\n    return {\n      img: `/images/${emoji.hexcode}.svg`,\n      key: index,\n      onClick: e => handleClick(index, emoji, e),\n      fill: '',\n      styles: {\n        normal: {\n          fill: colour\n        },\n        hover: {\n          fill: 'purple'\n        },\n        active: {\n          fill: 'red'\n        }\n      }\n    };\n  }));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TiledHexagons, {\n      tileSideLengths: 60,\n      tileGap: 4,\n      tileBorderRadii: 9,\n      maxHorizontal: 13,\n      tileTextStyles: {\n        fontFamily: 'Source Sans Pro',\n        fontSize: '68px'\n      },\n      tiles: emojiTiles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Hexgrid, \"pyk+H5AqGeV4iqBQAXHetcOnipI=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["Hexagon","TiledHexagons","useState","React","openmoji","require","Grid","Component","constructor","props","state","colour","selectHex","setState","render","toString","bind","Hexgrid","numEmojis","numbers","emojis","selectedEmojis","setSelectedEmojis","length","r","Math","floor","random","openmojis","indexOf","push","index","emojiFills","handleClick","id","emoji","e","newEmojis","console","log","hexcode","setEmojiTiles","emojiTiles","map","img","key","onClick","fill","styles","normal","hover","active","fontFamily","fontSize"],"mappings":"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","sourcesContent":["import { Hexagon, TiledHexagons } from 'tiled-hexagons'\nimport { useState } from 'react'\nimport React from 'react';\n\nconst openmoji = require('openmoji');\n\nclass Grid extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n          colour: 'purple'\n        }\n      }\n\n      selectHex() {\n          if (this.state.colour === 'red') {\n            this.setState({ colour: 'blue' })\n        } else {\n            this.setState({ colour: 'red' })\n        }\n      }\n    \n    render() {\n        let { colour } = this.state\n\n\n    \n        return (\n            <Hexagon\n              sideLength={80}\n              fill={colour.toString()}\n              onClick={this.selectHex.bind(this)}\n            />  )  }\n  }\n\n\nconst Hexgrid = () => {\n  var numEmojis = 113; //id 56 is the center\n\n  let numbers = [];\n  let emojis = [];\n\n  const [selectedEmojis, setSelectedEmojis] = useState([]);\n  while(selectedEmojis.length + numbers.length < numEmojis){\n    var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n    if(numbers.indexOf(r) === -1) numbers.push(r);\n}\n\nfor (let index = 0; index < numbers.length; index++) {\n    emojis.push(openmoji.openmojis[numbers[index]]);\n}    \n\nlet emojiFills = [];\nfor (let index = 0; index < emojis.length; index++) {\n  if (index === 56) {\n    emojiFills.push('blue');\n  } else {\n    emojiFills.push('white');\n  }\n}   \n\n  const handleClick = (id, emoji, e) => {\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis);\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n    console.log(selectedEmojis);\n    if (selectedEmojis.length >= 1) {\n      emojis[56] = selectedEmojis[selectedEmojis.length-1];\n      setEmojiTiles(emojis);\n    }\n  }\n    \n\n    \n    const [emojiTiles, setEmojiTiles] = useState(\n        emojis.map((emoji, index) => {\n          let colour = emojiFills[index].toString();\n            return { \n              img: `/images/${emoji.hexcode}.svg`, \n              key: index,\n              onClick: (e) => handleClick(index, emoji, e),\n              fill: '',\n              styles: {\n                normal: {\n                    fill: colour\n                },\n                hover: {\n                  fill: 'purple'\n                },\n                active: {\n                  fill: 'red'\n                }\n            }\n            }\n          })\n    )\n    \n    return ( \n        <>\n            <Grid /> \n            <TiledHexagons\n            tileSideLengths={60}\n            tileGap={4}\n            tileBorderRadii={9}\n            maxHorizontal={13}\n            tileTextStyles={{\n            fontFamily: 'Source Sans Pro',\n            fontSize: '68px',\n            }}\n            tiles={emojiTiles}\n            />\n    </>\n    );\n}\n \nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}