{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { TiledHexagons } from 'tiled-hexagons';\nimport { useState, useEffect } from 'react';\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nconst sharp = require('sharp');\n\nconst fs = require('fs');\n\nconst numEmojis = 259;\nconst maxHorizontal = 19; //111\n\nconst maxVertical = Math.ceil(numEmojis / maxHorizontal);\nconst center = Math.round(maxHorizontal * (maxVertical / 4) + (maxHorizontal - 1) * (maxVertical / 4)) - Math.round(maxHorizontal / 2); //Math.ceil(numEmojis/2)-3;\n\nconst lenHistory = Math.ceil(maxHorizontal / 2) - 1;\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\n\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073]);\n}\n\nfunction combineEmoji(hex1, hex2) {\n  sharp('./public/images/' + hex1 + '.png').resize({\n    fit: sharp.fit.contain,\n    height: 350\n  }).toBuffer({\n    resolveWithObject: true\n  }).then(({\n    data,\n    info\n  }) => {\n    sharp('./public/images/' + hex2 + '.png').resize(618, 618).composite([{\n      input: data,\n      gravity: 'southeast'\n    }]).toFile('./public/blends/' + hex1 + hex2 + '.png', function (err) {//console.log(\"Error: \", err)\n    }); //TODO: return image url\n  }).catch(err => {\n    console.log(\"Error: \", err);\n  });\n}\n\nvar count = 1;\n\nconst Hexgrid = () => {\n  _s();\n\n  const [selectedEmojis, setSelectedEmojis] = useState([]);\n  var iniTileObj = newTileObject(defaultEmojis);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj);\n\n  function newTileObject(_emojis, blends, demo) {\n    let emojis = _emojis; //For testing, sets one hex to blend\n\n    if (blends != null && blends.length > 1) {\n      emojis[57] = blends[0];\n    }\n\n    if (selectedEmojis.length >= 1) {\n      for (let i = 0; i < selectedEmojis.length; i++) {\n        if (center - i > 49) {\n          emojis[center - i] = selectedEmojis[selectedEmojis.length - 1 - i];\n        }\n      }\n    }\n\n    const tileObj = emojis.map((emoji, index) => {\n      let colour = 'white'; //emojiFills[index].toString();\n      //console.log(selectedEmojis.length);\n\n      if (index <= center - 1 && index >= center - lenHistory) {\n        colour = '#dbf7fd'; //'#d4d4d4';\n      }\n\n      if (index === center) {\n        //TODO: No magic numbers\n        colour = '#a4eefc';\n      }\n\n      let image = `/images/${emoji.hexcode}.svg`;\n      return {\n        //img: `/images/${emoji.hexcode}.svg`, \n        img: image,\n        key: index,\n        onClick: e => handleClick(index, emoji, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      };\n    });\n    return tileObj;\n  }\n\n  function download(emoji) {}\n\n  const handleClick = (id, emoji, e) => {\n    //console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n    //Update emoji history:\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis);\n    var blendObj;\n    let demoBlends = []; // fetch(\"http://localhost:9000/emojiblends/\" + emoji.hexcode)\n    // .then(res => res.json())\n    // .then(data => blendObj = data)\n    // .then(() => demoBlends = blendObj.relatedEmoji)\n    // var testimg;\n    // var url = \"http://localhost:9000/blendemojis/\" + emoji.hexcode + \"/\" + \"1F0CF\";\n    // fetch(url, {headers: {'Content-Type': 'image/png'}})\n    //   //                         vvvv\n    //   .then(response => {        console.log('response', response);\n    //   response.blob();})\n    //   .then(imageBlob => {\n    //     // Then create a local URL for that image and print it \n    //     const imageObjectURL = URL.createObjectURL(imageBlob);\n    //     console.log(imageBlob);\n    //     testimg = imageObjectURL;\n    //   });\n    // if(testimg === undefined){\n    //   console.log('testimg is undefined');\n    // }\n    // else{\n    //   console.log(testimg);\n    // }\n\n    var obj;\n    var newTileObj;\n    fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => newTileObj = newTileObject(obj, demoBlends)).then(() => setEmojiTiles(newTileObj));\n  };\n\n  function setupGrid() {\n    var obj; // var iniTileObj = newTileObject(defaultEmojis);\n\n    fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => iniTileObj = newTileObject(obj)).then(() => setEmojiTiles(iniTileObj));\n  }\n\n  window.addEventListener('DOMContentLoaded', event => {\n    setupGrid();\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TiledHexagons, {\n      tileSideLengths: 60,\n      tileGap: 4,\n      tileBorderRadii: 9,\n      maxHorizontal: maxHorizontal,\n      tileTextStyles: {\n        fontFamily: 'Source Sans Pro',\n        fontSize: '68px'\n      },\n      tiles: emojiTiles,\n      onLoad: () => handleClick()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Hexgrid, \"UmqgXtnRhHxUOsrV1qZ5MYNowxc=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["TiledHexagons","useState","useEffect","React","Component","openmoji","require","sharp","fs","numEmojis","maxHorizontal","maxVertical","Math","ceil","center","round","lenHistory","lenRandom","defaultEmojis","index","push","openmojis","combineEmoji","hex1","hex2","resize","fit","contain","height","toBuffer","resolveWithObject","then","data","info","composite","input","gravity","toFile","err","catch","console","log","count","Hexgrid","selectedEmojis","setSelectedEmojis","iniTileObj","newTileObject","emojiTiles","setEmojiTiles","_emojis","blends","demo","emojis","length","i","tileObj","map","emoji","colour","image","hexcode","img","key","onClick","e","handleClick","fill","styles","normal","hover","active","download","id","newEmojis","blendObj","demoBlends","obj","newTileObj","fetch","toString","res","json","JSON","parse","setupGrid","window","addEventListener","event","fontFamily","fontSize"],"mappings":"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","sourcesContent":["import { TiledHexagons } from 'tiled-hexagons'\nimport { useState, useEffect } from 'react'\nimport React, { Component } from 'react';\n\nconst openmoji = require('openmoji');\nconst sharp = require('sharp')\nconst fs = require('fs');\n\nconst numEmojis = 259;\nconst maxHorizontal = 19;//111\nconst maxVertical = Math.ceil(numEmojis / maxHorizontal);\n\nconst center = Math.round((maxHorizontal * (maxVertical / 4)) + ((maxHorizontal - 1) * (maxVertical / 4))) - Math.round((maxHorizontal) / 2);//Math.ceil(numEmojis/2)-3;\nconst lenHistory = Math.ceil(maxHorizontal / 2) - 1;\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073]);\n}\n\nfunction combineEmoji(hex1, hex2) {\n  sharp('./public/images/' + hex1 + '.png')\n    .resize({\n      fit: sharp.fit.contain,\n      height: 350\n    })\n    .toBuffer({ resolveWithObject: true })\n    .then(({ data, info }) => {\n      sharp('./public/images/' + hex2 + '.png')\n        .resize(618, 618)\n        .composite([{\n          input: data, gravity: 'southeast'\n        }])\n        .toFile('./public/blends/' + hex1 + hex2 + '.png', function (err) {\n          //console.log(\"Error: \", err)\n        });\n      //TODO: return image url\n    })\n    .catch(err => {\n      console.log(\"Error: \", err);\n    });\n}\n\nvar count = 1;\nconst Hexgrid = () => {\n  const [selectedEmojis, setSelectedEmojis] = useState([]);\n  var iniTileObj = newTileObject(defaultEmojis);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj)\n\n  function newTileObject(_emojis, blends, demo) {\n    let emojis = _emojis;\n\n    //For testing, sets one hex to blend\n    if (blends != null && blends.length > 1) {\n      emojis[57] = blends[0];\n    }\n\n    if (selectedEmojis.length >= 1) {\n      for (let i = 0; i < selectedEmojis.length; i++) {\n        if (center - i > 49) {\n          emojis[center - i] = selectedEmojis[selectedEmojis.length - 1 - i];\n        }\n      }\n    }\n    const tileObj = emojis.map((emoji, index) => {\n      let colour = 'white';//emojiFills[index].toString();\n      //console.log(selectedEmojis.length);\n      if (index <= (center - 1) && index >= (center - lenHistory)) {\n        colour = '#dbf7fd';//'#d4d4d4';\n      }\n      if (index === center) { //TODO: No magic numbers\n        colour = '#a4eefc';\n      }\n      let image = `/images/${emoji.hexcode}.svg`;\n\n      return {\n        //img: `/images/${emoji.hexcode}.svg`, \n        img: image,\n        key: index,\n        onClick: (e) => handleClick(index, emoji, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      }\n    })\n\n    return tileObj;\n  }\n\n  function download(emoji) {\n  }\n\n  const handleClick = (id, emoji, e) => {\n    //console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n\n    //Update emoji history:\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis);\n\n    var blendObj;\n    let demoBlends = [];\n    // fetch(\"http://localhost:9000/emojiblends/\" + emoji.hexcode)\n    // .then(res => res.json())\n    // .then(data => blendObj = data)\n    // .then(() => demoBlends = blendObj.relatedEmoji)\n\n\n    // var testimg;\n    // var url = \"http://localhost:9000/blendemojis/\" + emoji.hexcode + \"/\" + \"1F0CF\";\n\n    // fetch(url, {headers: {'Content-Type': 'image/png'}})\n    //   //                         vvvv\n    //   .then(response => {        console.log('response', response);\n    //   response.blob();})\n    //   .then(imageBlob => {\n    //     // Then create a local URL for that image and print it \n    //     const imageObjectURL = URL.createObjectURL(imageBlob);\n    //     console.log(imageBlob);\n    //     testimg = imageObjectURL;\n    //   });\n\n    // if(testimg === undefined){\n    //   console.log('testimg is undefined');\n    // }\n    // else{\n    //   console.log(testimg);\n    // }\n\n    var obj;\n    var newTileObj;\n    fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString())\n      .then(res => res.json())\n      .then(data => obj = JSON.parse(data))\n      .then(() => newTileObj = newTileObject(obj, demoBlends))\n      .then(() => setEmojiTiles(newTileObj))\n  }\n\n  function setupGrid() {\n    var obj;\n    // var iniTileObj = newTileObject(defaultEmojis);\n\n    fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString())\n      .then(res => res.json())\n      .then(data => obj = JSON.parse(data))\n      .then(() => iniTileObj = newTileObject(obj))\n      .then(() => setEmojiTiles(iniTileObj))\n  }\n\n  window.addEventListener('DOMContentLoaded', (event) => {\n    setupGrid();\n  });\n\n  return (\n    <>\n      <TiledHexagons\n        tileSideLengths={60}\n        tileGap={4}\n        tileBorderRadii={9}\n        maxHorizontal={maxHorizontal}\n        tileTextStyles={{\n          fontFamily: 'Source Sans Pro',\n          fontSize: '68px',\n        }}\n        tiles={emojiTiles}\n        onLoad={() => handleClick()}\n      />\n    </>\n  );\n}\n\nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}