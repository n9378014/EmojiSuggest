{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { Hexagon, TiledHexagons } from 'tiled-hexagons';\nimport { useState } from 'react';\nimport { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nconst Hexgrid = () => {\n  _s();\n\n  const selectedEmojis = [];\n  var numEmojis = 69; //69\n\n  const handleClick = (id, emoji, e) => {\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n    console.log(e.target);\n    console.log(e.target.fill); //selectedEmojis.push(emoji);\n  };\n\n  let numbers = [];\n\n  while (selectedEmojis.length + numbers.length < numEmojis) {\n    var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n    if (numbers.indexOf(r) === -1) numbers.push(r);\n  }\n\n  let emojis = [];\n\n  for (let index = 0; index < numbers.length; index++) {\n    emojis.push(openmoji.openmojis[numbers[index]]);\n  }\n\n  emojis = selectedEmojis.concat(emojis);\n  const [emojiTiles, setEmojiTiles] = useState(emojis.map((emoji, index) => {\n    return {\n      img: `/images/${emoji.hexcode}.svg`,\n      key: index,\n      onClick: e => handleClick(index, emoji, e),\n      normal: {\n        fill: 'red'\n      },\n      hover: {\n        fill: 'white'\n      }\n    };\n  })); //emojis[0].fill = \"red\";\n\n  return /*#__PURE__*/_jsxDEV(TiledHexagons, {\n    tileSideLengths: 60,\n    tileGap: 4,\n    tileBorderRadii: 9,\n    maxHorizontal: 12,\n    tileTextStyles: {\n      fontFamily: 'Source Sans Pro',\n      fontSize: '68px'\n    },\n    tiles: emojiTiles,\n    tileStyles: {\n      normal: {\n        fill: 'red'\n      },\n      hover: {\n        fill: 'blue'\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Hexgrid, \"Rh3iyddTqZGXwISFhfeb4BXYkmY=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["Hexagon","TiledHexagons","useState","Component","openmoji","require","Hexgrid","selectedEmojis","numEmojis","handleClick","id","emoji","e","console","log","hexcode","target","fill","numbers","length","r","Math","floor","random","openmojis","indexOf","push","emojis","index","concat","emojiTiles","setEmojiTiles","map","img","key","onClick","normal","hover","fontFamily","fontSize"],"mappings":";;;AAAA,SAASA,OAAT,EAAkBC,aAAlB,QAAuC,gBAAvC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,OAA1B;;;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAGlB,QAAMC,cAAc,GAAG,EAAvB;AACA,MAAIC,SAAS,GAAG,EAAhB,CAJkB,CAIE;;AAGpB,QAAMC,WAAW,GAAG,CAACC,EAAD,EAAKC,KAAL,EAAYC,CAAZ,KAAkB;AAClCC,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,OAAN,GAAgB,sBAAhB,GAAyCL,EAArD;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACI,MAAd;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACI,MAAF,CAASC,IAArB,EAHkC,CAIlC;AACH,GALD;;AAQA,MAAIC,OAAO,GAAG,EAAd;;AACA,SAAMX,cAAc,CAACY,MAAf,GAAwBD,OAAO,CAACC,MAAhC,GAAyCX,SAA/C,EAAyD;AACrD,QAAIY,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBnB,QAAQ,CAACoB,SAAT,CAAmBL,MAAnB,GAA4B,CAA7C,CAAX,CAAR;AACA,QAAGD,OAAO,CAACO,OAAR,CAAgBL,CAAhB,MAAuB,CAAC,CAA3B,EAA8BF,OAAO,CAACQ,IAAR,CAAaN,CAAb;AACjC;;AACD,MAAIO,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGV,OAAO,CAACC,MAApC,EAA4CS,KAAK,EAAjD,EAAqD;AACjDD,IAAAA,MAAM,CAACD,IAAP,CAAYtB,QAAQ,CAACoB,SAAT,CAAmBN,OAAO,CAACU,KAAD,CAA1B,CAAZ;AACH;;AAGDD,EAAAA,MAAM,GAAGpB,cAAc,CAACsB,MAAf,CAAsBF,MAAtB,CAAT;AACA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8B7B,QAAQ,CACxCyB,MAAM,CAACK,GAAP,CAAW,CAACrB,KAAD,EAAQiB,KAAR,KAAkB;AACzB,WAAO;AACLK,MAAAA,GAAG,EAAG,WAAUtB,KAAK,CAACI,OAAQ,MADzB;AAELmB,MAAAA,GAAG,EAAEN,KAFA;AAGLO,MAAAA,OAAO,EAAGvB,CAAD,IAAOH,WAAW,CAACmB,KAAD,EAAQjB,KAAR,EAAeC,CAAf,CAHtB;AAIHwB,MAAAA,MAAM,EAAE;AACJnB,QAAAA,IAAI,EAAE;AADF,OAJL;AAOHoB,MAAAA,KAAK,EAAE;AACHpB,QAAAA,IAAI,EAAE;AADH;AAPJ,KAAP;AAWD,GAZH,CADwC,CAA5C,CA5BkB,CA2ClB;;AAEA,sBACI,QAAC,aAAD;AACF,IAAA,eAAe,EAAE,EADf;AAEF,IAAA,OAAO,EAAE,CAFP;AAGF,IAAA,eAAe,EAAE,CAHf;AAIF,IAAA,aAAa,EAAE,EAJb;AAKF,IAAA,cAAc,EAAE;AAChBqB,MAAAA,UAAU,EAAE,iBADI;AAEhBC,MAAAA,QAAQ,EAAE;AAFM,KALd;AASF,IAAA,KAAK,EAAET,UATL;AAUF,IAAA,UAAU,EAAE;AACVM,MAAAA,MAAM,EAAE;AACJnB,QAAAA,IAAI,EAAE;AADF,OADE;AAIVoB,MAAAA,KAAK,EAAE;AACHpB,QAAAA,IAAI,EAAE;AADH;AAJG;AAVV;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBH,CAnED;;GAAMX,O;;KAAAA,O;AAqEN,eAAeA,OAAf","sourcesContent":["import { Hexagon, TiledHexagons } from 'tiled-hexagons'\nimport { useState } from 'react'\nimport { Component } from 'react'\n\nconst openmoji = require('openmoji');\n\nconst Hexgrid = () => {\n\n\n    const selectedEmojis = [];\n    var numEmojis = 69; //69\n\n\n    const handleClick = (id, emoji, e) => {\n        console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n        console.log(e.target);\n        console.log(e.target.fill);\n        //selectedEmojis.push(emoji);\n    }\n    \n\n    let numbers = [];\n    while(selectedEmojis.length + numbers.length < numEmojis){\n        var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n        if(numbers.indexOf(r) === -1) numbers.push(r);\n    }\n    let emojis = [];\n\n    for (let index = 0; index < numbers.length; index++) {\n        emojis.push(openmoji.openmojis[numbers[index]]);\n    }    \n\n\n    emojis = selectedEmojis.concat(emojis); \n    const [emojiTiles, setEmojiTiles] = useState(\n        emojis.map((emoji, index) => {\n            return { \n              img: `/images/${emoji.hexcode}.svg`, \n              key: index,\n              onClick: (e) => handleClick(index, emoji, e),\n                normal: {\n                    fill: 'red'\n                },\n                hover: {\n                    fill: 'white'\n                }\n            }\n          })\n    )\n    //emojis[0].fill = \"red\";\n\n    return (  \n        <TiledHexagons\n      tileSideLengths={60}\n      tileGap={4}\n      tileBorderRadii={9}\n      maxHorizontal={12}\n      tileTextStyles={{\n      fontFamily: 'Source Sans Pro',\n      fontSize: '68px',\n      }}\n      tiles={emojiTiles}\n      tileStyles={{\n        normal: {\n            fill: 'red'\n        },\n        hover: {\n            fill: 'blue'\n        }\n    }}\n\n    />\n    );\n}\n \nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}