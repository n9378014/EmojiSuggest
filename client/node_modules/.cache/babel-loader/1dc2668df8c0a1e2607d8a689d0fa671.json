{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Documents/GitHub/EmojiSuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { TiledHexagons } from 'tiled-hexagons';\nimport { useState, useEffect } from 'react';\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nconst fs = require('fs');\n\nconst numEmojis = 259;\nconst maxHorizontal = 19; //111\n\nconst maxVertical = Math.ceil(numEmojis / maxHorizontal);\nconst center = Math.round(maxHorizontal * (maxVertical / 4) + (maxHorizontal - 1) * (maxVertical / 4)) - Math.round(maxHorizontal / 2); //Math.ceil(numEmojis/2)-3;\n\nconst lenHistory = Math.ceil(maxHorizontal / 2) - 1;\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\n\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073].hexcode);\n}\n\nconst cat1Index = [0, 1, 2, 3, 4, 5, 19, 20, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 56, 57, 58, 59, 60, 61, 62, 74, 75, 76, 77, 78, 79, 80, 81, 93, 94, 95, 96, 97, 98, 99]; //100\n\nconst cat2Index = [7, 8, 9, 10, 11, 26, 27, 28, 29, 45, 46, 47, 64, 65, 83];\nconst cat3Index = [13, 14, 15, 16, 17, 18, 31, 32, 33, 34, 35, 36, 49, 50, 51, 52, 53, 54, 55, 67, 68, 69, 70, 71, 72, 73, 85, 86, 87, 88, 89, 90, 91, 92, 103, 104, 105, 106, 107, 108, 109, 110];\nconst cat4Index = []; //137\n\nconst cat5Index = [];\nconst cat6Index = [];\nconst cat7Index = [121, 122, 123, 124, 125, 126, 127, 128, 129];\nlet imageURLs = new Array(numEmojis);\n\nconst Hexgrid = () => {\n  _s();\n\n  var apiURL = process.env.REACT_APP_BACKEND;\n  console.log(\"URL: \" + apiURL);\n  apiURL = 'http://localhost:9000';\n  const [emojiHistory, setEmojiHistory] = useState([]);\n  var iniTileObj = newTileObject([defaultEmojis]);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj); //\n\n  function getTileColour(tileIndex) {\n    let colour = 'white';\n\n    if (tileIndex <= center - 1 && tileIndex >= center - lenHistory) {\n      //If tile is part of emoji history\n      colour = '#dbf7fd'; //'#d4d4d4';\n    }\n\n    if (tileIndex === center) {\n      //If active emoji tile\n      colour = '#a4eefc';\n    }\n\n    return colour;\n  }\n\n  function getTileImage(tileIndex, hexcode) {\n    let image = ``;\n\n    if (Array.isArray(hexcode)) {\n      //Then hexcode is a blend\n      //image = `http://localhost:9000/blends/1F9431F0CF.png`;\n      // fetch(\"http://localhost:9000/blendemojis/\" + hexcode[0] + \"/\" + hexcode[1])\n      //   .then(res => res.json())\n      //   .then(data => { image = \"http://localhost:9000/blends/\" + data.url;})\n      //   .then(() => { return image })\n      //return 'http://localhost:9000/blends/1F9431F0CF.png';\n      return image;\n    } else {\n      //it is a single emoji character\n      image = apiURL + \"/images/\" + hexcode + \".png\";\n      return image;\n    }\n  }\n\n  function newTileObject(_emojis, selectedHexcode) {\n    let hexcodes = _emojis[0];\n    let blendedHexcodes = _emojis[1];\n\n    for (let i = 0; i < hexcodes.length; i++) {\n      imageURLs[i] = getTileImage(i, hexcodes[i]);\n    }\n    /*\n    Substitute blendedHexcodes into hexcodes where appropriate\n    */\n\n\n    if (blendedHexcodes !== undefined && blendedHexcodes !== null && selectedHexcode !== undefined) {\n      cat1Index.forEach(index => {\n        hexcodes[index] = blendedHexcodes[cat1Index.indexOf(index)]; //console.log(hexcodes[index]);\n      });\n    }\n    /*\n    Insert emoji history into active tiles\n    */\n\n\n    if (emojiHistory.length >= 1) {\n      for (let i = 0; i < emojiHistory.length; i++) {\n        if (center - i - 1 >= center - lenHistory) {\n          hexcodes[center - i - 1] = emojiHistory[emojiHistory.length - 2 - i];\n        }\n      }\n    } // if (emojiHistory.length >= 1) {\n    //   values[0][center] = emojiHistory[emojiHistory.length-1];\n    //   for (let i = 0; i < emojiHistory.length-1; i++) {\n    //     if (center - i -1> 49) {\n    //       values[0][center - i - 2] = emojiHistory[emojiHistory.length - 1 - i];\n    //     }\n    //   }\n    // }\n\n    /*\n    Map hexcodes to tiles \n    */\n\n\n    const tileObj = hexcodes.map((hexcode, index) => {\n      /*  \n      Assign tile colour based on position in grid\n      */\n      let colour = getTileColour(index);\n      /*  \n      Assign tile image based on position in grid\n      */\n      //let image = `/images/1F4EF.svg`;\n      //image = imageURLs[index];//getTileImage(index, hexcode); //get image then return tile\n\n      if (Array.isArray(hexcode)) {\n        //Then hexcode is a blend\n        //image = `http://localhost:9000/blends/1F9431F0CF.png`;\n        // fetch(\"http://localhost:9000/blendemojis/\" + hexcode[0] + \"/\" + \"1F0CF\")\n        //   .then(res => res.json())\n        //   .then(data => { imageURLs[index] = \"http://localhost:9000/blends/\" + data.url })\n        //return 'http://localhost:9000/blends/1F9431F0CF.png';\n        //return image\n        imageURLs[index] = apiURL + \"/blends/\" + hexcode[0] + hexcode[1] + '.png';\n      } else {\n        //it is a single emoji character\n        imageURLs[index] = apiURL + \"/images/\" + hexcode + \".png\";\n      }\n\n      return {\n        img: imageURLs[index],\n        key: index,\n        onClick: e => handleClick(index, hexcode, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      };\n    });\n    return tileObj;\n  }\n  /*  \n  Get random emojis for every tile\n  */\n\n\n  function getRandomHexcodes() {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(apiURL + \"/randomhexcodes?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => {\n        resolve(obj);\n      });\n    });\n  }\n  /*  \n  Get random blends\n  */\n\n\n  function getRandomBlendHexcodes(hexcode) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(apiURL + \"/randomblendhexcodes/\" + hexcode + \"?limit=\" + cat1Index.length.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => {\n        resolve(obj);\n      });\n    });\n  }\n  /*  \n  Get markov blends\n  */\n\n\n  function getMarkovHexcodes(hexcode) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(apiURL + \"/markovhexcodes/\" + hexcode + \"?limit=\" + cat7Index.length.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => {\n        resolve(obj);\n      });\n    });\n  }\n  /*\n  Update emoji history and remove the oldest entry if length exceeds max.\n  */\n\n\n  function updateEmojiHistory(hexcode, num) {\n    let newEmojis = emojiHistory;\n\n    for (let i = 0; i < num; i++) {\n      newEmojis.push(hexcode);\n\n      if (newEmojis.length > lenHistory + 1) {\n        newEmojis.shift();\n      }\n    }\n\n    setEmojiHistory(newEmojis);\n  }\n\n  function getBlendHexcode(hexcode1, hexcode2) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(apiURL + \"/blendemojis/\" + hexcode1 + \"/\" + hexcode2).then(res => res.json()).then(() => {\n        obj = [hexcode1, hexcode2];\n      }).then(() => {\n        resolve(obj);\n      });\n    });\n  }\n\n  const handleClick = (id, hexcode, e) => {\n    console.log(hexcode + ' was clicked. ID is ' + id);\n    updateEmojiHistory(hexcode, 1); //Add clicked emoji to emoji history\n\n    /*\n    TODO: Replace all emoji with 'loading' emoji with no click handler\n    */\n    //TODO: This is a quick fix, find a way to send both hexcodes and still get blends:\n\n    if (Array.isArray(hexcode)) {\n      //Then hexcode is a blend\n      hexcode = hexcode[1];\n    } //Get hexcodes for new tiles, then assign them to tiles:\n\n\n    Promise.all([getRandomHexcodes(), getRandomBlendHexcodes(hexcode), getMarkovHexcodes(hexcode), getBlendHexcode(hexcode, emojiHistory[emojiHistory.length - 2]), getBlendHexcode(emojiHistory[emojiHistory.length - 2], hexcode)]).then(values => {\n      //Substitute blendedHexcodes into hexcodes where appropriate:\n      if (values[1] !== undefined && values[1] !== null && values[2] !== null && hexcode !== undefined) {\n        cat1Index.forEach(index => {\n          values[0][index] = values[1][cat1Index.indexOf(index)];\n        });\n        cat7Index.forEach(index => {\n          values[0][index] = values[2][cat7Index.indexOf(index)];\n        });\n      }\n\n      values[0][100] = values[3]; //Make this one a blend between current and most recent history\n\n      values[0][137] = values[4]; //Make this one a blend between current and most recent history\n      //Insert emoji history into active tiles:\n\n      if (emojiHistory.length >= 1) {\n        values[0][center] = emojiHistory[emojiHistory.length - 1];\n\n        for (let i = 0; i < emojiHistory.length; i++) {\n          if (center - i - 1 >= center - lenHistory) {\n            values[0][center - i - 1] = emojiHistory[emojiHistory.length - 1 - i];\n          }\n        }\n      }\n\n      var newTileObj;\n      const tilePromise = new Promise((resolve, reject) => {\n        newTileObj = newTileObject(values, hexcode);\n        resolve();\n      });\n      tilePromise.then(() => {\n        setEmojiTiles(newTileObj);\n      }).catch(error => {\n        console.log(\"Something went wrong with the tilePromise.\");\n        console.error(error.message);\n      }); //newTileObj = newTileObject(values, hexcode); //gen tiles then return them\n    }).catch(error => {\n      console.error(error.message);\n    });\n  };\n  /*\n  Display the initial emoji options.\n  This is occuring twice according to the API terminal\n  */\n\n\n  window.addEventListener('DOMContentLoaded', event => {\n    /*\n      Fill the emoji history with placeholders\n    */\n    updateEmojiHistory(openmoji.openmojis[3073].hexcode, lenHistory + 1);\n    /*\n      TODO: Replace this with a call to the getrandoms function\n    */\n\n    var obj;\n    fetch(apiURL + \"/randomhexcodes?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => iniTileObj = newTileObject([obj, []])).then(() => setEmojiTiles(iniTileObj)).catch(error => {\n      console.log(\"Something went wrong with the randomhexcodes fetch request.\");\n      console.error(error.message);\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TiledHexagons, {\n      tileSideLengths: 60,\n      tileGap: 4,\n      tileBorderRadii: 9,\n      maxHorizontal: maxHorizontal,\n      tileTextStyles: {\n        fontFamily: 'Source Sans Pro',\n        fontSize: '68px'\n      },\n      tiles: emojiTiles,\n      onLoad: () => handleClick()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Hexgrid, \"+3VtAv/BIw3CeMu2hnKoMc1i9do=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Documents/GitHub/EmojiSuggest/client/src/Hexgrid.js"],"names":["TiledHexagons","useState","useEffect","React","Component","openmoji","require","fs","numEmojis","maxHorizontal","maxVertical","Math","ceil","center","round","lenHistory","lenRandom","defaultEmojis","index","push","openmojis","hexcode","cat1Index","cat2Index","cat3Index","cat4Index","cat5Index","cat6Index","cat7Index","imageURLs","Array","Hexgrid","apiURL","process","env","REACT_APP_BACKEND","console","log","emojiHistory","setEmojiHistory","iniTileObj","newTileObject","emojiTiles","setEmojiTiles","getTileColour","tileIndex","colour","getTileImage","image","isArray","_emojis","selectedHexcode","hexcodes","blendedHexcodes","i","length","undefined","forEach","indexOf","tileObj","map","img","key","onClick","e","handleClick","fill","styles","normal","hover","active","getRandomHexcodes","Promise","resolve","reject","obj","fetch","toString","then","res","json","data","JSON","parse","getRandomBlendHexcodes","getMarkovHexcodes","updateEmojiHistory","num","newEmojis","shift","getBlendHexcode","hexcode1","hexcode2","id","all","values","newTileObj","tilePromise","catch","error","message","window","addEventListener","event","fontFamily","fontSize"],"mappings":"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","sourcesContent":["import { TiledHexagons } from 'tiled-hexagons'\nimport { useState, useEffect } from 'react'\nimport React, { Component } from 'react';\n\nconst openmoji = require('openmoji');\nconst fs = require('fs');\n\nconst numEmojis = 259;\nconst maxHorizontal = 19;//111\nconst maxVertical = Math.ceil(numEmojis / maxHorizontal);\n\nconst center = Math.round((maxHorizontal * (maxVertical / 4)) + ((maxHorizontal - 1) * (maxVertical / 4))) - Math.round((maxHorizontal) / 2);//Math.ceil(numEmojis/2)-3;\nconst lenHistory = Math.ceil(maxHorizontal / 2) - 1;\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\n\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073].hexcode);\n}\n\nconst cat1Index = [0, 1, 2, 3, 4, 5,\n  19, 20, 21, 22, 23, 24,\n  37, 38, 39, 40, 41, 42, 43,\n  56, 57, 58, 59, 60, 61, 62,\n  74, 75, 76, 77, 78, 79, 80, 81,\n  93, 94, 95, 96, 97, 98, 99]; //100\n\nconst cat2Index = [7, 8, 9, 10, 11,\n  26, 27, 28, 29,\n  45, 46, 47,\n  64, 65,\n  83];\n\nconst cat3Index = [13, 14, 15, 16, 17, 18,\n                  31, 32, 33, 34, 35, 36,\n                  49, 50, 51, 52, 53, 54, 55,\n                  67, 68, 69, 70, 71, 72, 73,\n                  85, 86, 87, 88, 89, 90, 91, 92,\n                  103, 104, 105, 106, 107, 108, 109, 110];\n\nconst cat4Index = []; //137\nconst cat5Index = [];\nconst cat6Index = [];\nconst cat7Index = [121, 122, 123, 124, 125, 126, 127, 128, 129];\n\nlet imageURLs = new Array(numEmojis);\n\nconst Hexgrid = () => {\n\n  var apiURL = process.env.REACT_APP_BACKEND;\n  console.log(\"URL: \" + apiURL);\n  apiURL = 'http://localhost:9000';\n  const [emojiHistory, setEmojiHistory] = useState([]);\n  var iniTileObj = newTileObject([defaultEmojis]);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj); //\n\n  function getTileColour(tileIndex) {\n    let colour = 'white';\n    if (tileIndex <= (center - 1) && tileIndex >= (center - lenHistory)) { //If tile is part of emoji history\n      colour = '#dbf7fd';//'#d4d4d4';\n    }\n    if (tileIndex === center) { //If active emoji tile\n      colour = '#a4eefc';\n    }\n    return colour;\n  }\n\n  function getTileImage(tileIndex, hexcode) {\n    let image = ``;\n\n    if (Array.isArray(hexcode)) { //Then hexcode is a blend\n      //image = `http://localhost:9000/blends/1F9431F0CF.png`;\n      // fetch(\"http://localhost:9000/blendemojis/\" + hexcode[0] + \"/\" + hexcode[1])\n      //   .then(res => res.json())\n      //   .then(data => { image = \"http://localhost:9000/blends/\" + data.url;})\n      //   .then(() => { return image })\n      //return 'http://localhost:9000/blends/1F9431F0CF.png';\n      return image\n    }\n    else { //it is a single emoji character\n      image = apiURL +\"/images/\" + hexcode + \".png\";\n      return image;\n    }\n  }\n\n  function newTileObject(_emojis, selectedHexcode) {\n    let hexcodes = _emojis[0];\n    let blendedHexcodes = _emojis[1];\n    for (let i = 0; i < hexcodes.length; i++) {\n      imageURLs[i] = getTileImage(i, hexcodes[i]);\n    }\n\n    /*\n    Substitute blendedHexcodes into hexcodes where appropriate\n    */\n    if (blendedHexcodes !== undefined && blendedHexcodes !== null && selectedHexcode !== undefined) {\n      cat1Index.forEach(index => {\n        hexcodes[index] = blendedHexcodes[cat1Index.indexOf(index)];\n        //console.log(hexcodes[index]);\n      });\n    }\n\n      /*\n      Insert emoji history into active tiles\n      */\n      if (emojiHistory.length >= 1) {\n        for (let i = 0; i < emojiHistory.length; i++) {\n          if (center - i - 1 >= (center - lenHistory)) {\n            hexcodes[center - i -1] = emojiHistory[emojiHistory.length - 2 - i];\n          }\n        }\n      }\n\n      // if (emojiHistory.length >= 1) {\n      //   values[0][center] = emojiHistory[emojiHistory.length-1];\n      //   for (let i = 0; i < emojiHistory.length-1; i++) {\n      //     if (center - i -1> 49) {\n      //       values[0][center - i - 2] = emojiHistory[emojiHistory.length - 1 - i];\n      //     }\n      //   }\n      // }\n\n    /*\n    Map hexcodes to tiles \n    */\n    const tileObj = hexcodes.map((hexcode, index) => {\n      /*  \n      Assign tile colour based on position in grid\n      */\n      let colour = getTileColour(index);\n\n      /*  \n      Assign tile image based on position in grid\n      */\n      //let image = `/images/1F4EF.svg`;\n      //image = imageURLs[index];//getTileImage(index, hexcode); //get image then return tile\n      if (Array.isArray(hexcode)) { //Then hexcode is a blend\n        //image = `http://localhost:9000/blends/1F9431F0CF.png`;\n        // fetch(\"http://localhost:9000/blendemojis/\" + hexcode[0] + \"/\" + \"1F0CF\")\n        //   .then(res => res.json())\n        //   .then(data => { imageURLs[index] = \"http://localhost:9000/blends/\" + data.url })\n        //return 'http://localhost:9000/blends/1F9431F0CF.png';\n        //return image\n        imageURLs[index] = apiURL + \"/blends/\" + hexcode[0] + hexcode[1] + '.png';\n      }\n      else { //it is a single emoji character\n        imageURLs[index] = apiURL + \"/images/\" + hexcode + \".png\";\n      }\n      return {\n        img: imageURLs[index],\n        key: index,\n        onClick: (e) => handleClick(index, hexcode, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      }\n    })\n\n    return tileObj;\n  }\n\n  /*  \n  Get random emojis for every tile\n  */\n  function getRandomHexcodes() {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(apiURL+\"/randomhexcodes?limit=\" + numEmojis.toString())\n        .then(res => res.json())\n        .then(data => obj = JSON.parse(data))\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  /*  \n  Get random blends\n  */\n  function getRandomBlendHexcodes(hexcode) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(apiURL+\"/randomblendhexcodes/\" + hexcode + \"?limit=\" + cat1Index.length.toString())\n        .then(res => res.json())\n        .then(data => obj = JSON.parse(data))\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  /*  \n  Get markov blends\n  */\n  function getMarkovHexcodes(hexcode) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(apiURL+ \"/markovhexcodes/\" + hexcode + \"?limit=\" + cat7Index.length.toString())\n        .then(res => res.json())\n        .then(data => obj = JSON.parse(data))\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  /*\n  Update emoji history and remove the oldest entry if length exceeds max.\n  */\n  function updateEmojiHistory(hexcode, num) {\n    let newEmojis = emojiHistory;\n    for (let i = 0; i < num; i++) {\n      newEmojis.push(hexcode);\n      if (newEmojis.length > lenHistory+1) {\n        newEmojis.shift();\n      }\n    }\n    setEmojiHistory(newEmojis);\n  }\n\n  function getBlendHexcode(hexcode1, hexcode2) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(apiURL+\"/blendemojis/\" + hexcode1 + \"/\" + hexcode2)\n        .then(res => res.json())\n        .then(() => { obj = [hexcode1, hexcode2]; })\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  const handleClick = (id, hexcode, e) => {\n    console.log(hexcode + ' was clicked. ID is ' + id);\n\n\n\n    updateEmojiHistory(hexcode, 1); //Add clicked emoji to emoji history\n\n    /*\n    TODO: Replace all emoji with 'loading' emoji with no click handler\n    */\n\n    //TODO: This is a quick fix, find a way to send both hexcodes and still get blends:\n    if(Array.isArray(hexcode)){ //Then hexcode is a blend\n      hexcode = hexcode[1];\n    }\n\n    //Get hexcodes for new tiles, then assign them to tiles:\n    Promise.all([getRandomHexcodes(), getRandomBlendHexcodes(hexcode), getMarkovHexcodes(hexcode), getBlendHexcode(hexcode, emojiHistory[emojiHistory.length - 2]), getBlendHexcode(emojiHistory[emojiHistory.length - 2], hexcode)]).then((values) => {\n      //Substitute blendedHexcodes into hexcodes where appropriate:\n      if (values[1] !== undefined && values[1] !== null && values[2] !== null && hexcode !== undefined) {\n        cat1Index.forEach(index => {\n          values[0][index] = values[1][cat1Index.indexOf(index)];\n        });\n        cat7Index.forEach(index => {\n          values[0][index] = values[2][cat7Index.indexOf(index)];\n        });\n\n      }\n\n      values[0][100] = values[3]; //Make this one a blend between current and most recent history\n      values[0][137] = values[4]; //Make this one a blend between current and most recent history\n\n      //Insert emoji history into active tiles:\n      if (emojiHistory.length >= 1) {\n        values[0][center] = emojiHistory[emojiHistory.length-1];\n        for (let i = 0; i < emojiHistory.length; i++) {\n          if (center - i - 1 >= (center - lenHistory)) {\n            values[0][center - i - 1] = emojiHistory[emojiHistory.length - 1 - i];\n          }\n        }\n      }\n\n      var newTileObj;\n      const tilePromise = new Promise((resolve, reject) => {\n        newTileObj = newTileObject(values, hexcode);\n        resolve();\n      });\n      tilePromise\n        .then(() => { setEmojiTiles(newTileObj); }).catch(error => {\n          console.log(\"Something went wrong with the tilePromise.\")\n          console.error(error.message)\n        });\n\n      //newTileObj = newTileObject(values, hexcode); //gen tiles then return them\n    }).catch(error => {\n      console.error(error.message)\n    });\n  }\n\n  /*\n  Display the initial emoji options.\n  This is occuring twice according to the API terminal\n  */\n  window.addEventListener('DOMContentLoaded', (event) => {\n    /*\n      Fill the emoji history with placeholders\n    */\n    updateEmojiHistory(openmoji.openmojis[3073].hexcode, lenHistory+1 );\n    \n    /*\n      TODO: Replace this with a call to the getrandoms function\n    */\n    var obj;\n    fetch(apiURL + \"/randomhexcodes?limit=\" + numEmojis.toString())\n      .then(res => res.json())\n      .then(data => obj = JSON.parse(data))\n      .then(() => iniTileObj = newTileObject([obj, []]))\n      .then(() => setEmojiTiles(iniTileObj))\n      .catch(error => {\n        console.log(\"Something went wrong with the randomhexcodes fetch request.\")\n        console.error(error.message)\n      })\n  });\n\n  return (\n    <>\n      <TiledHexagons\n        tileSideLengths={60}\n        tileGap={4}\n        tileBorderRadii={9}\n        maxHorizontal={maxHorizontal}\n        tileTextStyles={{\n          fontFamily: 'Source Sans Pro',\n          fontSize: '68px',\n        }}\n        tiles={emojiTiles}\n        onLoad={() => handleClick()}\n      />\n    </>\n  );\n}\n\nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}