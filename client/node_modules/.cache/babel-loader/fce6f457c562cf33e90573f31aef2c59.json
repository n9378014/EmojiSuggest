{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { TiledHexagons } from 'tiled-hexagons';\nimport { useState, useEffect } from 'react';\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nconst fs = require('fs');\n\nconst numEmojis = 259;\nconst maxHorizontal = 19; //111\n\nconst maxVertical = Math.ceil(numEmojis / maxHorizontal);\nconst center = Math.round(maxHorizontal * (maxVertical / 4) + (maxHorizontal - 1) * (maxVertical / 4)) - Math.round(maxHorizontal / 2); //Math.ceil(numEmojis/2)-3;\n\nconst lenHistory = Math.ceil(maxHorizontal / 2) - 1;\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\n\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073].hexcode);\n}\n\nconst randomBlendIndex = [93, 94, 95, 96, 97, 98, 99, 100];\n\nconst Hexgrid = () => {\n  _s();\n\n  const [emojiHistory, setEmojiHistory] = useState([]);\n  var iniTileObj = newTileObject(defaultEmojis);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj);\n\n  function getTileColour(tileIndex) {\n    let colour = 'white';\n\n    if (tileIndex <= center - 1 && tileIndex >= center - lenHistory) {\n      colour = '#dbf7fd'; //'#d4d4d4';\n    }\n\n    if (tileIndex === center) {\n      colour = '#a4eefc';\n    }\n\n    return colour;\n  }\n\n  function getTileImage(tileIndex, emoji, blendPartner) {\n    // fetch(\"http://localhost:9000/blendemojis/\" + emoji.hexcode + \"/\" + \"1F0CF\")\n    // .then(res => res.json())\n    // .then(data => console.log(data))\n    let image = `/images/${emoji.hexcode}.svg`;\n    return image;\n  }\n\n  function newTileObject(_emojis, selectedHexcode) {\n    let hexcodes = _emojis;\n    let blendedHexcodes = [];\n\n    if (selectedHexcode === null || selectedHexcode === undefined) {\n      selectedHexcode = '1F4A9';\n    }\n    /*\n    Insert emoji history into active tiles\n    */\n\n\n    if (emojiHistory.length >= 1) {\n      for (let i = 0; i < emojiHistory.length; i++) {\n        if (center - i > 49) {\n          hexcodes[center - i] = emojiHistory[emojiHistory.length - 1 - i];\n        }\n      }\n    }\n    /*\n    Get blends from backend \n    */\n\n\n    var obj;\n\n    if (selectedHexcode !== null && selectedHexcode !== undefined) {\n      fetch(\"http://localhost:9000/randomblendhexcodes/\" + selectedHexcode + \"?limit=\" + randomBlendIndex.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(obj => blendedHexcodes = obj).then(() => {\n        /*\n        Add blends into hexcodes[] \n        */\n        for (let i = 0; i < hexcodes.length; i++) {\n          if (randomBlendIndex.includes(i)) {\n            let j = randomBlendIndex.indexOf(i);\n            hexcodes[i] = blendedHexcodes[j];\n          }\n        }\n      }).then(() => {});\n      /*\n      Map hexcodes to tiles \n      */\n\n      const tileObj = hexcodes.map((hexcode, index) => {\n        /*  \n        Assign tile colour based on position in grid\n        */\n        let colour = getTileColour(index);\n        /*  \n        TODO: Confirm whether hexcode is code or [code, code]\n        Currently this pretends blends dont exist\n        */\n\n        if (Array.isArray(hexcode)) {\n          hexcode = hexcode[0];\n        }\n        /*  \n        Assign tile image based on position in grid\n        */\n\n\n        let image = `/images/${hexcode}.svg`; // fetch(\"http://localhost:9000/blendemojis/\" + emoji.hexcode + \"/\" + \"1F0CF\")\n        // .then(res => res.json())\n        // .then(data => console.log(data))\n        // if (demo != undefined && demo != null) {\n        //   image = demo;\n        // }\n\n        return {\n          img: image,\n          key: index,\n          onClick: e => handleClick(index, hexcode, e),\n          fill: '',\n          styles: {\n            normal: {\n              fill: colour\n            },\n            hover: {\n              fill: '#6cc7da'\n            },\n            active: {\n              fill: '#779df1'\n            }\n          }\n        };\n      });\n      return tileObj;\n    }\n  }\n\n  const handleClick = (id, hexcode, e) => {\n    console.log(hexcode + ' was clicked. ID is ' + id);\n    /*\n    Update emoji history:\n    TODO: Remove older entries when lenght exceeds a certain number\n    */\n\n    let newEmojis = emojiHistory;\n    newEmojis.push(hexcode);\n    setEmojiHistory(newEmojis);\n    var blendObj;\n    let demoBlends = []; // fetch(\"http://localhost:9000/emojiblends/\" + emoji.hexcode)\n    // .then(res => res.json())\n    // .then(data => blendObj = data)\n    // .then(() => demoBlends = blendObj.relatedEmoji)\n    //combineEmoji(hexcode1, hexcode2);\n\n    var obj;\n    var newTileObj;\n    fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => newTileObj = newTileObject(obj, hexcode)).then(() => setEmojiTiles(newTileObj)); //var testimg;\n    //var fetchurl = \"http://localhost:9000/blendemojis/demo/\" + emoji.hexcode + \"/\" + \"1F0CF\";\n    // fetch(fetchurl, { headers: { 'Content-Type': 'blob' } })\n    //   .then(response => response.body)\n    //   .then(body => {\n    //     const reader = body.getReader();\n    //     return new ReadableStream({\n    //       start(controller) {\n    //         return pump();\n    //         function pump() {\n    //           return reader.read().then(({ done, value }) => {\n    //             // When no more data needs to be consumed, close the stream\n    //             if (done) {\n    //               controller.close();\n    //               return;\n    //             }\n    //             // Enqueue the next data chunk into our target stream\n    //             controller.enqueue(value);\n    //             return pump();\n    //           });\n    //         }\n    //       }\n    //     })\n    //   })\n    //   .then(stream => new Response(stream))\n    //   .then(response => response.blob())\n    //   .then(blob => URL.createObjectURL(blob))\n    //   .then(url => testimg = url)\n    //   .then(() => {\n    //     var obj;\n    //     var newTileObj;\n    //     fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString())\n    //       .then(res => res.json())\n    //       .then(data => obj = JSON.parse(data))\n    //       .then(() => newTileObj = newTileObject(obj, demoBlends, testimg))\n    //       .then(() => setEmojiTiles(newTileObj))\n    //   })\n    //   .catch(err => console.error(err));\n  };\n\n  function setupGrid() {\n    var obj;\n    fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => iniTileObj = newTileObject(obj)).then(() => setEmojiTiles(iniTileObj));\n  }\n\n  window.addEventListener('DOMContentLoaded', event => {\n    setupGrid();\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TiledHexagons, {\n      tileSideLengths: 60,\n      tileGap: 4,\n      tileBorderRadii: 9,\n      maxHorizontal: maxHorizontal,\n      tileTextStyles: {\n        fontFamily: 'Source Sans Pro',\n        fontSize: '68px'\n      },\n      tiles: emojiTiles,\n      onLoad: () => handleClick()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Hexgrid, \"+3VtAv/BIw3CeMu2hnKoMc1i9do=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["TiledHexagons","useState","useEffect","React","Component","openmoji","require","fs","numEmojis","maxHorizontal","maxVertical","Math","ceil","center","round","lenHistory","lenRandom","defaultEmojis","index","push","openmojis","hexcode","randomBlendIndex","Hexgrid","emojiHistory","setEmojiHistory","iniTileObj","newTileObject","emojiTiles","setEmojiTiles","getTileColour","tileIndex","colour","getTileImage","emoji","blendPartner","image","_emojis","selectedHexcode","hexcodes","blendedHexcodes","undefined","length","i","obj","fetch","toString","then","res","json","data","JSON","parse","includes","j","indexOf","tileObj","map","Array","isArray","img","key","onClick","e","handleClick","fill","styles","normal","hover","active","id","console","log","newEmojis","blendObj","demoBlends","newTileObj","setupGrid","window","addEventListener","event","fontFamily","fontSize"],"mappings":"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","sourcesContent":["import { TiledHexagons } from 'tiled-hexagons'\nimport { useState, useEffect } from 'react'\nimport React, { Component } from 'react';\n\nconst openmoji = require('openmoji');\nconst fs = require('fs');\n\nconst numEmojis = 259;\nconst maxHorizontal = 19;//111\nconst maxVertical = Math.ceil(numEmojis / maxHorizontal);\n\nconst center = Math.round((maxHorizontal * (maxVertical / 4)) + ((maxHorizontal - 1) * (maxVertical / 4))) - Math.round((maxHorizontal) / 2);//Math.ceil(numEmojis/2)-3;\nconst lenHistory = Math.ceil(maxHorizontal / 2) - 1;\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\n\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073].hexcode);\n}\n\nconst randomBlendIndex = [93, 94, 95, 96, 97, 98, 99, 100];\n\nconst Hexgrid = () => {\n  const [emojiHistory, setEmojiHistory] = useState([]);\n  var iniTileObj = newTileObject(defaultEmojis);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj)\n\n  function getTileColour(tileIndex) {\n    let colour = 'white';\n    if (tileIndex <= (center - 1) && tileIndex >= (center - lenHistory)) {\n      colour = '#dbf7fd';//'#d4d4d4';\n    }\n    if (tileIndex === center) {\n      colour = '#a4eefc';\n    }\n    return colour;\n  }\n\n  function getTileImage(tileIndex, emoji, blendPartner) {\n    // fetch(\"http://localhost:9000/blendemojis/\" + emoji.hexcode + \"/\" + \"1F0CF\")\n    // .then(res => res.json())\n    // .then(data => console.log(data))\n\n    let image = `/images/${emoji.hexcode}.svg`;\n    return image;\n  }\n\n  function newTileObject(_emojis, selectedHexcode) {\n    let hexcodes = _emojis;\n    let blendedHexcodes = [];\n    if(selectedHexcode === null || selectedHexcode === undefined){\n      selectedHexcode = '1F4A9';\n    }\n    /*\n    Insert emoji history into active tiles\n    */\n    if (emojiHistory.length >= 1) {\n      for (let i = 0; i < emojiHistory.length; i++) {\n        if (center - i > 49) {\n          hexcodes[center - i] = emojiHistory[emojiHistory.length - 1 - i];\n        }\n      }\n    }\n\n    /*\n    Get blends from backend \n    */\n   var obj;\n   if(selectedHexcode !== null && selectedHexcode !== undefined){\n     fetch(\"http://localhost:9000/randomblendhexcodes/\" + selectedHexcode + \"?limit=\" + randomBlendIndex.toString())\n       .then(res => res.json())\n       .then(data => obj = JSON.parse(data))\n       .then(obj => blendedHexcodes = obj)\n       .then(() => {\n         /*\n         Add blends into hexcodes[] \n         */\n         for (let i = 0; i < hexcodes.length; i++) {\n           if (randomBlendIndex.includes(i)) {\n             let j = randomBlendIndex.indexOf(i);\n             hexcodes[i] = blendedHexcodes[j];\n           }\n         }\n       })\n       .then(() => {\n      })\n        /*\n        Map hexcodes to tiles \n        */\n        const tileObj = hexcodes.map((hexcode, index) => {\n          /*  \n          Assign tile colour based on position in grid\n          */\n          let colour = getTileColour(index);\n    \n          /*  \n          TODO: Confirm whether hexcode is code or [code, code]\n          Currently this pretends blends dont exist\n          */\n         if(Array.isArray(hexcode))\n           {\n             hexcode = hexcode[0];\n           }\n         \n    \n          /*  \n          Assign tile image based on position in grid\n          */\n          let image = `/images/${hexcode}.svg`;\n          // fetch(\"http://localhost:9000/blendemojis/\" + emoji.hexcode + \"/\" + \"1F0CF\")\n          // .then(res => res.json())\n          // .then(data => console.log(data))\n    \n          // if (demo != undefined && demo != null) {\n          //   image = demo;\n          // }\n    \n          return {\n            img: image,\n            key: index,\n            onClick: (e) => handleClick(index, hexcode, e),\n            fill: '',\n            styles: {\n              normal: {\n                fill: colour\n              },\n              hover: {\n                fill: '#6cc7da'\n              },\n              active: {\n                fill: '#779df1'\n              }\n            }\n          }\n        })\n    \n        return tileObj;    \n\n   }\n\n  }\n\n  const handleClick = (id, hexcode, e) => {\n    console.log(hexcode + ' was clicked. ID is ' + id);\n\n    /*\n    Update emoji history:\n    TODO: Remove older entries when lenght exceeds a certain number\n    */\n    let newEmojis = emojiHistory;\n    newEmojis.push(hexcode);\n    setEmojiHistory(newEmojis);\n\n    var blendObj;\n    let demoBlends = [];\n    // fetch(\"http://localhost:9000/emojiblends/\" + emoji.hexcode)\n    // .then(res => res.json())\n    // .then(data => blendObj = data)\n    // .then(() => demoBlends = blendObj.relatedEmoji)\n    //combineEmoji(hexcode1, hexcode2);\n\n\n    var obj;\n    var newTileObj;\n    fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString())\n      .then(res => res.json())\n      .then(data => obj = JSON.parse(data))\n      .then(() => newTileObj = newTileObject(obj, hexcode))\n      .then(() => setEmojiTiles(newTileObj))\n\n    //var testimg;\n    //var fetchurl = \"http://localhost:9000/blendemojis/demo/\" + emoji.hexcode + \"/\" + \"1F0CF\";\n    // fetch(fetchurl, { headers: { 'Content-Type': 'blob' } })\n    //   .then(response => response.body)\n    //   .then(body => {\n    //     const reader = body.getReader();\n\n    //     return new ReadableStream({\n    //       start(controller) {\n    //         return pump();\n    //         function pump() {\n    //           return reader.read().then(({ done, value }) => {\n    //             // When no more data needs to be consumed, close the stream\n    //             if (done) {\n    //               controller.close();\n    //               return;\n    //             }\n    //             // Enqueue the next data chunk into our target stream\n    //             controller.enqueue(value);\n    //             return pump();\n    //           });\n    //         }\n    //       }\n    //     })\n    //   })\n    //   .then(stream => new Response(stream))\n    //   .then(response => response.blob())\n    //   .then(blob => URL.createObjectURL(blob))\n    //   .then(url => testimg = url)\n    //   .then(() => {\n    //     var obj;\n    //     var newTileObj;\n    //     fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString())\n    //       .then(res => res.json())\n    //       .then(data => obj = JSON.parse(data))\n    //       .then(() => newTileObj = newTileObject(obj, demoBlends, testimg))\n    //       .then(() => setEmojiTiles(newTileObj))\n    //   })\n    //   .catch(err => console.error(err));\n  }\n\n  function setupGrid() {\n    var obj;\n    fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString())\n      .then(res => res.json())\n      .then(data => obj = JSON.parse(data))\n      .then(() => iniTileObj = newTileObject(obj))\n      .then(() => setEmojiTiles(iniTileObj))\n  }\n\n  window.addEventListener('DOMContentLoaded', (event) => {\n    setupGrid();\n  });\n\n  return (\n    <>\n      <TiledHexagons\n        tileSideLengths={60}\n        tileGap={4}\n        tileBorderRadii={9}\n        maxHorizontal={maxHorizontal}\n        tileTextStyles={{\n          fontFamily: 'Source Sans Pro',\n          fontSize: '68px',\n        }}\n        tiles={emojiTiles}\n        onLoad={() => handleClick()}\n      />\n    </>\n  );\n}\n\nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}