{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { Hexagon, TiledHexagons } from 'tiled-hexagons';\nimport { useState } from 'react';\nimport { component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nconst Hexgrid = () => {\n  _s();\n\n  const selectedEmojis = [];\n  var numEmojis = 69; //69\n\n  const [colour, setColour] = useState('red');\n\n  const handleClick = (id, emoji, e) => {\n    setColour(\"#7cebff\");\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n    console.log(e.target);\n    console.log(e.target.fill); //selectedEmojis.push(emoji);\n  };\n\n  let numbers = [];\n\n  while (selectedEmojis.length + numbers.length < numEmojis) {\n    var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n    if (numbers.indexOf(r) === -1) numbers.push(r);\n  }\n\n  let emojis = [];\n\n  for (let index = 0; index < numbers.length; index++) {\n    emojis.push(openmoji.openmojis[numbers[index]]);\n  }\n\n  emojis = selectedEmojis.concat(emojis);\n  const [emojiTiles, setEmojiTiles] = useState([emojis.map((emoji, index) => {\n    return {\n      img: `/images/${emoji.hexcode}.svg`,\n      key: index,\n      onClick: e => handleClick(index, emoji, e)\n    };\n  })]); //emojis[0].fill = \"red\";\n\n  class Example6 extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        colours: genColours()\n      };\n    }\n\n    render() {\n      let {\n        colours\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(TiledHexagons, {\n        maxHorizontal: 5,\n        tileBorderRadii: 0,\n        tileGap: 0,\n        tileSideLengths: 60,\n        tiles: colours.map(colour => {\n          return {\n            fill: '#' + colour,\n            shadow: '#' + darken(colour, 25),\n            onClick: () => this.setState({\n              colours: genColours()\n            })\n          };\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 18\n      }, this);\n    }\n\n  }\n\n  return /*#__PURE__*/_jsxDEV(TiledHexagons, {\n    tileSideLengths: 60,\n    tileGap: 4,\n    tileBorderRadii: 9,\n    maxHorizontal: 12,\n    tileTextStyles: {\n      fontFamily: 'Source Sans Pro',\n      fontSize: '68px'\n    },\n    tileStyles: {\n      normal: {\n        fill: 'red'\n      },\n      hover: {\n        fill: 'blue'\n      },\n      active: {\n        fill: 'green'\n      }\n    },\n    tiles: emojiTiles[0]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Hexgrid, \"z/VGCSyr0XVPmID6BG7oE4h3cuw=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["Hexagon","TiledHexagons","useState","component","openmoji","require","Hexgrid","selectedEmojis","numEmojis","colour","setColour","handleClick","id","emoji","e","console","log","hexcode","target","fill","numbers","length","r","Math","floor","random","openmojis","indexOf","push","emojis","index","concat","emojiTiles","setEmojiTiles","map","img","key","onClick","Example6","Component","constructor","props","state","colours","genColours","render","shadow","darken","setState","fontFamily","fontSize","normal","hover","active"],"mappings":"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","sourcesContent":["import { Hexagon, TiledHexagons } from 'tiled-hexagons'\nimport { useState } from 'react'\nimport { component } from 'react'\n\nconst openmoji = require('openmoji');\n\nconst Hexgrid = () => {\n\n\n    const selectedEmojis = [];\n    var numEmojis = 69; //69\n\n    const [colour, setColour] = useState('red')\n\n    const handleClick = (id, emoji, e) => {\n        setColour(\"#7cebff\");\n        console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n        console.log(e.target);\n        console.log(e.target.fill);\n        //selectedEmojis.push(emoji);\n    }\n    \n\n    let numbers = [];\n    while(selectedEmojis.length + numbers.length < numEmojis){\n        var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n        if(numbers.indexOf(r) === -1) numbers.push(r);\n    }\n    let emojis = [];\n\n    for (let index = 0; index < numbers.length; index++) {\n        emojis.push(openmoji.openmojis[numbers[index]]);\n    }    \n\n    emojis = selectedEmojis.concat(emojis); \n    const [emojiTiles, setEmojiTiles] = useState([\n        emojis.map((emoji, index) => {\n            return { \n              img: `/images/${emoji.hexcode}.svg`, \n              key: index,\n              onClick: (e) => handleClick(index, emoji, e)\n            }\n          })\n    ])\n    //emojis[0].fill = \"red\";\n\n    class Example6 extends Component {\n        constructor(props) {\n          super(props)\n          this.state = {\n            colours: genColours()\n          }\n        }\n      \n        render() {\n          let { colours } = this.state\n          return <TiledHexagons\n            maxHorizontal={5}\n            tileBorderRadii={0}\n            tileGap={0}\n            tileSideLengths={60}\n            tiles={colours. map(colour => {\n              return {\n                fill: '#'+colour,\n                shadow: '#'+darken(colour, 25),\n                onClick: () => this.setState({\n                  colours: genColours()\n                })\n              }\n            })}\n          />\n        }\n      }\n    return (  \n        <TiledHexagons\n      tileSideLengths={60}\n      tileGap={4}\n      tileBorderRadii={9}\n      maxHorizontal={12}\n      tileTextStyles={{\n      fontFamily: 'Source Sans Pro',\n      fontSize: '68px'\n      }}\n      tileStyles={{\n        normal: {\n          fill: 'red'\n        },\n        hover: {\n          fill: 'blue'\n        },\n        active: {\n          fill: 'green'\n        }\n      }}\n      tiles={emojiTiles[0]}\n    />\n    );\n}\n \nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}