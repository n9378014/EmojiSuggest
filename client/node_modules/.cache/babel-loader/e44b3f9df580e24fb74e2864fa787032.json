{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { TiledHexagons } from 'tiled-hexagons';\nimport { useState, useEffect } from 'react';\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nconst mergeImages = require('merge-images');\n\nconst {\n  Canvas,\n  Image\n} = require('canvas');\n\nconst numEmojis = 228;\nconst maxHorizontal = 19;\nconst center = Math.ceil(numEmojis / 2) - 3;\nconst lenHistory = Math.ceil(maxHorizontal / 2) - 1;\nconst defaultEmojis = [];\n\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073]);\n} //3073\n\n\nvar count = 1;\n\nconst Hexgrid = () => {\n  _s();\n\n  const [selectedEmojis, setSelectedEmojis] = useState([]);\n  var iniTileObj = newTileObject(defaultEmojis);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj);\n\n  function newTileObject(_emojis, blends) {\n    let emojis = _emojis; //For testing, sets one hex to blend\n\n    if (blends != null && blends.length > 1) {\n      emojis[57] = blends[0];\n    }\n\n    var blendimage;\n    mergeImages([`/images/1F3CD.svg`, `/images/1F3F0.svg`], {\n      Canvas: Canvas,\n      Image: Image\n    }).then(b64 => blendimage = b64);\n\n    if (selectedEmojis.length >= 1) {\n      for (let i = 0; i < selectedEmojis.length; i++) {\n        if (center - i > 49) {\n          emojis[center - i] = selectedEmojis[selectedEmojis.length - 1 - i];\n        }\n      }\n    }\n\n    const tileObj = emojis.map((emoji, index) => {\n      let colour = 'white'; //emojiFills[index].toString();\n      //console.log(selectedEmojis.length);\n\n      if (index <= center - 1 && index >= center - lenHistory) {\n        colour = '#dbf7fd'; //'#d4d4d4';\n      }\n\n      if (index === center) {\n        //TODO: No magic numbers\n        colour = '#a4eefc';\n      }\n\n      return {\n        //img: `/images/${emoji.hexcode}.svg`, \n        img: b64,\n        key: index,\n        onClick: e => handleClick(index, emoji, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      };\n    });\n    return tileObj;\n  }\n\n  const handleClick = (id, emoji, e) => {\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id); //Update emoji history:\n\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis);\n    var blendObj;\n    let demoBlends = [];\n    fetch(\"http://localhost:9000/emojiblends/\" + emoji.hexcode).then(res => res.json()).then(data => blendObj = data).then(() => demoBlends = blendObj.relatedEmoji);\n    var obj;\n    var newTileObj;\n    fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => newTileObj = newTileObject(obj, demoBlends)).then(() => setEmojiTiles(newTileObj));\n  };\n\n  function setupGrid() {\n    var obj; // var iniTileObj = newTileObject(defaultEmojis);\n\n    fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => iniTileObj = newTileObject(obj)).then(() => setEmojiTiles(iniTileObj));\n  }\n\n  window.addEventListener('DOMContentLoaded', event => {\n    setupGrid();\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TiledHexagons, {\n      tileSideLengths: 60,\n      tileGap: 4,\n      tileBorderRadii: 9,\n      maxHorizontal: maxHorizontal,\n      tileTextStyles: {\n        fontFamily: 'Source Sans Pro',\n        fontSize: '68px'\n      },\n      tiles: emojiTiles,\n      onLoad: () => handleClick()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Hexgrid, \"UmqgXtnRhHxUOsrV1qZ5MYNowxc=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["TiledHexagons","useState","useEffect","React","Component","openmoji","require","mergeImages","Canvas","Image","numEmojis","maxHorizontal","center","Math","ceil","lenHistory","defaultEmojis","index","push","openmojis","count","Hexgrid","selectedEmojis","setSelectedEmojis","iniTileObj","newTileObject","emojiTiles","setEmojiTiles","_emojis","blends","emojis","length","blendimage","then","b64","i","tileObj","map","emoji","colour","img","key","onClick","e","handleClick","fill","styles","normal","hover","active","id","console","log","hexcode","newEmojis","blendObj","demoBlends","fetch","res","json","data","relatedEmoji","obj","newTileObj","toString","JSON","parse","setupGrid","window","addEventListener","event","fontFamily","fontSize"],"mappings":"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","sourcesContent":["import { TiledHexagons } from 'tiled-hexagons'\nimport { useState, useEffect } from 'react'\nimport React, { Component } from 'react';\n\nconst openmoji = require('openmoji');\n\nconst mergeImages = require('merge-images');\nconst { Canvas, Image } = require('canvas');\n\nconst numEmojis = 228;\n\nconst maxHorizontal = 19;\nconst center = Math.ceil(numEmojis/2)-3;\nconst lenHistory = Math.ceil(maxHorizontal/2)-1;\nconst defaultEmojis = [];\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073]);\n}\n\n//3073\nvar count = 1;\nconst Hexgrid = () => {\n  const [selectedEmojis, setSelectedEmojis] = useState([]);\n  var iniTileObj = newTileObject(defaultEmojis);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj)\n\n  function newTileObject(_emojis, blends){\n    let emojis = _emojis;\n\n    //For testing, sets one hex to blend\n    if(blends != null && blends.length > 1){\n      emojis[57] = blends[0];\n    }\n\n    var blendimage;\n    mergeImages([`/images/1F3CD.svg`, `/images/1F3F0.svg`], {\n      Canvas: Canvas,\n      Image: Image\n    })\n    .then(b64 => blendimage = b64);\n\n    if (selectedEmojis.length >= 1) {\n      for (let i = 0; i < selectedEmojis.length; i++) {\n        if(center-i > 49){\n          emojis[center-i] = selectedEmojis[selectedEmojis.length-1-i];\n        }\n      }\n    }\n    const tileObj = emojis.map((emoji, index) => {\n      let colour = 'white';//emojiFills[index].toString();\n      //console.log(selectedEmojis.length);\n      if(index <= (center-1) && index >= (center-lenHistory)){\n        colour = '#dbf7fd';//'#d4d4d4';\n      }\n      if(index === center){ //TODO: No magic numbers\n        colour = '#a4eefc';\n      }\n\n        return { \n          //img: `/images/${emoji.hexcode}.svg`, \n          img: b64,\n          key: index,\n          onClick: (e) => handleClick(index, emoji, e),\n          fill: '',\n          styles: {\n            normal: {\n                fill: colour\n            },\n            hover: {\n              fill: '#6cc7da'\n            },\n            active: {\n              fill: '#779df1'\n            }\n        }\n        }\n      })\n\n      return tileObj;\n  }\n\n  const handleClick = (id, emoji, e) => {\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n\n    //Update emoji history:\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis);\n    \n    var blendObj;\n    let demoBlends = [];\n    fetch(\"http://localhost:9000/emojiblends/\" + emoji.hexcode)\n    .then(res => res.json())\n    .then(data => blendObj = data)\n    .then(() => demoBlends = blendObj.relatedEmoji)\n\n    var obj;\n    var newTileObj;\n    fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString())\n    .then(res => res.json())\n    .then(data => obj = JSON.parse(data))\n    .then(() => newTileObj = newTileObject(obj, demoBlends))\n    .then(() => setEmojiTiles(newTileObj))\n  }\n\n  function setupGrid(){\n    var obj;\n    // var iniTileObj = newTileObject(defaultEmojis);\n      \n    fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString())\n      .then(res => res.json())\n      .then(data => obj = JSON.parse(data))\n      .then(() => iniTileObj = newTileObject(obj))\n      .then(() => setEmojiTiles(iniTileObj))\n  }\n\n  window.addEventListener('DOMContentLoaded', (event) => {\n    setupGrid();\n});\n\n    return ( \n        <>\n            <TiledHexagons\n            tileSideLengths={60}\n            tileGap={4}\n            tileBorderRadii={9}\n            maxHorizontal={maxHorizontal}\n            tileTextStyles={{\n            fontFamily: 'Source Sans Pro',\n            fontSize: '68px',\n            }}\n            tiles={emojiTiles}\n            onLoad={() => handleClick()}\n            />\n    </>\n    );\n}\n \nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}