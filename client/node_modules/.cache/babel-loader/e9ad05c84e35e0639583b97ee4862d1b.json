{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { Hexagon, TiledHexagons } from 'tiled-hexagons';\nimport { useState } from 'react';\nimport { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nconst Hexgrid = () => {\n  _s();\n\n  const selectedEmojis = [];\n  var numEmojis = 69; //69\n\n  const handleClick = (id, emoji, e) => {\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n    console.log(e.target);\n    console.log(e.target.fill); //selectedEmojis.push(emoji);\n\n    setEmojiTiles(emojis.map((emoji, index) => {\n      return {\n        img: `/images/${emoji.hexcode}.svg`,\n        key: index,\n        onClick: e => handleClick(index, emoji, e),\n        fill: 'red'\n      };\n    }));\n  };\n\n  let numbers = [];\n\n  while (selectedEmojis.length + numbers.length < numEmojis) {\n    var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n    if (numbers.indexOf(r) === -1) numbers.push(r);\n  }\n\n  let emojis = [];\n\n  for (let index = 0; index < numbers.length; index++) {\n    emojis.push(openmoji.openmojis[numbers[index]]);\n  }\n\n  emojis = selectedEmojis.concat(emojis);\n  const [emojiTiles, setEmojiTiles] = useState(emojis.map((emoji, index) => {\n    return {\n      img: `/images/${emoji.hexcode}.svg`,\n      key: index,\n      onClick: e => handleClick(index, emoji, e),\n      fill: 'white'\n    };\n  })); //emojis[0].fill = \"red\";\n\n  return /*#__PURE__*/_jsxDEV(TiledHexagons, {\n    tileSideLengths: 60,\n    tileGap: 4,\n    tileBorderRadii: 9,\n    maxHorizontal: 12,\n    tileTextStyles: {\n      fontFamily: 'Source Sans Pro',\n      fontSize: '68px'\n    },\n    tiles: emojiTiles,\n    tileStyles: {\n      normal: {\n        fill: 'red'\n      },\n      hover: {\n        fill: 'blue'\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Hexgrid, \"cuYC/xWMgPicWocEmLjf8Eg/49A=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["Hexagon","TiledHexagons","useState","Component","openmoji","require","Hexgrid","selectedEmojis","numEmojis","handleClick","id","emoji","e","console","log","hexcode","target","fill","setEmojiTiles","emojis","map","index","img","key","onClick","numbers","length","r","Math","floor","random","openmojis","indexOf","push","concat","emojiTiles","fontFamily","fontSize","normal","hover"],"mappings":"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","sourcesContent":["import { Hexagon, TiledHexagons } from 'tiled-hexagons'\nimport { useState } from 'react'\nimport { Component } from 'react'\n\nconst openmoji = require('openmoji');\n\nconst Hexgrid = () => {\n\n\n    const selectedEmojis = [];\n    var numEmojis = 69; //69\n\n\n    const handleClick = (id, emoji, e) => {\n        console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n        console.log(e.target);\n        console.log(e.target.fill);\n        //selectedEmojis.push(emoji);\n        setEmojiTiles(\n            emojis.map((emoji, index) => {\n                return { \n                  img: `/images/${emoji.hexcode}.svg`, \n                  key: index,\n                  onClick: (e) => handleClick(index, emoji, e),\n                  fill: 'red'\n                }\n              })\n        )\n    }\n    \n\n    let numbers = [];\n    while(selectedEmojis.length + numbers.length < numEmojis){\n        var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n        if(numbers.indexOf(r) === -1) numbers.push(r);\n    }\n    let emojis = [];\n\n    for (let index = 0; index < numbers.length; index++) {\n        emojis.push(openmoji.openmojis[numbers[index]]);\n    }    \n\n\n    emojis = selectedEmojis.concat(emojis); \n    const [emojiTiles, setEmojiTiles] = useState(\n        emojis.map((emoji, index) => {\n            return { \n              img: `/images/${emoji.hexcode}.svg`, \n              key: index,\n              onClick: (e) => handleClick(index, emoji, e),\n              fill: 'white'\n            }\n          })\n    )\n    //emojis[0].fill = \"red\";\n    \n    return (  \n        <TiledHexagons\n      tileSideLengths={60}\n      tileGap={4}\n      tileBorderRadii={9}\n      maxHorizontal={12}\n      tileTextStyles={{\n      fontFamily: 'Source Sans Pro',\n      fontSize: '68px',\n      }}\n      tiles={emojiTiles}\n      tileStyles={{\n        normal: {\n            fill: 'red'\n        },\n        hover: {\n            fill: 'blue'\n        }\n    }}\n\n    />\n    );\n}\n \nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}