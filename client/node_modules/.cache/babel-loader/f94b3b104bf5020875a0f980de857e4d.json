{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { TiledHexagons } from 'tiled-hexagons';\nimport { useState, useEffect } from 'react';\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nconst numEmojis = 386;\nconst maxHorizontal = 17;\nconst center = Math.ceil(numEmojis / 2) - 1;\nconst defaultEmojis = [];\n\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073]);\n} //3073\n\n\nvar count = 1;\n\nconst Hexgrid = () => {\n  _s();\n\n  const [selectedEmojis, setSelectedEmojis] = useState([]);\n  var iniTileObj = newTileObject(defaultEmojis);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj);\n\n  function newTileObject(_emojis, blends) {\n    let emojis = _emojis;\n\n    if (blends != null && blends.length > 1) {\n      emojis[57] = blends[0];\n    }\n\n    if (selectedEmojis.length >= 1) {\n      for (let i = 0; i < selectedEmojis.length; i++) {\n        if (center - i > 49) {\n          emojis[center - i] = selectedEmojis[selectedEmojis.length - 1 - i];\n        }\n      }\n    }\n\n    const tileObj = emojis.map((emoji, index) => {\n      let colour = 'white'; //emojiFills[index].toString();\n      //console.log(selectedEmojis.length);\n\n      if (index <= center - 1 && index >= 50) {\n        colour = '#dbf7fd'; //'#d4d4d4';\n      }\n\n      if (index === center) {\n        //TODO: No magic numbers\n        colour = '#a4eefc';\n      }\n\n      return {\n        img: `/images/${emoji.hexcode}.svg`,\n        key: index,\n        onClick: e => handleClick(index, emoji, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      };\n    });\n    return tileObj;\n  }\n\n  const handleClick = (id, emoji, e) => {\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id); //Update emoji history:\n\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis);\n    var blendObj;\n    let demoBlends = [];\n    fetch(\"http://localhost:9000/emojiblends/\" + emoji.hexcode).then(res => res.json()).then(data => blendObj = data).then(() => demoBlends = blendObj.relatedEmoji);\n    var obj;\n    var newTileObj;\n    fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => newTileObj = newTileObject(obj, demoBlends)).then(() => setEmojiTiles(newTileObj));\n  };\n\n  function setupGrid() {\n    var obj; // var iniTileObj = newTileObject(defaultEmojis);\n\n    fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => iniTileObj = newTileObject(obj)).then(() => setEmojiTiles(iniTileObj));\n  }\n\n  window.addEventListener('DOMContentLoaded', event => {\n    setupGrid();\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TiledHexagons, {\n      tileSideLengths: 60,\n      tileGap: 4,\n      tileBorderRadii: 9,\n      maxHorizontal: maxHorizontal,\n      tileTextStyles: {\n        fontFamily: 'Source Sans Pro',\n        fontSize: '68px'\n      },\n      tiles: emojiTiles,\n      onLoad: () => handleClick()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Hexgrid, \"UmqgXtnRhHxUOsrV1qZ5MYNowxc=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["TiledHexagons","useState","useEffect","React","Component","openmoji","require","numEmojis","maxHorizontal","center","Math","ceil","defaultEmojis","index","push","openmojis","count","Hexgrid","selectedEmojis","setSelectedEmojis","iniTileObj","newTileObject","emojiTiles","setEmojiTiles","_emojis","blends","emojis","length","i","tileObj","map","emoji","colour","img","hexcode","key","onClick","e","handleClick","fill","styles","normal","hover","active","id","console","log","newEmojis","blendObj","demoBlends","fetch","then","res","json","data","relatedEmoji","obj","newTileObj","toString","JSON","parse","setupGrid","window","addEventListener","event","fontFamily","fontSize"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,gBAA9B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAEA,MAAMC,SAAS,GAAG,GAAlB;AAEA,MAAMC,aAAa,GAAG,EAAtB;AACA,MAAMC,MAAM,GAAGC,IAAI,CAACC,IAAL,CAAUJ,SAAS,GAAC,CAApB,IAAuB,CAAtC;AAEA,MAAMK,aAAa,GAAG,EAAtB;;AACA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGN,SAA5B,EAAuCM,KAAK,EAA5C,EAAgD;AAC9CD,EAAAA,aAAa,CAACE,IAAd,CAAmBT,QAAQ,CAACU,SAAT,CAAmB,IAAnB,CAAnB;AACD,C,CAED;;;AACA,IAAIC,KAAK,GAAG,CAAZ;;AACA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsClB,QAAQ,CAAC,EAAD,CAApD;AACA,MAAImB,UAAU,GAAGC,aAAa,CAACT,aAAD,CAA9B;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BtB,QAAQ,CAACmB,UAAD,CAA5C;;AAEA,WAASC,aAAT,CAAuBG,OAAvB,EAAgCC,MAAhC,EAAuC;AACrC,QAAIC,MAAM,GAAGF,OAAb;;AAEA,QAAGC,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAACE,MAAP,GAAgB,CAArC,EAAuC;AACrCD,MAAAA,MAAM,CAAC,EAAD,CAAN,GAAaD,MAAM,CAAC,CAAD,CAAnB;AACD;;AAED,QAAIP,cAAc,CAACS,MAAf,IAAyB,CAA7B,EAAgC;AAC9B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,cAAc,CAACS,MAAnC,EAA2CC,CAAC,EAA5C,EAAgD;AAC9C,YAAGnB,MAAM,GAACmB,CAAP,GAAW,EAAd,EAAiB;AACfF,UAAAA,MAAM,CAACjB,MAAM,GAACmB,CAAR,CAAN,GAAmBV,cAAc,CAACA,cAAc,CAACS,MAAf,GAAsB,CAAtB,GAAwBC,CAAzB,CAAjC;AACD;AACF;AACF;;AACD,UAAMC,OAAO,GAAGH,MAAM,CAACI,GAAP,CAAW,CAACC,KAAD,EAAQlB,KAAR,KAAkB;AAC3C,UAAImB,MAAM,GAAG,OAAb,CAD2C,CACtB;AACrB;;AACA,UAAGnB,KAAK,IAAKJ,MAAM,GAAC,CAAjB,IAAuBI,KAAK,IAAI,EAAnC,EAAsC;AACpCmB,QAAAA,MAAM,GAAG,SAAT,CADoC,CACjB;AACpB;;AACD,UAAGnB,KAAK,KAAKJ,MAAb,EAAoB;AAAE;AACpBuB,QAAAA,MAAM,GAAG,SAAT;AACD;;AAEC,aAAO;AACLC,QAAAA,GAAG,EAAG,WAAUF,KAAK,CAACG,OAAQ,MADzB;AAELC,QAAAA,GAAG,EAAEtB,KAFA;AAGLuB,QAAAA,OAAO,EAAGC,CAAD,IAAOC,WAAW,CAACzB,KAAD,EAAQkB,KAAR,EAAeM,CAAf,CAHtB;AAILE,QAAAA,IAAI,EAAE,EAJD;AAKLC,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAE;AACJF,YAAAA,IAAI,EAAEP;AADF,WADF;AAINU,UAAAA,KAAK,EAAE;AACLH,YAAAA,IAAI,EAAE;AADD,WAJD;AAONI,UAAAA,MAAM,EAAE;AACNJ,YAAAA,IAAI,EAAE;AADA;AAPF;AALH,OAAP;AAiBD,KA3Ba,CAAhB;AA6BE,WAAOV,OAAP;AACH;;AAED,QAAMS,WAAW,GAAG,CAACM,EAAD,EAAKb,KAAL,EAAYM,CAAZ,KAAkB;AACpCQ,IAAAA,OAAO,CAACC,GAAR,CAAYf,KAAK,CAACG,OAAN,GAAgB,sBAAhB,GAAyCU,EAArD,EADoC,CAGpC;;AACA,QAAIG,SAAS,GAAG7B,cAAhB;AACA6B,IAAAA,SAAS,CAACjC,IAAV,CAAeiB,KAAf;AACAZ,IAAAA,iBAAiB,CAAC4B,SAAD,CAAjB;AAEA,QAAIC,QAAJ;AACA,QAAIC,UAAU,GAAG,EAAjB;AACAC,IAAAA,KAAK,CAAC,uCAAuCnB,KAAK,CAACG,OAA9C,CAAL,CACCiB,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,IAAI,IAAIN,QAAQ,GAAGM,IAFzB,EAGCH,IAHD,CAGM,MAAMF,UAAU,GAAGD,QAAQ,CAACO,YAHlC;AAKA,QAAIC,GAAJ;AACA,QAAIC,UAAJ;AACAP,IAAAA,KAAK,CAAC,8CAA8C3C,SAAS,CAACmD,QAAV,EAA/C,CAAL,CACCP,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,IAAI,IAAIE,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAWN,IAAX,CAFpB,EAGCH,IAHD,CAGM,MAAMM,UAAU,GAAGpC,aAAa,CAACmC,GAAD,EAAMP,UAAN,CAHtC,EAICE,IAJD,CAIM,MAAM5B,aAAa,CAACkC,UAAD,CAJzB;AAKD,GAtBD;;AAwBA,WAASI,SAAT,GAAoB;AAClB,QAAIL,GAAJ,CADkB,CAElB;;AAEAN,IAAAA,KAAK,CAAC,8CAA8C3C,SAAS,CAACmD,QAAV,EAA/C,CAAL,CACGP,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,IAAI,IAAIE,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAWN,IAAX,CAFtB,EAGGH,IAHH,CAGQ,MAAM/B,UAAU,GAAGC,aAAa,CAACmC,GAAD,CAHxC,EAIGL,IAJH,CAIQ,MAAM5B,aAAa,CAACH,UAAD,CAJ3B;AAKD;;AAED0C,EAAAA,MAAM,CAACC,gBAAP,CAAwB,kBAAxB,EAA6CC,KAAD,IAAW;AACrDH,IAAAA,SAAS;AACZ,GAFC;AAIE,sBACI;AAAA,2BACI,QAAC,aAAD;AACA,MAAA,eAAe,EAAE,EADjB;AAEA,MAAA,OAAO,EAAE,CAFT;AAGA,MAAA,eAAe,EAAE,CAHjB;AAIA,MAAA,aAAa,EAAErD,aAJf;AAKA,MAAA,cAAc,EAAE;AAChByD,QAAAA,UAAU,EAAE,iBADI;AAEhBC,QAAAA,QAAQ,EAAE;AAFM,OALhB;AASA,MAAA,KAAK,EAAE5C,UATP;AAUA,MAAA,MAAM,EAAE,MAAMgB,WAAW;AAVzB;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAgBH,CA1GD;;GAAMrB,O;;KAAAA,O;AA4GN,eAAeA,OAAf","sourcesContent":["import { TiledHexagons } from 'tiled-hexagons'\nimport { useState, useEffect } from 'react'\nimport React, { Component } from 'react';\n\nconst openmoji = require('openmoji');\n\nconst numEmojis = 386;\n\nconst maxHorizontal = 17;\nconst center = Math.ceil(numEmojis/2)-1;\n\nconst defaultEmojis = [];\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073]);\n}\n\n//3073\nvar count = 1;\nconst Hexgrid = () => {\n  const [selectedEmojis, setSelectedEmojis] = useState([]);\n  var iniTileObj = newTileObject(defaultEmojis);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj)\n\n  function newTileObject(_emojis, blends){\n    let emojis = _emojis;\n\n    if(blends != null && blends.length > 1){\n      emojis[57] = blends[0];\n    }\n\n    if (selectedEmojis.length >= 1) {\n      for (let i = 0; i < selectedEmojis.length; i++) {\n        if(center-i > 49){\n          emojis[center-i] = selectedEmojis[selectedEmojis.length-1-i];\n        }\n      }\n    }\n    const tileObj = emojis.map((emoji, index) => {\n      let colour = 'white';//emojiFills[index].toString();\n      //console.log(selectedEmojis.length);\n      if(index <= (center-1) && index >= 50){\n        colour = '#dbf7fd';//'#d4d4d4';\n      }\n      if(index === center){ //TODO: No magic numbers\n        colour = '#a4eefc';\n      }\n\n        return { \n          img: `/images/${emoji.hexcode}.svg`, \n          key: index,\n          onClick: (e) => handleClick(index, emoji, e),\n          fill: '',\n          styles: {\n            normal: {\n                fill: colour\n            },\n            hover: {\n              fill: '#6cc7da'\n            },\n            active: {\n              fill: '#779df1'\n            }\n        }\n        }\n      })\n\n      return tileObj;\n  }\n\n  const handleClick = (id, emoji, e) => {\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n\n    //Update emoji history:\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis);\n    \n    var blendObj;\n    let demoBlends = [];\n    fetch(\"http://localhost:9000/emojiblends/\" + emoji.hexcode)\n    .then(res => res.json())\n    .then(data => blendObj = data)\n    .then(() => demoBlends = blendObj.relatedEmoji)\n\n    var obj;\n    var newTileObj;\n    fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString())\n    .then(res => res.json())\n    .then(data => obj = JSON.parse(data))\n    .then(() => newTileObj = newTileObject(obj, demoBlends))\n    .then(() => setEmojiTiles(newTileObj))\n  }\n\n  function setupGrid(){\n    var obj;\n    // var iniTileObj = newTileObject(defaultEmojis);\n  \n    fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString())\n      .then(res => res.json())\n      .then(data => obj = JSON.parse(data))\n      .then(() => iniTileObj = newTileObject(obj))\n      .then(() => setEmojiTiles(iniTileObj))\n  }\n\n  window.addEventListener('DOMContentLoaded', (event) => {\n    setupGrid();\n});\n\n    return ( \n        <>\n            <TiledHexagons\n            tileSideLengths={60}\n            tileGap={4}\n            tileBorderRadii={9}\n            maxHorizontal={maxHorizontal}\n            tileTextStyles={{\n            fontFamily: 'Source Sans Pro',\n            fontSize: '68px',\n            }}\n            tiles={emojiTiles}\n            onLoad={() => handleClick()}\n            />\n    </>\n    );\n}\n \nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}