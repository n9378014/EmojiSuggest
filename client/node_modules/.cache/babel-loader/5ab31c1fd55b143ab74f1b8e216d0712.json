{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { Hexagon, TiledHexagons } from 'tiled-hexagons';\nimport { useState, useEffect } from 'react';\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nconst defaultEmojis = [];\n\nfor (let index = 0; index < 113; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073]);\n} //3073\n\n\nconst Hexgrid = () => {\n  _s();\n\n  const [selectedEmojis, setSelectedEmojis] = useState([]);\n  var iniTileObj = newTileObject(defaultEmojis);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj); //setupGrid();\n  // function generateEmojis() {\n  //   var numEmojis = 113; //id 56 is the center\n  //   let numbers = [];\n  //   let emojis = [];\n  //   while (numbers.length < numEmojis) {\n  //     var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n  //     if (numbers.indexOf(r) === -1) numbers.push(r);\n  //   }\n  //   for (let index = 0; index < numbers.length; index++) {\n  //     emojis.push(openmoji.openmojis[numbers[index]]);\n  //   }\n  //   console.log(\"USED GENERATE EMOJIS: \");\n  //   console.log(emojis);\n  //   return emojis;   // The function returns the product of p1 and p2\n  // }\n\n  function newTileObject(_emojis) {\n    let emojis = _emojis;\n    let emojiFills = [];\n\n    for (let index = 0; index < emojis.length; index++) {\n      if (index === 56) {\n        emojiFills.push('#a4eefc');\n      } else {\n        emojiFills.push('white');\n      }\n    }\n\n    if (selectedEmojis.length >= 1) {\n      for (let i = 0; i < selectedEmojis.length; i++) {\n        if (56 - i > 49) {\n          emojis[56 - i] = selectedEmojis[selectedEmojis.length - 1 - i];\n          emojiFills[56 - i] = '#a4eefc';\n        }\n      }\n    }\n\n    const tileObj = emojis.map((emoji, index) => {\n      let colour = 'white'; //emojiFills[index].toString();\n\n      console.log(selectedEmojis.length);\n\n      if (selectedEmojis.length == 1 && index == 56) {\n        colour = '#a4eefc';\n      } else if (index > selectedEmojis.length - 1 && index < 100) {\n        //console.log(\"Winner! \" + index.toString());\n        colour = '#a4eefc';\n      }\n\n      return {\n        img: `/images/${emoji.hexcode}.svg`,\n        key: index,\n        onClick: e => handleClick(index, emoji, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      };\n    });\n    return tileObj;\n  }\n\n  const handleClick = (id, emoji, e) => {\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id); // fetch(\"http://localhost:9000/emojiblends/\" + openmoji.openmojis[99].hexcode)\n    // .then(res => res.json())\n    // .then(data => console.log(data.hexcode))\n    //Update emoji history:\n\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis);\n    var obj;\n    var newTileObj;\n    fetch(\"http://localhost:9000/randomemojis?limit=113\").then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => newTileObj = newTileObject(obj)).then(() => setEmojiTiles(newTileObj));\n  };\n\n  function setupGrid() {\n    var obj; // var iniTileObj = newTileObject(defaultEmojis);\n\n    fetch(\"http://localhost:9000/randomemojis?limit=3\").then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => iniTileObj = newTileObject(obj)).then(() => setEmojiTiles(iniTileObj)).then(() => console.log(\"INITIAL WAVE.\"));\n  } // fetch(\"http://localhost:9000/randomemojis/\")\n  // .then(res => res.json())\n  // .then(data => obj = JSON.parse(data))\n  // .then(() => iniTileObj = newTileObject(obj))\n  // .then(() => setEmojiTiles(iniTileObj))\n  // .then(() => console.log(\"INITIAL WAVE.\"))\n  //const iniTileObj = newTileObject(generateEmojis());\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TiledHexagons, {\n      tileSideLengths: 60,\n      tileGap: 4,\n      tileBorderRadii: 9,\n      maxHorizontal: 13,\n      tileTextStyles: {\n        fontFamily: 'Source Sans Pro',\n        fontSize: '68px'\n      },\n      tiles: emojiTiles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Hexgrid, \"UmqgXtnRhHxUOsrV1qZ5MYNowxc=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["Hexagon","TiledHexagons","useState","useEffect","React","Component","openmoji","require","defaultEmojis","index","push","openmojis","Hexgrid","selectedEmojis","setSelectedEmojis","iniTileObj","newTileObject","emojiTiles","setEmojiTiles","_emojis","emojis","emojiFills","length","i","tileObj","map","emoji","colour","console","log","img","hexcode","key","onClick","e","handleClick","fill","styles","normal","hover","active","id","newEmojis","obj","newTileObj","fetch","then","res","json","data","JSON","parse","setupGrid","fontFamily","fontSize"],"mappings":"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","sourcesContent":["import { Hexagon, TiledHexagons } from 'tiled-hexagons'\nimport { useState, useEffect } from 'react'\nimport React, { Component } from 'react';\n\nconst openmoji = require('openmoji');\n\nconst defaultEmojis = [];\nfor (let index = 0; index < 113; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073]);\n}\n\n//3073\n\nconst Hexgrid = () => {\n  const [selectedEmojis, setSelectedEmojis] = useState([]);\n  var iniTileObj = newTileObject(defaultEmojis);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj)\n\n  //setupGrid();\n  // function generateEmojis() {\n\n  //   var numEmojis = 113; //id 56 is the center\n\n  //   let numbers = [];\n  //   let emojis = [];\n\n  //   while (numbers.length < numEmojis) {\n  //     var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n  //     if (numbers.indexOf(r) === -1) numbers.push(r);\n  //   }\n\n  //   for (let index = 0; index < numbers.length; index++) {\n  //     emojis.push(openmoji.openmojis[numbers[index]]);\n  //   }\n  //   console.log(\"USED GENERATE EMOJIS: \");\n  //   console.log(emojis);\n\n  //   return emojis;   // The function returns the product of p1 and p2\n  // }\n\n  function newTileObject(_emojis){\n    let emojis = _emojis;\n    let emojiFills = [];\n    for (let index = 0; index < emojis.length; index++) {\n      if (index === 56) {\n        emojiFills.push('#a4eefc');\n      } else {\n        emojiFills.push('white');\n      }\n    }\n\n    if (selectedEmojis.length >= 1) {\n      for (let i = 0; i < selectedEmojis.length; i++) {\n        if(56-i > 49){\n          emojis[56-i] = selectedEmojis[selectedEmojis.length-1-i];\n          emojiFills[56-i] = '#a4eefc';\n        }\n      }\n    }\n    const tileObj = emojis.map((emoji, index) => {\n      let colour = 'white';//emojiFills[index].toString();\n      console.log(selectedEmojis.length);\n      if(selectedEmojis.length == 1 && index == 56){\n        colour = '#a4eefc';\n      }\n      else if(index > (selectedEmojis.length-1) && index < 100){\n        //console.log(\"Winner! \" + index.toString());\n        colour = '#a4eefc';\n      }\n    \n        return { \n          img: `/images/${emoji.hexcode}.svg`, \n          key: index,\n          onClick: (e) => handleClick(index, emoji, e),\n          fill: '',\n          styles: {\n            normal: {\n                fill: colour\n            },\n            hover: {\n              fill: '#6cc7da'\n            },\n            active: {\n              fill: '#779df1'\n            }\n        }\n        }\n      })\n\n      return tileObj;\n  }\n\n  const handleClick = (id, emoji, e) => {\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n\n    // fetch(\"http://localhost:9000/emojiblends/\" + openmoji.openmojis[99].hexcode)\n    // .then(res => res.json())\n    // .then(data => console.log(data.hexcode))\n\n    //Update emoji history:\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis);\n    \n    var obj;\n    var newTileObj;\n    fetch(\"http://localhost:9000/randomemojis?limit=113\")\n    .then(res => res.json())\n    .then(data => obj = JSON.parse(data))\n    .then(() => newTileObj = newTileObject(obj))\n    .then(() => setEmojiTiles(newTileObj))\n  }\n\n  function setupGrid(){\n    var obj;\n    // var iniTileObj = newTileObject(defaultEmojis);\n  \n    fetch(\"http://localhost:9000/randomemojis?limit=3\")\n      .then(res => res.json())\n      .then(data => obj = JSON.parse(data))\n      .then(() => iniTileObj = newTileObject(obj))\n      .then(() => setEmojiTiles(iniTileObj))\n      .then(() => console.log(\"INITIAL WAVE.\"))\n  }\n\n  // fetch(\"http://localhost:9000/randomemojis/\")\n  // .then(res => res.json())\n  // .then(data => obj = JSON.parse(data))\n  // .then(() => iniTileObj = newTileObject(obj))\n  // .then(() => setEmojiTiles(iniTileObj))\n  // .then(() => console.log(\"INITIAL WAVE.\"))\n\n  //const iniTileObj = newTileObject(generateEmojis());\n\n    return ( \n        <>\n            <TiledHexagons\n            tileSideLengths={60}\n            tileGap={4}\n            tileBorderRadii={9}\n            maxHorizontal={13}\n            tileTextStyles={{\n            fontFamily: 'Source Sans Pro',\n            fontSize: '68px',\n            }}\n            tiles={emojiTiles}\n            />\n    </>\n    );\n}\n \nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}