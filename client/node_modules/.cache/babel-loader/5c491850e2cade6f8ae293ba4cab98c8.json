{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { Hexagon, TiledHexagons } from 'tiled-hexagons';\nimport { useState } from 'react';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nclass Grid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colour: 'purple'\n    };\n  }\n\n  selectHex() {\n    if (this.state.colour === 'red') {\n      this.setState({\n        colour: 'blue'\n      });\n    } else {\n      this.setState({\n        colour: 'red'\n      });\n    }\n  }\n\n  render() {\n    let {\n      colour\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Hexagon, {\n      sideLength: 80,\n      fill: colour.toString(),\n      onClick: this.selectHex.bind(this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst Hexgrid = () => {\n  _s();\n\n  const selectedEmojis = [];\n  var numEmojis = 113; //id 56 is the center\n\n  const handleClick = (id, emoji, e) => {\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id); //selectedEmojis.push(emoji);\n\n    setEmojiTiles(emojis.map((emoji, index) => {\n      return {\n        img: `/images/${emoji.hexcode}.svg`,\n        key: index,\n        onClick: e => handleClick(index, emoji, e),\n        fill: '#70cbff'\n      };\n    }));\n  };\n\n  let numbers = [];\n\n  while (selectedEmojis.length + numbers.length < numEmojis) {\n    var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n    if (numbers.indexOf(r) === -1) numbers.push(r);\n  }\n\n  let emojis = [];\n\n  for (let index = 0; index < numbers.length; index++) {\n    emojis.push(openmoji.openmojis[numbers[index]]);\n  }\n\n  emojis = selectedEmojis.concat(emojis);\n  emojiFills = [];\n\n  for (let index = 0; index < emojis.length; index++) {\n    emojiFills[index] = 'red';\n  }\n\n  const [emojiTiles, setEmojiTiles] = useState(emojis.map((emoji, index) => {\n    return {\n      img: `/images/${emoji.hexcode}.svg`,\n      key: index,\n      onClick: e => handleClick(index, emoji, e),\n      fill: emojiFills[index]\n    };\n  })); //emojis[0].fill = \"red\";\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TiledHexagons, {\n      tileSideLengths: 60,\n      tileGap: 4,\n      tileBorderRadii: 9,\n      maxHorizontal: 13,\n      tileTextStyles: {\n        fontFamily: 'Source Sans Pro',\n        fontSize: '68px'\n      },\n      tiles: emojiTiles,\n      tileStyles: {\n        fill: 'blue',\n        normal: {\n          fill: 'red'\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Hexgrid, \"7tsfa9cElqdFTDBDD+qx7E6PKlY=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["Hexagon","TiledHexagons","useState","React","openmoji","require","Grid","Component","constructor","props","state","colour","selectHex","setState","render","toString","bind","Hexgrid","selectedEmojis","numEmojis","handleClick","id","emoji","e","console","log","hexcode","setEmojiTiles","emojis","map","index","img","key","onClick","fill","numbers","length","r","Math","floor","random","openmojis","indexOf","push","concat","emojiFills","emojiTiles","fontFamily","fontSize","normal"],"mappings":";;;AAAA,SAASA,OAAT,EAAkBC,aAAlB,QAAuC,gBAAvC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAEA,MAAMC,IAAN,SAAmBH,KAAK,CAACI,SAAzB,CAAmC;AAC/BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE;AADG,KAAb;AAGD;;AAEDC,EAAAA,SAAS,GAAG;AACR,QAAI,KAAKF,KAAL,CAAWC,MAAX,KAAsB,KAA1B,EAAiC;AAC/B,WAAKE,QAAL,CAAc;AAAEF,QAAAA,MAAM,EAAE;AAAV,OAAd;AACH,KAFC,MAEK;AACH,WAAKE,QAAL,CAAc;AAAEF,QAAAA,MAAM,EAAE;AAAV,OAAd;AACH;AACF;;AAEHG,EAAAA,MAAM,GAAG;AACL,QAAI;AAAEH,MAAAA;AAAF,QAAa,KAAKD,KAAtB;AAIA,wBACI,QAAC,OAAD;AACE,MAAA,UAAU,EAAE,EADd;AAEE,MAAA,IAAI,EAAEC,MAAM,CAACI,QAAP,EAFR;AAGE,MAAA,OAAO,EAAE,KAAKH,SAAL,CAAeI,IAAf,CAAoB,IAApB;AAHX;AAAA;AAAA;AAAA;AAAA,YADJ;AAKY;;AA1Be;;AA8BnC,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB,QAAMC,cAAc,GAAG,EAAvB;AACA,MAAIC,SAAS,GAAG,GAAhB,CAFkB,CAEG;;AAErB,QAAMC,WAAW,GAAG,CAACC,EAAD,EAAKC,KAAL,EAAYC,CAAZ,KAAkB;AAClCC,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,OAAN,GAAgB,sBAAhB,GAAyCL,EAArD,EADkC,CAElC;;AACAM,IAAAA,aAAa,CACTC,MAAM,CAACC,GAAP,CAAW,CAACP,KAAD,EAAQQ,KAAR,KAAkB;AACzB,aAAO;AACLC,QAAAA,GAAG,EAAG,WAAUT,KAAK,CAACI,OAAQ,MADzB;AAELM,QAAAA,GAAG,EAAEF,KAFA;AAGLG,QAAAA,OAAO,EAAGV,CAAD,IAAOH,WAAW,CAACU,KAAD,EAAQR,KAAR,EAAeC,CAAf,CAHtB;AAILW,QAAAA,IAAI,EAAE;AAJD,OAAP;AAMD,KAPH,CADS,CAAb;AAUH,GAbD;;AAgBA,MAAIC,OAAO,GAAG,EAAd;;AACA,SAAMjB,cAAc,CAACkB,MAAf,GAAwBD,OAAO,CAACC,MAAhC,GAAyCjB,SAA/C,EAAyD;AACrD,QAAIkB,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBpC,QAAQ,CAACqC,SAAT,CAAmBL,MAAnB,GAA4B,CAA7C,CAAX,CAAR;AACA,QAAGD,OAAO,CAACO,OAAR,CAAgBL,CAAhB,MAAuB,CAAC,CAA3B,EAA8BF,OAAO,CAACQ,IAAR,CAAaN,CAAb;AACjC;;AACD,MAAIT,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAIE,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGK,OAAO,CAACC,MAApC,EAA4CN,KAAK,EAAjD,EAAqD;AACjDF,IAAAA,MAAM,CAACe,IAAP,CAAYvC,QAAQ,CAACqC,SAAT,CAAmBN,OAAO,CAACL,KAAD,CAA1B,CAAZ;AACH;;AAGDF,EAAAA,MAAM,GAAGV,cAAc,CAAC0B,MAAf,CAAsBhB,MAAtB,CAAT;AACAiB,EAAAA,UAAU,GAAG,EAAb;;AACA,OAAK,IAAIf,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,MAAM,CAACQ,MAAnC,EAA2CN,KAAK,EAAhD,EAAoD;AAClDe,IAAAA,UAAU,CAACf,KAAD,CAAV,GAAoB,KAApB;AACD;;AAED,QAAM,CAACgB,UAAD,EAAanB,aAAb,IAA8BzB,QAAQ,CACxC0B,MAAM,CAACC,GAAP,CAAW,CAACP,KAAD,EAAQQ,KAAR,KAAkB;AACzB,WAAO;AACLC,MAAAA,GAAG,EAAG,WAAUT,KAAK,CAACI,OAAQ,MADzB;AAELM,MAAAA,GAAG,EAAEF,KAFA;AAGLG,MAAAA,OAAO,EAAGV,CAAD,IAAOH,WAAW,CAACU,KAAD,EAAQR,KAAR,EAAeC,CAAf,CAHtB;AAILW,MAAAA,IAAI,EAAEW,UAAU,CAACf,KAAD;AAJX,KAAP;AAMD,GAPH,CADwC,CAA5C,CAtCkB,CAgDlB;;AAEA,sBACI;AAAA,4BACI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,aAAD;AACA,MAAA,eAAe,EAAE,EADjB;AAEA,MAAA,OAAO,EAAE,CAFT;AAGA,MAAA,eAAe,EAAE,CAHjB;AAIA,MAAA,aAAa,EAAE,EAJf;AAKA,MAAA,cAAc,EAAE;AAChBiB,QAAAA,UAAU,EAAE,iBADI;AAEhBC,QAAAA,QAAQ,EAAE;AAFM,OALhB;AASA,MAAA,KAAK,EAAEF,UATP;AAUA,MAAA,UAAU,EAAE;AAAEZ,QAAAA,IAAI,EAAE,MAAR;AACRe,QAAAA,MAAM,EAAE;AACJf,UAAAA,IAAI,EAAE;AADF;AADA;AAVZ;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAqBH,CAvED;;GAAMjB,O;;KAAAA,O;AAyEN,eAAeA,OAAf","sourcesContent":["import { Hexagon, TiledHexagons } from 'tiled-hexagons'\nimport { useState } from 'react'\nimport React from 'react';\n\nconst openmoji = require('openmoji');\n\nclass Grid extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n          colour: 'purple'\n        }\n      }\n\n      selectHex() {\n          if (this.state.colour === 'red') {\n            this.setState({ colour: 'blue' })\n        } else {\n            this.setState({ colour: 'red' })\n        }\n      }\n    \n    render() {\n        let { colour } = this.state\n\n\n    \n        return (\n            <Hexagon\n              sideLength={80}\n              fill={colour.toString()}\n              onClick={this.selectHex.bind(this)}\n            />  )  }\n  }\n\n\nconst Hexgrid = () => {\n    const selectedEmojis = [];\n    var numEmojis = 113; //id 56 is the center\n\n    const handleClick = (id, emoji, e) => {\n        console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n        //selectedEmojis.push(emoji);\n        setEmojiTiles(\n            emojis.map((emoji, index) => {\n                return { \n                  img: `/images/${emoji.hexcode}.svg`, \n                  key: index,\n                  onClick: (e) => handleClick(index, emoji, e),\n                  fill: '#70cbff'\n                }\n              })\n        )\n    }\n    \n\n    let numbers = [];\n    while(selectedEmojis.length + numbers.length < numEmojis){\n        var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n        if(numbers.indexOf(r) === -1) numbers.push(r);\n    }\n    let emojis = [];\n\n    for (let index = 0; index < numbers.length; index++) {\n        emojis.push(openmoji.openmojis[numbers[index]]);\n    }    \n\n\n    emojis = selectedEmojis.concat(emojis); \n    emojiFills = [];\n    for (let index = 0; index < emojis.length; index++) {\n      emojiFills[index] = 'red';\n    }    \n\n    const [emojiTiles, setEmojiTiles] = useState(\n        emojis.map((emoji, index) => {\n            return { \n              img: `/images/${emoji.hexcode}.svg`, \n              key: index,\n              onClick: (e) => handleClick(index, emoji, e),\n              fill: emojiFills[index]\n            }\n          })\n    )\n    //emojis[0].fill = \"red\";\n    \n    return ( \n        <>\n            <Grid /> \n            <TiledHexagons\n            tileSideLengths={60}\n            tileGap={4}\n            tileBorderRadii={9}\n            maxHorizontal={13}\n            tileTextStyles={{\n            fontFamily: 'Source Sans Pro',\n            fontSize: '68px',\n            }}\n            tiles={emojiTiles}\n            tileStyles={{ fill: 'blue',\n                normal: {\n                    fill: 'red'\n                }\n            }}\n            />\n    </>\n    );\n}\n \nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}