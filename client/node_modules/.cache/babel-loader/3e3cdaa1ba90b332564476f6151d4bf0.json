{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s2 = $RefreshSig$();\n\nimport { Hexagon, TiledHexagons } from 'tiled-hexagons';\nimport { useState, useEffect } from 'react';\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      apiResponse: \"\"\n    };\n  }\n\n  callAPI() {\n    fetch(\"/emojiblends/5555\").then(res => res.text()).then(res => this.setState({\n      apiResponse: res\n    }));\n  }\n\n  componentWillMount() {\n    this.callAPI();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"HelloWorlds: \", this.state.apiResponse]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst Hexgrid = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [selectedEmojis, setSelectedEmojis] = useState([]);\n\n  function getData() {\n    _s();\n\n    const [data, setData] = useState({});\n    useEffect(() => {\n      fetch(\"/emojiblends/7777\").then(res => res.json()).then(data => setData(data));\n    }, []);\n  }\n\n  _s(getData, \"tNVKLF/eI269iIOS4WygXQde5D8=\");\n\n  function generateEmojis() {\n    var numEmojis = 113; //id 56 is the center\n\n    let numbers = [];\n    let emojis = [];\n\n    while (numbers.length < numEmojis) {\n      var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n      if (numbers.indexOf(r) === -1) numbers.push(r);\n    }\n\n    for (let index = 0; index < numbers.length; index++) {\n      emojis.push(openmoji.openmojis[numbers[index]]);\n    }\n\n    return emojis; // The function returns the product of p1 and p2\n  }\n\n  function newTileObject(_emojis) {\n    let emojis = _emojis;\n    let emojiFills = [];\n\n    for (let index = 0; index < emojis.length; index++) {\n      if (index === 56) {\n        emojiFills.push('#a4eefc');\n      } else {\n        emojiFills.push('white');\n      }\n    }\n\n    if (selectedEmojis.length >= 1) {\n      for (let i = 0; i < selectedEmojis.length; i++) {\n        if (56 - i > 49) {\n          emojis[56 - i] = selectedEmojis[selectedEmojis.length - 1 - i];\n          emojiFills[56 - i] = '#a4eefc';\n        }\n      }\n    }\n\n    const tileObj = emojis.map((emoji, index) => {\n      let colour = emojiFills[index].toString();\n      return {\n        img: `/images/${emoji.hexcode}.svg`,\n        key: index,\n        onClick: e => handleClick(index, emoji, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      };\n    });\n    return tileObj;\n  }\n\n  const handleClick = (id, emoji, e) => {\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id); // useEffect(() => {\n    //   fetch(\"http://localhost:9000/emojiblends/\" + emoji.hexcode)\n    //     .then(res => res.json())\n    //     .then(\n    //       (result) => {\n    //         setIsLoaded(true);\n    //         setItems(result);\n    //         console.log(result);\n    //       },\n    //       // Note: it's important to handle errors here\n    //       // instead of a catch() block so that we don't swallow\n    //       // exceptions from actual bugs in components.\n    //       (error) => {\n    //         setIsLoaded(true);\n    //         setError(error);\n    //       }\n    //     )\n    // }, [])\n    //Update emoji history:\n\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis); //Create new emoji tiles:\n\n    const newTileObj = newTileObject(generateEmojis());\n    setEmojiTiles(newTileObj);\n  };\n\n  const iniTileObj = newTileObject(generateEmojis());\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TiledHexagons, {\n      tileSideLengths: 60,\n      tileGap: 4,\n      tileBorderRadii: 9,\n      maxHorizontal: 13,\n      tileTextStyles: {\n        fontFamily: 'Source Sans Pro',\n        fontSize: '68px'\n      },\n      tiles: emojiTiles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s2(Hexgrid, \"UmqgXtnRhHxUOsrV1qZ5MYNowxc=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["Hexagon","TiledHexagons","useState","useEffect","React","Component","openmoji","require","Grid","constructor","props","state","apiResponse","callAPI","fetch","then","res","text","setState","componentWillMount","render","Hexgrid","selectedEmojis","setSelectedEmojis","getData","data","setData","json","generateEmojis","numEmojis","numbers","emojis","length","r","Math","floor","random","openmojis","indexOf","push","index","newTileObject","_emojis","emojiFills","i","tileObj","map","emoji","colour","toString","img","hexcode","key","onClick","e","handleClick","fill","styles","normal","hover","active","id","console","log","newEmojis","newTileObj","setEmojiTiles","iniTileObj","emojiTiles","fontFamily","fontSize"],"mappings":"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","sourcesContent":["import { Hexagon, TiledHexagons } from 'tiled-hexagons'\nimport { useState, useEffect } from 'react'\nimport React, { Component } from 'react';\n\nconst openmoji = require('openmoji');\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { apiResponse: \"\" };\n  }\n\n  callAPI() {\n    fetch(\"/emojiblends/5555\")\n      .then(res => res.text())\n      .then(res => this.setState({ apiResponse: res }));\n  }\n\n  componentWillMount() {\n    this.callAPI();\n  }\n\n  render(){\n    return (    \n      <p>HelloWorlds: {this.state.apiResponse}</p>\n    );\n  }\n}\n\nconst Hexgrid = () => {\n  const [selectedEmojis, setSelectedEmojis] = useState([]);\n\n  function getData(){\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n      fetch(\"/emojiblends/7777\")\n      .then(res => res.json())\n      .then(data => setData(data))\n    }, [])\n  } \n\n  function generateEmojis() {\n\n    var numEmojis = 113; //id 56 is the center\n\n    let numbers = [];\n    let emojis = [];\n\n    while (numbers.length < numEmojis) {\n      var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n      if (numbers.indexOf(r) === -1) numbers.push(r);\n    }\n\n    for (let index = 0; index < numbers.length; index++) {\n      emojis.push(openmoji.openmojis[numbers[index]]);\n    }\n\n    return emojis;   // The function returns the product of p1 and p2\n  }\n\n  function newTileObject(_emojis){\n    let emojis = _emojis;\n    let emojiFills = [];\n    for (let index = 0; index < emojis.length; index++) {\n      if (index === 56) {\n        emojiFills.push('#a4eefc');\n      } else {\n        emojiFills.push('white');\n      }\n    }\n\n    if (selectedEmojis.length >= 1) {\n      for (let i = 0; i < selectedEmojis.length; i++) {\n        if(56-i > 49){\n          emojis[56-i] = selectedEmojis[selectedEmojis.length-1-i];\n          emojiFills[56-i] = '#a4eefc';\n        }\n      }\n    }\n    const tileObj = emojis.map((emoji, index) => {\n      let colour = emojiFills[index].toString();\n        return { \n          img: `/images/${emoji.hexcode}.svg`, \n          key: index,\n          onClick: (e) => handleClick(index, emoji, e),\n          fill: '',\n          styles: {\n            normal: {\n                fill: colour\n            },\n            hover: {\n              fill: '#6cc7da'\n            },\n            active: {\n              fill: '#779df1'\n            }\n        }\n        }\n      })\n\n      return tileObj;\n  }\n\n  const handleClick = (id, emoji, e) => {\n  \n    console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n\n    // useEffect(() => {\n    //   fetch(\"http://localhost:9000/emojiblends/\" + emoji.hexcode)\n    //     .then(res => res.json())\n    //     .then(\n    //       (result) => {\n    //         setIsLoaded(true);\n    //         setItems(result);\n    //         console.log(result);\n    //       },\n    //       // Note: it's important to handle errors here\n    //       // instead of a catch() block so that we don't swallow\n    //       // exceptions from actual bugs in components.\n    //       (error) => {\n    //         setIsLoaded(true);\n    //         setError(error);\n    //       }\n    //     )\n    // }, [])\n  \n    //Update emoji history:\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis);\n    \n    //Create new emoji tiles:\n    const newTileObj = newTileObject(generateEmojis());\n    setEmojiTiles(newTileObj);\n\n  }\n  const iniTileObj = newTileObject(generateEmojis());\n\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj)\n    return ( \n        <>\n            <Grid/>\n            <TiledHexagons\n            tileSideLengths={60}\n            tileGap={4}\n            tileBorderRadii={9}\n            maxHorizontal={13}\n            tileTextStyles={{\n            fontFamily: 'Source Sans Pro',\n            fontSize: '68px',\n            }}\n            tiles={emojiTiles}\n            />\n    </>\n    );\n}\n \nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}