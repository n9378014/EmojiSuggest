{"ast":null,"code":"/*!\n * assign-symbols <https://github.com/jonschlinkert/assign-symbols>\n *\n * Copyright (c) 2015-present, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n'use strict';\n\nconst toString = Object.prototype.toString;\nconst isEnumerable = Object.prototype.propertyIsEnumerable;\nconst getSymbols = Object.getOwnPropertySymbols;\n\nmodule.exports = (target, ...args) => {\n  if (!isObject(target)) {\n    throw new TypeError('expected the first argument to be an object');\n  }\n\n  if (args.length === 0 || typeof Symbol !== 'function' || typeof getSymbols !== 'function') {\n    return target;\n  }\n\n  for (let arg of args) {\n    let names = getSymbols(arg);\n\n    for (let key of names) {\n      if (isEnumerable.call(arg, key)) {\n        target[key] = arg[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction isObject(val) {\n  return typeof val === 'function' || toString.call(val) === '[object Object]' || Array.isArray(val);\n}","map":{"version":3,"sources":["/Users/graceheffernan/Documents/GitHub/EmojiSuggest/client/node_modules/assign-deep/node_modules/assign-symbols/index.js"],"names":["toString","Object","prototype","isEnumerable","propertyIsEnumerable","getSymbols","getOwnPropertySymbols","module","exports","target","args","isObject","TypeError","length","Symbol","arg","names","key","call","val","Array","isArray"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,MAAM,CAACC,SAAP,CAAiBF,QAAlC;AACA,MAAMG,YAAY,GAAGF,MAAM,CAACC,SAAP,CAAiBE,oBAAtC;AACA,MAAMC,UAAU,GAAGJ,MAAM,CAACK,qBAA1B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,MAAD,EAAS,GAAGC,IAAZ,KAAqB;AACpC,MAAI,CAACC,QAAQ,CAACF,MAAD,CAAb,EAAuB;AACrB,UAAM,IAAIG,SAAJ,CAAc,6CAAd,CAAN;AACD;;AAED,MAAIF,IAAI,CAACG,MAAL,KAAgB,CAAhB,IAAqB,OAAOC,MAAP,KAAkB,UAAvC,IAAqD,OAAOT,UAAP,KAAsB,UAA/E,EAA2F;AACzF,WAAOI,MAAP;AACD;;AAED,OAAK,IAAIM,GAAT,IAAgBL,IAAhB,EAAsB;AACpB,QAAIM,KAAK,GAAGX,UAAU,CAACU,GAAD,CAAtB;;AAEA,SAAK,IAAIE,GAAT,IAAgBD,KAAhB,EAAuB;AACrB,UAAIb,YAAY,CAACe,IAAb,CAAkBH,GAAlB,EAAuBE,GAAvB,CAAJ,EAAiC;AAC/BR,QAAAA,MAAM,CAACQ,GAAD,CAAN,GAAcF,GAAG,CAACE,GAAD,CAAjB;AACD;AACF;AACF;;AACD,SAAOR,MAAP;AACD,CAnBD;;AAqBA,SAASE,QAAT,CAAkBQ,GAAlB,EAAuB;AACrB,SAAO,OAAOA,GAAP,KAAe,UAAf,IAA6BnB,QAAQ,CAACkB,IAAT,CAAcC,GAAd,MAAuB,iBAApD,IAAyEC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAhF;AACD","sourcesContent":["/*!\n * assign-symbols <https://github.com/jonschlinkert/assign-symbols>\n *\n * Copyright (c) 2015-present, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nconst toString = Object.prototype.toString;\nconst isEnumerable = Object.prototype.propertyIsEnumerable;\nconst getSymbols = Object.getOwnPropertySymbols;\n\nmodule.exports = (target, ...args) => {\n  if (!isObject(target)) {\n    throw new TypeError('expected the first argument to be an object');\n  }\n\n  if (args.length === 0 || typeof Symbol !== 'function' || typeof getSymbols !== 'function') {\n    return target;\n  }\n\n  for (let arg of args) {\n    let names = getSymbols(arg);\n\n    for (let key of names) {\n      if (isEnumerable.call(arg, key)) {\n        target[key] = arg[key];\n      }\n    }\n  }\n  return target;\n};\n\nfunction isObject(val) {\n  return typeof val === 'function' || toString.call(val) === '[object Object]' || Array.isArray(val);\n}\n"]},"metadata":{},"sourceType":"script"}