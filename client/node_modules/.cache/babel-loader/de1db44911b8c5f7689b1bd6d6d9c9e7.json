{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid2.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { Hexagon, TiledHexagons } from 'tiled-hexagons';\nimport { defineGrid } from 'honeycomb-grid';\nimport { useState } from 'react';\nimport React from 'react';\nimport * as Honeycomb from \"honeycomb-grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nfunction Grid({\n  size,\n  width,\n  height\n}) {\n  _s();\n\n  const elementRef = React.useRef(null);\n  useHoneyCombGrid(elementRef, {\n    size,\n    width,\n    height\n  });\n  return /*#__PURE__*/_jsxDEV(SC.Grid, {\n    ref: elementRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Grid, \"wm5A5kHEv/v25Dg5E1s8JhBJLF0=\", false, function () {\n  return [useHoneyCombGrid];\n});\n\n_c = Grid;\n\nfunction useHoneyCombGrid(elementRef, {\n  size,\n  width,\n  height\n}) {\n  _s2();\n\n  React.useEffect(() => {\n    const element = elementRef.current;\n    const draw = SVG(element);\n    const Hex = Honeycomb.extendHex({\n      size,\n\n      // orientation: 'flat',\t// default: 'pointy'\n      // offset: 1,\t\t\t\t\t\t// default: -1\n      render(draw) {\n        const position = this.toPoint();\n        const centerPosition = this.center().add(position);\n        this.draw = draw; // draw the hex\n\n        this.draw.polygon(this.corners().map(({\n          x,\n          y\n        }) => `${x},${y}`)).fill(\"none\").stroke({\n          width: 1,\n          color: \"#999\"\n        }).translate(position.x, position.y);\n        const fontSize = 12; // draw x and y coordinates\n\n        this.draw.text(`${this.x},${this.y}`).font({\n          size: fontSize,\n          anchor: \"middle\",\n          leading: 1.4,\n          fill: \"#69c\"\n        }).translate(centerPosition.x, centerPosition.y - fontSize);\n      },\n\n      highlight() {\n        console.log(this.draw); // this.draw\n        //   // stop running animation\n        //   .stop(true, true)\n        //   .stroke({ width: 1, color: \"aquamarine\" })\n        //   .animate(1000)\n        //   .stroke({ width: 1, color: \"#f00\" });\n      }\n\n    });\n    const Grid = Honeycomb.defineGrid(Hex);\n    const grid = Grid.rectangle({\n      width,\n      height,\n      start: [0, 0],\n      direction: 0,\n      onCreate: hex => hex.render(draw)\n    });\n\n    const handleClick = ({\n      offsetX,\n      offsetY\n    }) => {\n      const coords = Grid.pointToHex([offsetX, offsetY]);\n      const hex = grid.get(coords);\n      const range = grid.hexesInRange(hex, 1);\n      console.log({\n        coords,\n        range\n      });\n      range.forEach((h, i) => {\n        console.log(\">>\", i);\n        h.highlight(); // stop running animation\n        // h.draw\n        //   .stop(true, true)\n        //   .stroke({ width: 1, color: \"aquamarine\" })\n        //   .animate(1000)\n        //   .stroke({ width: 1, color: \"#f00\" });\n      });\n\n      if (hex) {\n        hex.highlight();\n      }\n    };\n\n    document.addEventListener(\"click\", handleClick);\n    return () => {\n      element.innerHTML = \"\";\n      document.removeEventListener(\"click\", handleClick);\n    };\n  }, [elementRef, size, width, height]);\n}\n\n_s2(useHoneyCombGrid, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nconst Hexgrid2 = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_c2 = Hexgrid2;\nexport default Hexgrid2;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Grid\");\n$RefreshReg$(_c2, \"Hexgrid2\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid2.js"],"names":["Hexagon","TiledHexagons","defineGrid","useState","React","Honeycomb","openmoji","require","Grid","size","width","height","elementRef","useRef","useHoneyCombGrid","useEffect","element","current","draw","SVG","Hex","extendHex","render","position","toPoint","centerPosition","center","add","polygon","corners","map","x","y","fill","stroke","color","translate","fontSize","text","font","anchor","leading","highlight","console","log","grid","rectangle","start","direction","onCreate","hex","handleClick","offsetX","offsetY","coords","pointToHex","get","range","hexesInRange","forEach","h","i","document","addEventListener","innerHTML","removeEventListener","Hexgrid2"],"mappings":";;;;AAAA,SAASA,OAAT,EAAkBC,aAAlB,QAAuC,gBAAvC;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,SAAZ,MAA2B,gBAA3B;;;;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAEA,SAASC,IAAT,CAAc;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAd,EAAuC;AAAA;;AACnC,QAAMC,UAAU,GAAGR,KAAK,CAACS,MAAN,CAAa,IAAb,CAAnB;AAEAC,EAAAA,gBAAgB,CAACF,UAAD,EAAa;AAAEH,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAb,CAAhB;AAEA,sBAAO,QAAC,EAAD,CAAI,IAAJ;AAAS,IAAA,GAAG,EAAEC;AAAd;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GANMJ,I;UAGLM,gB;;;KAHKN,I;;AAQP,SAASM,gBAAT,CAA0BF,UAA1B,EAAsC;AAAEH,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAtC,EAA+D;AAAA;;AAC7DP,EAAAA,KAAK,CAACW,SAAN,CAAgB,MAAM;AACpB,UAAMC,OAAO,GAAGJ,UAAU,CAACK,OAA3B;AACA,UAAMC,IAAI,GAAGC,GAAG,CAACH,OAAD,CAAhB;AAEA,UAAMI,GAAG,GAAGf,SAAS,CAACgB,SAAV,CAAoB;AAC9BZ,MAAAA,IAD8B;;AAE9B;AACA;AAEAa,MAAAA,MAAM,CAACJ,IAAD,EAAO;AACX,cAAMK,QAAQ,GAAG,KAAKC,OAAL,EAAjB;AACA,cAAMC,cAAc,GAAG,KAAKC,MAAL,GAAcC,GAAd,CAAkBJ,QAAlB,CAAvB;AAEA,aAAKL,IAAL,GAAYA,IAAZ,CAJW,CAMX;;AACA,aAAKA,IAAL,CACGU,OADH,CACW,KAAKC,OAAL,GAAeC,GAAf,CAAmB,CAAC;AAAEC,UAAAA,CAAF;AAAKC,UAAAA;AAAL,SAAD,KAAe,GAAED,CAAE,IAAGC,CAAE,EAA3C,CADX,EAEGC,IAFH,CAEQ,MAFR,EAGGC,MAHH,CAGU;AAAExB,UAAAA,KAAK,EAAE,CAAT;AAAYyB,UAAAA,KAAK,EAAE;AAAnB,SAHV,EAIGC,SAJH,CAIab,QAAQ,CAACQ,CAJtB,EAIyBR,QAAQ,CAACS,CAJlC;AAMA,cAAMK,QAAQ,GAAG,EAAjB,CAbW,CAeX;;AACA,aAAKnB,IAAL,CACGoB,IADH,CACS,GAAE,KAAKP,CAAE,IAAG,KAAKC,CAAE,EAD5B,EAEGO,IAFH,CAEQ;AACJ9B,UAAAA,IAAI,EAAE4B,QADF;AAEJG,UAAAA,MAAM,EAAE,QAFJ;AAGJC,UAAAA,OAAO,EAAE,GAHL;AAIJR,UAAAA,IAAI,EAAE;AAJF,SAFR,EAQGG,SARH,CAQaX,cAAc,CAACM,CAR5B,EAQ+BN,cAAc,CAACO,CAAf,GAAmBK,QARlD;AASD,OA9B6B;;AAgC9BK,MAAAA,SAAS,GAAG;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAK1B,IAAjB,EADU,CAEV;AACA;AACA;AACA;AACA;AACA;AACD;;AAxC6B,KAApB,CAAZ;AA0CA,UAAMV,IAAI,GAAGH,SAAS,CAACH,UAAV,CAAqBkB,GAArB,CAAb;AACA,UAAMyB,IAAI,GAAGrC,IAAI,CAACsC,SAAL,CAAe;AAC1BpC,MAAAA,KAD0B;AAE1BC,MAAAA,MAF0B;AAG1BoC,MAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,CAHmB;AAI1BC,MAAAA,SAAS,EAAE,CAJe;AAK1BC,MAAAA,QAAQ,EAAEC,GAAG,IAAIA,GAAG,CAAC5B,MAAJ,CAAWJ,IAAX;AALS,KAAf,CAAb;;AAQA,UAAMiC,WAAW,GAAG,CAAC;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAD,KAA0B;AAC5C,YAAMC,MAAM,GAAG9C,IAAI,CAAC+C,UAAL,CAAgB,CAACH,OAAD,EAAUC,OAAV,CAAhB,CAAf;AACA,YAAMH,GAAG,GAAGL,IAAI,CAACW,GAAL,CAASF,MAAT,CAAZ;AACA,YAAMG,KAAK,GAAGZ,IAAI,CAACa,YAAL,CAAkBR,GAAlB,EAAuB,CAAvB,CAAd;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEU,QAAAA,MAAF;AAAUG,QAAAA;AAAV,OAAZ;AACAA,MAAAA,KAAK,CAACE,OAAN,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACtBlB,QAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBiB,CAAlB;AACAD,QAAAA,CAAC,CAAClB,SAAF,GAFsB,CAGtB;AACA;AACA;AACA;AACA;AACA;AACD,OATD;;AAUA,UAAIQ,GAAJ,EAAS;AACPA,QAAAA,GAAG,CAACR,SAAJ;AACD;AACF,KAlBD;;AAmBAoB,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCZ,WAAnC;AAEA,WAAO,MAAM;AACXnC,MAAAA,OAAO,CAACgD,SAAR,GAAoB,EAApB;AACAF,MAAAA,QAAQ,CAACG,mBAAT,CAA6B,OAA7B,EAAsCd,WAAtC;AACD,KAHD;AAID,GAhFD,EAgFG,CAACvC,UAAD,EAAaH,IAAb,EAAmBC,KAAnB,EAA0BC,MAA1B,CAhFH;AAiFD;;IAlFQG,gB;;AAoFX,MAAMoD,QAAQ,GAAG,MAAM;AAGnB,sBACI,qCADJ;AAKH,CARD;;MAAMA,Q;AAUN,eAAeA,QAAf","sourcesContent":["import { Hexagon, TiledHexagons } from 'tiled-hexagons'\nimport { defineGrid } from 'honeycomb-grid'\nimport { useState } from 'react'\nimport React from 'react';\nimport * as Honeycomb from \"honeycomb-grid\";\n\nconst openmoji = require('openmoji');\n\nfunction Grid({ size, width, height }) {\n    const elementRef = React.useRef(null);\n  \n    useHoneyCombGrid(elementRef, { size, width, height });\n  \n    return <SC.Grid ref={elementRef} />;\n  }\n  \n  function useHoneyCombGrid(elementRef, { size, width, height }) {\n    React.useEffect(() => {\n      const element = elementRef.current;\n      const draw = SVG(element);\n  \n      const Hex = Honeycomb.extendHex({\n        size,\n        // orientation: 'flat',\t// default: 'pointy'\n        // offset: 1,\t\t\t\t\t\t// default: -1\n  \n        render(draw) {\n          const position = this.toPoint();\n          const centerPosition = this.center().add(position);\n  \n          this.draw = draw;\n  \n          // draw the hex\n          this.draw\n            .polygon(this.corners().map(({ x, y }) => `${x},${y}`))\n            .fill(\"none\")\n            .stroke({ width: 1, color: \"#999\" })\n            .translate(position.x, position.y);\n  \n          const fontSize = 12;\n  \n          // draw x and y coordinates\n          this.draw\n            .text(`${this.x},${this.y}`)\n            .font({\n              size: fontSize,\n              anchor: \"middle\",\n              leading: 1.4,\n              fill: \"#69c\"\n            })\n            .translate(centerPosition.x, centerPosition.y - fontSize);\n        },\n  \n        highlight() {\n          console.log(this.draw);\n          // this.draw\n          //   // stop running animation\n          //   .stop(true, true)\n          //   .stroke({ width: 1, color: \"aquamarine\" })\n          //   .animate(1000)\n          //   .stroke({ width: 1, color: \"#f00\" });\n        }\n      });\n      const Grid = Honeycomb.defineGrid(Hex);\n      const grid = Grid.rectangle({\n        width,\n        height,\n        start: [0, 0],\n        direction: 0,\n        onCreate: hex => hex.render(draw)\n      });\n  \n      const handleClick = ({ offsetX, offsetY }) => {\n        const coords = Grid.pointToHex([offsetX, offsetY]);\n        const hex = grid.get(coords);\n        const range = grid.hexesInRange(hex, 1);\n        console.log({ coords, range });\n        range.forEach((h, i) => {\n          console.log(\">>\", i);\n          h.highlight();\n          // stop running animation\n          // h.draw\n          //   .stop(true, true)\n          //   .stroke({ width: 1, color: \"aquamarine\" })\n          //   .animate(1000)\n          //   .stroke({ width: 1, color: \"#f00\" });\n        });\n        if (hex) {\n          hex.highlight();\n        }\n      };\n      document.addEventListener(\"click\", handleClick);\n  \n      return () => {\n        element.innerHTML = \"\";\n        document.removeEventListener(\"click\", handleClick);\n      };\n    }, [elementRef, size, width, height]);\n  }\n  \nconst Hexgrid2 = () => {\n\n\n    return ( \n        <>\n            \n    </>\n    );\n}\n \nexport default Hexgrid2;"]},"metadata":{},"sourceType":"module"}