{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { TiledHexagons } from 'tiled-hexagons';\nimport { useState } from 'react';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nclass Grid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      key: 0,\n      active: false\n    };\n  }\n\n  selectHex() {\n    this.setState({\n      active: true\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Hello, \", this.props.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 14\n    }, this);\n  }\n\n}\n\nconst Hexgrid = () => {\n  _s();\n\n  const selectedEmojis = [];\n  var numEmojis = 69; //69\n\n  const handleClick = (id, emoji, e) => {\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id); //selectedEmojis.push(emoji);\n\n    setEmojiTiles(emojis.map((emoji, index) => {\n      return {\n        img: `/images/${emoji.hexcode}.svg`,\n        key: index,\n        onClick: e => handleClick(index, emoji, e),\n        fill: '#70cbff'\n      };\n    }));\n  };\n\n  let numbers = [];\n\n  while (selectedEmojis.length + numbers.length < numEmojis) {\n    var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n    if (numbers.indexOf(r) === -1) numbers.push(r);\n  }\n\n  let emojis = [];\n\n  for (let index = 0; index < numbers.length; index++) {\n    emojis.push(openmoji.openmojis[numbers[index]]);\n  }\n\n  emojis = selectedEmojis.concat(emojis);\n  const [emojiTiles, setEmojiTiles] = useState(emojis.map((emoji, index) => {\n    return {\n      img: `/images/${emoji.hexcode}.svg`,\n      key: index,\n      onClick: e => handleClick(index, emoji, e),\n      fill: 'white'\n    };\n  })); //emojis[0].fill = \"red\";\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Hexagon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TiledHexagons, {\n      tileSideLengths: 60,\n      tileGap: 4,\n      tileBorderRadii: 9,\n      maxHorizontal: 12,\n      tileTextStyles: {\n        fontFamily: 'Source Sans Pro',\n        fontSize: '68px'\n      },\n      tiles: emojiTiles,\n      tileStyles: {\n        normal: {\n          fill: 'red'\n        },\n        hover: {\n          fill: 'blue'\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Hexgrid, \"cuYC/xWMgPicWocEmLjf8Eg/49A=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["TiledHexagons","useState","React","openmoji","require","Grid","Component","constructor","props","state","key","active","selectHex","setState","render","name","Hexgrid","selectedEmojis","numEmojis","handleClick","id","emoji","e","console","log","hexcode","setEmojiTiles","emojis","map","index","img","onClick","fill","numbers","length","r","Math","floor","random","openmojis","indexOf","push","concat","emojiTiles","fontFamily","fontSize","normal","hover"],"mappings":"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","sourcesContent":["import { TiledHexagons } from 'tiled-hexagons'\nimport { useState } from 'react'\nimport React from 'react';\n\nconst openmoji = require('openmoji');\n\nclass Grid extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n          key: 0,\n          active: false\n        }\n      }\n\n      selectHex() {\n        this.setState({ active: true })\n      }\n    \n    render() {\n      return <h1>Hello, {this.props.name}</h1>;\n    }\n  }\n\n\nconst Hexgrid = () => {\n    const selectedEmojis = [];\n    var numEmojis = 69; //69\n\n    const handleClick = (id, emoji, e) => {\n        console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n        //selectedEmojis.push(emoji);\n        setEmojiTiles(\n            emojis.map((emoji, index) => {\n                return { \n                  img: `/images/${emoji.hexcode}.svg`, \n                  key: index,\n                  onClick: (e) => handleClick(index, emoji, e),\n                  fill: '#70cbff'\n                }\n              })\n        )\n    }\n    \n\n    let numbers = [];\n    while(selectedEmojis.length + numbers.length < numEmojis){\n        var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n        if(numbers.indexOf(r) === -1) numbers.push(r);\n    }\n    let emojis = [];\n\n    for (let index = 0; index < numbers.length; index++) {\n        emojis.push(openmoji.openmojis[numbers[index]]);\n    }    \n\n\n    emojis = selectedEmojis.concat(emojis); \n    const [emojiTiles, setEmojiTiles] = useState(\n        emojis.map((emoji, index) => {\n            return { \n              img: `/images/${emoji.hexcode}.svg`, \n              key: index,\n              onClick: (e) => handleClick(index, emoji, e),\n              fill: 'white'\n            }\n          })\n    )\n    //emojis[0].fill = \"red\";\n    \n    return ( \n        <>\n            <Hexagon /> \n            <TiledHexagons\n            tileSideLengths={60}\n            tileGap={4}\n            tileBorderRadii={9}\n            maxHorizontal={12}\n            tileTextStyles={{\n            fontFamily: 'Source Sans Pro',\n            fontSize: '68px',\n            }}\n            tiles={emojiTiles}\n            tileStyles={{\n                normal: {\n                    fill: 'red'\n                },\n                hover: {\n                    fill: 'blue'\n                }\n            }}\n            />\n    </>\n    );\n}\n \nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}