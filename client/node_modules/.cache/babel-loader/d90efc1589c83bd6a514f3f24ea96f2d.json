{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { Hexagon, TiledHexagons } from 'tiled-hexagons';\nimport { useState } from 'react';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nclass Grid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colour: 'purple'\n    };\n  }\n\n  selectHex() {\n    if (this.state.colour === 'red') {\n      this.setState({\n        colour: 'blue'\n      });\n    } else {\n      this.setState({\n        colour: 'red'\n      });\n    }\n  }\n\n  render() {\n    let {\n      colour\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Hexagon, {\n      sideLength: 80,\n      fill: colour.toString(),\n      onClick: this.selectHex.bind(this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst Hexgrid = () => {\n  _s();\n\n  function generateEmojis() {\n    var numEmojis = 113; //id 56 is the center\n\n    let numbers = [];\n    let emojis = [];\n\n    while (numbers.length < numEmojis) {\n      var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n      if (numbers.indexOf(r) === -1) numbers.push(r);\n    }\n\n    for (let index = 0; index < numbers.length; index++) {\n      emojis.push(openmoji.openmojis[numbers[index]]);\n    }\n\n    return emojis; // The function returns the product of p1 and p2\n  }\n\n  function newTileObject(_emojis) {\n    let emojiFills = [];\n\n    for (let index = 0; index < _emojis.length; index++) {\n      if (index === 56) {\n        emojiFills.push('#a4eefc');\n      } else {\n        emojiFills.push('white');\n      }\n    }\n\n    const tileObj = _emojis.map((emoji, index) => {\n      let colour = emojiFills[index].toString();\n      return {\n        img: `/images/${emoji.hexcode}.svg`,\n        key: index,\n        onClick: e => handleClick(index, emoji, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      };\n    });\n\n    return tileObj;\n  }\n\n  const [selectedEmojis, setSelectedEmojis] = useState([]);\n\n  const handleClick = (id, emoji, e) => {\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id); //Update emoji history:\n\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis);\n    let emojis = generateEmojis(0);\n\n    if (selectedEmojis.length >= 1) {\n      for (let i = 0; i < selectedEmojis.length; i++) {\n        if (56 - i > 49) {\n          emojis[56 - i] = selectedEmojis[selectedEmojis.length - 1 - i];\n          emojiFills[56 - i] = '#a4eefc';\n        }\n      }\n    } // emojis.map((emoji, index) => {\n    //   let colour = emojiFills[index].toString();\n    //   return {\n    //     img: `/images/${emoji.hexcode}.svg`,\n    //     key: index,\n    //     onClick: (e) => handleClick(index, emoji, e),\n    //     fill: '',\n    //     styles: {\n    //       normal: {\n    //         fill: colour\n    //       },\n    //       hover: {\n    //         fill: '#6cc7da'\n    //       },\n    //       active: {\n    //         fill: '#779df1'\n    //       }\n    //     }\n    //   }\n    // })\n\n\n    const newTileObj = newTileObject(generateEmojis());\n    setEmojiTiles(newTileObj);\n    console.log(emojiTiles);\n  };\n\n  const iniTileObj = newTileObject(generateEmojis()); // emojis.map((emoji, index) => {\n  //   let colour = emojiFills[index].toString();\n  //   return { \n  //     img: `/images/${emoji.hexcode}.svg`, \n  //     key: index,\n  //     onClick: (e) => handleClick(index, emoji, e),\n  //     fill: '',\n  //     styles: {\n  //       normal: {\n  //         fill: colour\n  //       },\n  //       hover: {\n  //         fill: '#6cc7da'\n  //       },\n  //       active: {\n  //         fill: '#779df1'\n  //       }\n  //     }\n  //   }\n  // })\n\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TiledHexagons, {\n      tileSideLengths: 60,\n      tileGap: 4,\n      tileBorderRadii: 9,\n      maxHorizontal: 13,\n      tileTextStyles: {\n        fontFamily: 'Source Sans Pro',\n        fontSize: '68px'\n      },\n      tiles: emojiTiles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Hexgrid, \"UmqgXtnRhHxUOsrV1qZ5MYNowxc=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["Hexagon","TiledHexagons","useState","React","openmoji","require","Grid","Component","constructor","props","state","colour","selectHex","setState","render","toString","bind","Hexgrid","generateEmojis","numEmojis","numbers","emojis","length","r","Math","floor","random","openmojis","indexOf","push","index","newTileObject","_emojis","emojiFills","tileObj","map","emoji","img","hexcode","key","onClick","e","handleClick","fill","styles","normal","hover","active","selectedEmojis","setSelectedEmojis","id","console","log","newEmojis","i","newTileObj","setEmojiTiles","emojiTiles","iniTileObj","fontFamily","fontSize"],"mappings":"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","sourcesContent":["import { Hexagon, TiledHexagons } from 'tiled-hexagons'\nimport { useState } from 'react'\nimport React from 'react';\n\nconst openmoji = require('openmoji');\n\nclass Grid extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n          colour: 'purple'\n        }\n      }\n\n      selectHex() {\n          if (this.state.colour === 'red') {\n            this.setState({ colour: 'blue' })\n        } else {\n            this.setState({ colour: 'red' })\n        }\n      }\n    \n    render() {\n        let { colour } = this.state\n\n\n    \n        return (\n            <Hexagon\n              sideLength={80}\n              fill={colour.toString()}\n              onClick={this.selectHex.bind(this)}\n            />  )  }\n  }\n\n\nconst Hexgrid = () => {\n  function generateEmojis() {\n\n    var numEmojis = 113; //id 56 is the center\n\n    let numbers = [];\n    let emojis = [];\n  \n    while(numbers.length < numEmojis){\n      var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n      if(numbers.indexOf(r) === -1) numbers.push(r);\n  }\n  \n  for (let index = 0; index < numbers.length; index++) {\n      emojis.push(openmoji.openmojis[numbers[index]]);\n  }    \n  \n    return emojis;   // The function returns the product of p1 and p2\n  }\n\n  function newTileObject(_emojis){\n    let emojiFills = [];\n    for (let index = 0; index < _emojis.length; index++) {\n      if (index === 56) {\n        emojiFills.push('#a4eefc');\n      } else {\n        emojiFills.push('white');\n      }\n    }\n\n    const tileObj = _emojis.map((emoji, index) => {\n      let colour = emojiFills[index].toString();\n        return { \n          img: `/images/${emoji.hexcode}.svg`, \n          key: index,\n          onClick: (e) => handleClick(index, emoji, e),\n          fill: '',\n          styles: {\n            normal: {\n                fill: colour\n            },\n            hover: {\n              fill: '#6cc7da'\n            },\n            active: {\n              fill: '#779df1'\n            }\n        }\n        }\n      })\n\n      return tileObj;\n  }\nconst [selectedEmojis, setSelectedEmojis] = useState([]);\n\n  const handleClick = (id, emoji, e) => {\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n\n    //Update emoji history:\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis);\n\n\n    let emojis = generateEmojis(0);\n    if (selectedEmojis.length >= 1) {\n      for (let i = 0; i < selectedEmojis.length; i++) {\n        if(56-i > 49){\n          emojis[56-i] = selectedEmojis[selectedEmojis.length-1-i];\n          emojiFills[56-i] = '#a4eefc';\n        }\n      }\n    }\n      \n        // emojis.map((emoji, index) => {\n        //   let colour = emojiFills[index].toString();\n        //   return {\n        //     img: `/images/${emoji.hexcode}.svg`,\n        //     key: index,\n        //     onClick: (e) => handleClick(index, emoji, e),\n        //     fill: '',\n        //     styles: {\n        //       normal: {\n        //         fill: colour\n        //       },\n        //       hover: {\n        //         fill: '#6cc7da'\n        //       },\n        //       active: {\n        //         fill: '#779df1'\n        //       }\n        //     }\n        //   }\n        // })\n    \n    const newTileObj = newTileObject(generateEmojis());\n    setEmojiTiles(newTileObj);\n    console.log(emojiTiles);\n\n  }\n  const iniTileObj = newTileObject(generateEmojis());\n  \n  // emojis.map((emoji, index) => {\n  //   let colour = emojiFills[index].toString();\n  //   return { \n  //     img: `/images/${emoji.hexcode}.svg`, \n  //     key: index,\n  //     onClick: (e) => handleClick(index, emoji, e),\n  //     fill: '',\n  //     styles: {\n  //       normal: {\n  //         fill: colour\n  //       },\n  //       hover: {\n  //         fill: '#6cc7da'\n  //       },\n  //       active: {\n  //         fill: '#779df1'\n  //       }\n  //     }\n  //   }\n  // })\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj)\n    return ( \n        <>\n            <Grid /> \n            <TiledHexagons\n            tileSideLengths={60}\n            tileGap={4}\n            tileBorderRadii={9}\n            maxHorizontal={13}\n            tileTextStyles={{\n            fontFamily: 'Source Sans Pro',\n            fontSize: '68px',\n            }}\n            tiles={emojiTiles}\n            />\n    </>\n    );\n}\n \nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}