{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { TiledHexagons } from 'tiled-hexagons';\nimport { useState, useEffect } from 'react';\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nconst fs = require('fs');\n\nconst numEmojis = 259;\nconst maxHorizontal = 19; //111\n\nconst maxVertical = Math.ceil(numEmojis / maxHorizontal);\nconst center = Math.round(maxHorizontal * (maxVertical / 4) + (maxHorizontal - 1) * (maxVertical / 4)) - Math.round(maxHorizontal / 2); //Math.ceil(numEmojis/2)-3;\n\nconst lenHistory = Math.ceil(maxHorizontal / 2);\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\n\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073].hexcode);\n}\n\nconst cat1Index = [0, 1, 2, 3, 4, 5, 19, 20, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 56, 57, 58, 59, 60, 61, 62, 74, 75, 76, 77, 78, 79, 80, 81, 93, 94, 95, 96, 97, 98, 99, 100];\nconst cat2Index = [7, 8, 9, 10, 11, 26, 27, 28, 29, 45, 46, 47, 64, 65, 83];\nlet imageURLs = new Array(numEmojis);\n\nconst Hexgrid = () => {\n  _s();\n\n  const [emojiHistory, setEmojiHistory] = useState([]);\n  var iniTileObj = newTileObject([defaultEmojis]);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj); //\n\n  function getTileColour(tileIndex) {\n    let colour = 'white';\n\n    if (tileIndex <= center - 1 && tileIndex >= center - lenHistory + 1) {\n      colour = '#dbf7fd'; //'#d4d4d4';\n    }\n\n    if (tileIndex === center) {\n      colour = '#a4eefc';\n    }\n\n    return colour;\n  } // function getTileImage(tileIndex, hexcode, callback) {\n  //   for (let i = 0; i < values[0].length; i++) {\n  //     let image = ``;\n  //     if (Array.isArray(hexcode)) { //Then hexcode is a blend\n  //       console.log('in image function, not fetched yet');\n  //       //image = `http://localhost:9000/blends/1F9431F0CF.png`;\n  //       fetch(\"http://localhost:9000/blendemojis/\" + hexcode[0] + \"/\" + \"1F0CF\")\n  //         .then(res => res.json())\n  //         .then(data => { image = \"http://localhost:9000/public/blends/\" + data.url })\n  //       //return 'http://localhost:9000/blends/1F9431F0CF.png';\n  //       //return image\n  //     }\n  //     else { //it is a single emoji character\n  //       image = `/images/${hexcode}.svg`;\n  //     }\n  //   }\n  //   return callback();\n  // }\n\n\n  function getTileImages(hexcodes, callback) {\n    for (let i = 0; i < hexcodes.length; i++) {\n      let image = ``;\n\n      if (Array.isArray(hexcodes[i])) {\n        //Then hexcode is a blend\n        console.log('in image function, not fetched yet'); //image = `http://localhost:9000/blends/1F9431F0CF.png`;\n\n        fetch(\"http://localhost:9000/blendemojis/\" + hexcodes[i] + \"/\" + \"1F0CF\").then(res => res.json()).then(data => {\n          imageURLs[i] = \"http://localhost:9000/public/blends/\" + data.url;\n          console.log('WOOO');\n        }).then(() => {\n          return callback();\n        }); //return 'http://localhost:9000/blends/1F9431F0CF.png';\n        //imageURLs[i] = image;\n      } else {\n        //it is a single emoji character\n        image = `/images/${hexcodes[i]}.svg`;\n        imageURLs[i] = image;\n      }\n    }\n  }\n\n  function newTileObject(_emojis, selectedHexcode) {\n    let hexcodes = _emojis[0];\n    let blendedHexcodes = _emojis[1];\n    /*\n    Substitute blendedHexcodes into hexcodes where appropriate\n    */\n\n    if (blendedHexcodes !== undefined && blendedHexcodes !== null && selectedHexcode !== undefined) {\n      cat1Index.forEach(index => {\n        hexcodes[index] = blendedHexcodes[cat1Index.indexOf(index)]; //console.log(hexcodes[index]);\n      });\n    }\n    /*\n    TODO: Get image URLs BEFORE MAPPING TILES\n    */\n\n    /*\n    Map hexcodes to tiles \n    */\n\n\n    const tileObj = hexcodes.map((hexcode, index) => {\n      /*  \n      Assign tile colour based on position in grid\n      */\n      let colour = getTileColour(index);\n      /*  \n      Assign tile image based on position in grid\n      */\n\n      let image = `/images/1F4EF.svg`;\n      image = imageURLs[index]; //getTileImage(index, hexcode); //get image then return tile\n      //console.log(image);\n\n      return {\n        img: image,\n        key: index,\n        onClick: e => handleClick(index, hexcode, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      };\n    });\n    return tileObj;\n  }\n  /*  \n  Get random emojis for every tile\n  */\n\n\n  function getRandomHexcodes() {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => {\n        resolve(obj);\n      });\n    });\n  }\n  /*  \n  Get random blends\n  */\n\n\n  function getRandomBlendHexcodes(hexcode) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"http://localhost:9000/randomblendhexcodes/\" + hexcode + \"?limit=\" + cat1Index.length.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => {\n        resolve(obj);\n      });\n    });\n  }\n  /*\n  Update emoji history and remove the oldest entry if length exceeds max.\n  */\n\n\n  function updateEmojiHistory(hexcode, num) {\n    let newEmojis = emojiHistory;\n\n    for (let i = 0; i < num; i++) {\n      newEmojis.push(hexcode);\n\n      if (newEmojis.length > lenHistory) {\n        newEmojis.shift();\n      }\n    }\n\n    setEmojiHistory(newEmojis);\n  }\n\n  const handleClick = (id, hexcode, e) => {\n    //TODO: Remove this before final build:\n    console.log(hexcode + ' was clicked. ID is ' + id);\n    /*\n    TODO: Replace all emoji with 'loading' emoji with no click handler\n    */\n\n    /*\n    Add clicked emoji to emoji history\n    */\n\n    updateEmojiHistory(hexcode, 1);\n    /*\n    Get hexcodes for new tiles, then assign them to tiles.\n    */\n\n    Promise.all([getRandomHexcodes(), getRandomBlendHexcodes(hexcode)]).then(values => {\n      //console.log(values);\n\n      /*\n      Substitute blendedHexcodes into hexcodes where appropriate\n      */\n      if (values[1] !== undefined && values[1] !== null && hexcode !== undefined) {\n        cat1Index.forEach(index => {\n          values[0][index] = values[1][cat1Index.indexOf(index)]; //console.log(hexcodes[index]);\n        });\n      }\n      /*\n      Insert emoji history into active tiles\n      */\n\n\n      if (emojiHistory.length >= 1) {\n        for (let i = 0; i < emojiHistory.length; i++) {\n          if (center - i > 49) {\n            values[0][center - i] = emojiHistory[emojiHistory.length - 1 - i];\n          }\n        }\n      } //Make getTileImage into getTileImages(). Callback after all of them are done.\n\n\n      getTileImages(values[0], function () {\n        //if(err) return console.log(err);\n        //response is here\n        console.log(\"After calback: \", imageURLs);\n        var newTileObj;\n        const tilePromise = new Promise((resolve, reject) => {\n          newTileObj = newTileObject(values, hexcode);\n          resolve();\n        });\n        tilePromise.then(() => {\n          setEmojiTiles(newTileObj);\n        });\n      });\n      console.log('after for', typeof imageURLs); //newTileObj = newTileObject(values, hexcode); //gen tiles then return them\n    });\n  };\n  /*\n  Display the initial emoji options.\n  This is occuring twice according to the API terminal\n  */\n\n\n  window.addEventListener('DOMContentLoaded', event => {\n    /*\n      Fill the emoji history with placeholders\n    */\n    updateEmojiHistory(openmoji.openmojis[3073].hexcode, lenHistory);\n    /*\n      TODO: Replace this with a call to the getrandoms function\n    */\n\n    var obj;\n    fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => iniTileObj = newTileObject([obj, []])).then(() => setEmojiTiles(iniTileObj));\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TiledHexagons, {\n      tileSideLengths: 60,\n      tileGap: 4,\n      tileBorderRadii: 9,\n      maxHorizontal: maxHorizontal,\n      tileTextStyles: {\n        fontFamily: 'Source Sans Pro',\n        fontSize: '68px'\n      },\n      tiles: emojiTiles,\n      onLoad: () => handleClick()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Hexgrid, \"+3VtAv/BIw3CeMu2hnKoMc1i9do=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["TiledHexagons","useState","useEffect","React","Component","openmoji","require","fs","numEmojis","maxHorizontal","maxVertical","Math","ceil","center","round","lenHistory","lenRandom","defaultEmojis","index","push","openmojis","hexcode","cat1Index","cat2Index","imageURLs","Array","Hexgrid","emojiHistory","setEmojiHistory","iniTileObj","newTileObject","emojiTiles","setEmojiTiles","getTileColour","tileIndex","colour","getTileImages","hexcodes","callback","i","length","image","isArray","console","log","fetch","then","res","json","data","url","_emojis","selectedHexcode","blendedHexcodes","undefined","forEach","indexOf","tileObj","map","img","key","onClick","e","handleClick","fill","styles","normal","hover","active","getRandomHexcodes","Promise","resolve","reject","obj","toString","JSON","parse","getRandomBlendHexcodes","updateEmojiHistory","num","newEmojis","shift","id","all","values","newTileObj","tilePromise","window","addEventListener","event","fontFamily","fontSize"],"mappings":"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","sourcesContent":["import { TiledHexagons } from 'tiled-hexagons'\nimport { useState, useEffect } from 'react'\nimport React, { Component } from 'react';\n\nconst openmoji = require('openmoji');\nconst fs = require('fs');\n\nconst numEmojis = 259;\nconst maxHorizontal = 19;//111\nconst maxVertical = Math.ceil(numEmojis / maxHorizontal);\n\nconst center = Math.round((maxHorizontal * (maxVertical / 4)) + ((maxHorizontal - 1) * (maxVertical / 4))) - Math.round((maxHorizontal) / 2);//Math.ceil(numEmojis/2)-3;\nconst lenHistory = Math.ceil(maxHorizontal / 2);\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\n\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073].hexcode);\n}\n\nconst cat1Index = [0, 1, 2, 3, 4, 5,\n  19, 20, 21, 22, 23, 24,\n  37, 38, 39, 40, 41, 42, 43,\n  56, 57, 58, 59, 60, 61, 62,\n  74, 75, 76, 77, 78, 79, 80, 81,\n  93, 94, 95, 96, 97, 98, 99, 100];\n\nconst cat2Index = [7, 8, 9, 10, 11,\n  26, 27, 28, 29,\n  45, 46, 47,\n  64, 65,\n  83];\nlet imageURLs = new Array(numEmojis);\n\nconst Hexgrid = () => {\n  const [emojiHistory, setEmojiHistory] = useState([]);\n  var iniTileObj = newTileObject([defaultEmojis]);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj); //\n\n  function getTileColour(tileIndex) {\n    let colour = 'white';\n    if (tileIndex <= (center - 1) && tileIndex >= (center - lenHistory + 1)) {\n      colour = '#dbf7fd';//'#d4d4d4';\n    }\n    if (tileIndex === center) {\n      colour = '#a4eefc';\n    }\n    return colour;\n  }\n\n  // function getTileImage(tileIndex, hexcode, callback) {\n  //   for (let i = 0; i < values[0].length; i++) {\n  //     let image = ``;\n\n  //     if (Array.isArray(hexcode)) { //Then hexcode is a blend\n  //       console.log('in image function, not fetched yet');\n  //       //image = `http://localhost:9000/blends/1F9431F0CF.png`;\n  //       fetch(\"http://localhost:9000/blendemojis/\" + hexcode[0] + \"/\" + \"1F0CF\")\n  //         .then(res => res.json())\n  //         .then(data => { image = \"http://localhost:9000/public/blends/\" + data.url })\n  //       //return 'http://localhost:9000/blends/1F9431F0CF.png';\n  //       //return image\n  //     }\n  //     else { //it is a single emoji character\n  //       image = `/images/${hexcode}.svg`;\n  //     }\n  //   }\n  //   return callback();\n  // }\n  function getTileImages(hexcodes, callback) {\n    for (let i = 0; i < hexcodes.length; i++) {\n      let image = ``;\n\n      if (Array.isArray(hexcodes[i])) { //Then hexcode is a blend\n        console.log('in image function, not fetched yet');\n        //image = `http://localhost:9000/blends/1F9431F0CF.png`;\n        fetch(\"http://localhost:9000/blendemojis/\" + hexcodes[i] + \"/\" + \"1F0CF\")\n          .then(res => res.json())\n          .then(data => { imageURLs[i] = \"http://localhost:9000/public/blends/\" + data.url; console.log('WOOO') })\n          .then(() => {    return callback();          })\n        //return 'http://localhost:9000/blends/1F9431F0CF.png';\n        //imageURLs[i] = image;\n      }\n      else { //it is a single emoji character\n        image = `/images/${hexcodes[i]}.svg`;\n        imageURLs[i] = image;\n      }\n    }\n\n  }\n\n  function newTileObject(_emojis, selectedHexcode) {\n    let hexcodes = _emojis[0];\n    let blendedHexcodes = _emojis[1];\n    /*\n    Substitute blendedHexcodes into hexcodes where appropriate\n    */\n    if (blendedHexcodes !== undefined && blendedHexcodes !== null && selectedHexcode !== undefined) {\n      cat1Index.forEach(index => {\n        hexcodes[index] = blendedHexcodes[cat1Index.indexOf(index)];\n        //console.log(hexcodes[index]);\n      });\n    }\n\n\n    /*\n    TODO: Get image URLs BEFORE MAPPING TILES\n    */\n\n    /*\n    Map hexcodes to tiles \n    */\n    const tileObj = hexcodes.map((hexcode, index) => {\n      /*  \n      Assign tile colour based on position in grid\n      */\n      let colour = getTileColour(index);\n\n      /*  \n      Assign tile image based on position in grid\n      */\n      let image = `/images/1F4EF.svg`;\n      image = imageURLs[index];//getTileImage(index, hexcode); //get image then return tile\n\n      //console.log(image);\n      return {\n        img: image,\n        key: index,\n        onClick: (e) => handleClick(index, hexcode, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      }\n    })\n\n    return tileObj;\n  }\n\n  /*  \n  Get random emojis for every tile\n  */\n  function getRandomHexcodes() {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString())\n        .then(res => res.json())\n        .then(data => obj = JSON.parse(data))\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  /*  \n  Get random blends\n  */\n  function getRandomBlendHexcodes(hexcode) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"http://localhost:9000/randomblendhexcodes/\" + hexcode + \"?limit=\" + cat1Index.length.toString())\n        .then(res => res.json())\n        .then(data => obj = JSON.parse(data))\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  /*\n  Update emoji history and remove the oldest entry if length exceeds max.\n  */\n  function updateEmojiHistory(hexcode, num) {\n    let newEmojis = emojiHistory;\n    for (let i = 0; i < num; i++) {\n      newEmojis.push(hexcode);\n      if (newEmojis.length > lenHistory) {\n        newEmojis.shift();\n      }\n    }\n    setEmojiHistory(newEmojis);\n  }\n\n  const handleClick = (id, hexcode, e) => {\n    //TODO: Remove this before final build:\n    console.log(hexcode + ' was clicked. ID is ' + id);\n\n    /*\n    TODO: Replace all emoji with 'loading' emoji with no click handler\n    */\n\n    /*\n    Add clicked emoji to emoji history\n    */\n    updateEmojiHistory(hexcode, 1);\n\n    /*\n    Get hexcodes for new tiles, then assign them to tiles.\n    */\n    Promise.all([getRandomHexcodes(), getRandomBlendHexcodes(hexcode)]).then((values) => {\n      //console.log(values);\n\n      /*\n      Substitute blendedHexcodes into hexcodes where appropriate\n      */\n      if (values[1] !== undefined && values[1] !== null && hexcode !== undefined) {\n        cat1Index.forEach(index => {\n          values[0][index] = values[1][cat1Index.indexOf(index)];\n          //console.log(hexcodes[index]);\n        });\n      }\n\n      /*\n      Insert emoji history into active tiles\n      */\n      if (emojiHistory.length >= 1) {\n        for (let i = 0; i < emojiHistory.length; i++) {\n          if (center - i > 49) {\n            values[0][center - i] = emojiHistory[emojiHistory.length - 1 - i];\n          }\n        }\n      }\n\n    \n      //Make getTileImage into getTileImages(). Callback after all of them are done.\n        getTileImages(values[0], function() {\n          //if(err) return console.log(err);\n          //response is here\n          console.log(\"After calback: \", imageURLs);\n\n          var newTileObj;\n          const tilePromise = new Promise((resolve, reject) => {\n            newTileObj = newTileObject(values, hexcode);\n            resolve();\n          });\n          tilePromise\n            .then(() => { setEmojiTiles(newTileObj); });\n    \n    \n          }\n          );\n      console.log('after for', typeof imageURLs);\n\n      //newTileObj = newTileObject(values, hexcode); //gen tiles then return them\n\n    });\n  }\n\n  /*\n  Display the initial emoji options.\n  This is occuring twice according to the API terminal\n  */\n  window.addEventListener('DOMContentLoaded', (event) => {\n    /*\n      Fill the emoji history with placeholders\n    */\n    updateEmojiHistory(openmoji.openmojis[3073].hexcode, lenHistory);\n\n    /*\n      TODO: Replace this with a call to the getrandoms function\n    */\n    var obj;\n    fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString())\n      .then(res => res.json())\n      .then(data => obj = JSON.parse(data))\n      .then(() => iniTileObj = newTileObject([obj, []]))\n      .then(() => setEmojiTiles(iniTileObj))\n  });\n\n  return (\n    <>\n      <TiledHexagons\n        tileSideLengths={60}\n        tileGap={4}\n        tileBorderRadii={9}\n        maxHorizontal={maxHorizontal}\n        tileTextStyles={{\n          fontFamily: 'Source Sans Pro',\n          fontSize: '68px',\n        }}\n        tiles={emojiTiles}\n        onLoad={() => handleClick()}\n      />\n    </>\n  );\n}\n\nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}