{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { Hexagon, TiledHexagons } from 'tiled-hexagons';\nimport { useState } from 'react';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nclass Grid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colour: 'purple'\n    };\n  }\n\n  selectHex() {\n    if (this.state.colour === 'red') {\n      this.setState({\n        colour: 'blue'\n      });\n    } else {\n      this.setState({\n        colour: 'red'\n      });\n    }\n  }\n\n  render() {\n    let {\n      colour\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Hexagon, {\n      sideLength: 80,\n      fill: colour.toString(),\n      onClick: this.selectHex.bind(this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst Hexgrid = () => {\n  _s();\n\n  function generateEmojis(numSelected) {\n    var numEmojis = 113; //id 56 is the center\n\n    let numbers = [];\n    let emojis = [];\n\n    while (numSelected + numbers.length < numEmojis) {\n      var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n      if (numbers.indexOf(r) === -1) numbers.push(r);\n    }\n\n    for (let index = 0; index < numbers.length; index++) {\n      emojis.push(openmoji.openmojis[numbers[index]]);\n    }\n\n    return emojis; // The function returns the product of p1 and p2\n  }\n\n  const [selectedEmojis, setSelectedEmojis] = useState([]);\n  let emojis = generateEmojis(selectedEmojis.length);\n  let emojiFills = [];\n\n  for (let index = 0; index < emojis.length; index++) {\n    if (index === 56) {\n      emojiFills.push('#a4eefc');\n    } else {\n      emojiFills.push('white');\n    }\n  }\n\n  const handleClick = (id, emoji, e) => {\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis);\n    let emojis = generateEmojis(0);\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n\n    if (selectedEmojis.length >= 1) {\n      for (let i = 0; i < selectedEmojis.length; i++) {\n        if (56 - i > 49) {\n          emojis[56 - i] = selectedEmojis[selectedEmojis.length - 1 - i];\n          emojiFills[56 - i] = '#a4eefc';\n        }\n      }\n\n      setEmojiTiles(emojis.map((emoji, index) => {\n        let colour = emojiFills[index].toString();\n        return {\n          img: `/images/${emoji.hexcode}.svg`,\n          key: index,\n          onClick: e => handleClick(index, emoji, e),\n          fill: '',\n          styles: {\n            normal: {\n              fill: colour\n            },\n            hover: {\n              fill: '#6cc7da'\n            },\n            active: {\n              fill: '#779df1'\n            }\n          }\n        };\n      }));\n    }\n\n    console.log(emojiTiles);\n  };\n\n  const [emojiTiles, setEmojiTiles] = useState(emojis.map((emoji, index) => {\n    let colour = emojiFills[index].toString();\n    return {\n      img: `/images/${emoji.hexcode}.svg`,\n      key: index,\n      onClick: e => handleClick(index, emoji, e),\n      fill: '',\n      styles: {\n        normal: {\n          fill: colour,\n          shadow: 'red'\n        },\n        hover: {\n          fill: '#6cc7da'\n        },\n        active: {\n          fill: '#779df1'\n        }\n      }\n    };\n  }));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TiledHexagons, {\n      tileSideLengths: 60,\n      tileGap: 4,\n      tileBorderRadii: 9,\n      maxHorizontal: 13,\n      tileTextStyles: {\n        fontFamily: 'Source Sans Pro',\n        fontSize: '68px'\n      },\n      tiles: emojiTiles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Hexgrid, \"/EoNGpI+DWCL+8KJhWBANLS0CRY=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["Hexagon","TiledHexagons","useState","React","openmoji","require","Grid","Component","constructor","props","state","colour","selectHex","setState","render","toString","bind","Hexgrid","generateEmojis","numSelected","numEmojis","numbers","emojis","length","r","Math","floor","random","openmojis","indexOf","push","index","selectedEmojis","setSelectedEmojis","emojiFills","handleClick","id","emoji","e","newEmojis","console","log","hexcode","i","setEmojiTiles","map","img","key","onClick","fill","styles","normal","hover","active","emojiTiles","shadow","fontFamily","fontSize"],"mappings":"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","sourcesContent":["import { Hexagon, TiledHexagons } from 'tiled-hexagons'\nimport { useState } from 'react'\nimport React from 'react';\n\nconst openmoji = require('openmoji');\n\nclass Grid extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n          colour: 'purple'\n        }\n      }\n\n      selectHex() {\n          if (this.state.colour === 'red') {\n            this.setState({ colour: 'blue' })\n        } else {\n            this.setState({ colour: 'red' })\n        }\n      }\n    \n    render() {\n        let { colour } = this.state\n\n\n    \n        return (\n            <Hexagon\n              sideLength={80}\n              fill={colour.toString()}\n              onClick={this.selectHex.bind(this)}\n            />  )  }\n  }\n\n\nconst Hexgrid = () => {\n  function generateEmojis(numSelected) {\n\n    var numEmojis = 113; //id 56 is the center\n\n    let numbers = [];\n    let emojis = [];\n  \n    while(numSelected + numbers.length < numEmojis){\n      var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n      if(numbers.indexOf(r) === -1) numbers.push(r);\n  }\n  \n  for (let index = 0; index < numbers.length; index++) {\n      emojis.push(openmoji.openmojis[numbers[index]]);\n  }    \n  \n    return emojis;   // The function returns the product of p1 and p2\n  }\nconst [selectedEmojis, setSelectedEmojis] = useState([]);\n\nlet emojis = generateEmojis(selectedEmojis.length);\nlet emojiFills = [];\nfor (let index = 0; index < emojis.length; index++) {\n  if (index === 56) {\n    emojiFills.push('#a4eefc');\n  } else {\n    emojiFills.push('white');\n  }\n}   \n\n  const handleClick = (id, emoji, e) => {\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis);\n    let emojis = generateEmojis(0);\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n    if (selectedEmojis.length >= 1) {\n      for (let i = 0; i < selectedEmojis.length; i++) {\n        if(56-i > 49){\n          emojis[56-i] = selectedEmojis[selectedEmojis.length-1-i];\n          emojiFills[56-i] = '#a4eefc';\n        }\n      }\n      setEmojiTiles(emojis.map((emoji, index) => {\n        let colour = emojiFills[index].toString();\n          return { \n            img: `/images/${emoji.hexcode}.svg`, \n            key: index,\n            onClick: (e) => handleClick(index, emoji, e),\n            fill: '',\n            styles: {\n              normal: {\n                  fill: colour\n              },\n              hover: {\n                fill: '#6cc7da'\n              },\n              active: {\n                fill: '#779df1'\n              }\n          }\n          }\n        }))\n    }\n    console.log(emojiTiles);\n\n  }\n    \n  const [emojiTiles, setEmojiTiles] = useState(\n    emojis.map((emoji, index) => {\n      let colour = emojiFills[index].toString();\n      return { \n        img: `/images/${emoji.hexcode}.svg`, \n        key: index,\n        onClick: (e) => handleClick(index, emoji, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour,\n            shadow: 'red'\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      }\n    })\n  )\n    \n    return ( \n        <>\n            <Grid /> \n            <TiledHexagons\n            tileSideLengths={60}\n            tileGap={4}\n            tileBorderRadii={9}\n            maxHorizontal={13}\n            tileTextStyles={{\n            fontFamily: 'Source Sans Pro',\n            fontSize: '68px',\n            }}\n            tiles={emojiTiles}\n            />\n    </>\n    );\n}\n \nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}