{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { TiledHexagons } from 'tiled-hexagons';\nimport { useState, useEffect } from 'react';\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nconst fs = require('fs');\n\nconst numEmojis = 259;\nconst maxHorizontal = 19; //111\n\nconst maxVertical = Math.ceil(numEmojis / maxHorizontal);\nconst center = Math.round(maxHorizontal * (maxVertical / 4) + (maxHorizontal - 1) * (maxVertical / 4)) - Math.round(maxHorizontal / 2); //Math.ceil(numEmojis/2)-3;\n\nconst lenHistory = Math.ceil(maxHorizontal / 2);\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\n\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073].hexcode);\n}\n\nconst randomBlendIndex = [93, 94, 95, 96, 97, 98, 99, 100];\n\nconst Hexgrid = () => {\n  _s();\n\n  const [emojiHistory, setEmojiHistory] = useState([]);\n  var iniTileObj = newTileObject([defaultEmojis]);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj);\n\n  function getTileColour(tileIndex) {\n    let colour = 'white';\n\n    if (tileIndex <= center - 1 && tileIndex >= center - lenHistory + 1) {\n      colour = '#dbf7fd'; //'#d4d4d4';\n    }\n\n    if (tileIndex === center) {\n      colour = '#a4eefc';\n    }\n\n    return colour;\n  }\n\n  function getTileImage(tileIndex, hexcode) {\n    let image = `nothing`;\n\n    if (Array.isArray(hexcode)) {//Then hexcode is a blend\n      // fetch(\"http://localhost:9000/blendemojis/\" + emoji.hexcode + \"/\" + \"1F0CF\")\n      // .then(res => res.json())\n      // .then(data => console.log(data))\n    } else {\n      //it is a single emoji character\n      image = `/images/${hexcode}.svg`;\n    }\n\n    return image;\n  }\n\n  function newTileObject(_emojis, selectedHexcode) {\n    let hexcodes = _emojis[0];\n    let blendedHexcodes = _emojis[1];\n    /*\n    TODO: Substitute blendedHexcodes into hexcodes where appropriate\n    */\n\n    /*\n    Insert emoji history into active tiles\n    */\n\n    if (emojiHistory.length >= 1) {\n      for (let i = 0; i < emojiHistory.length; i++) {\n        if (center - i > 49) {\n          hexcodes[center - i] = emojiHistory[emojiHistory.length - 1 - i];\n        }\n      }\n    }\n    /*\n    TODO: Make promises, so everything resolves on time.\n    */\n\n    /*\n    Map hexcodes to tiles \n    */\n\n\n    const tileObj = hexcodes.map((hexcode, index) => {\n      /*  \n      Assign tile colour based on position in grid\n      */\n      let colour = getTileColour(index);\n      /*  \n      Assign tile image based on position in grid\n      */\n      //let image = `/images/${hexcode}.svg`;\n\n      let image = getTileImage(index, hexcode);\n      return {\n        img: image,\n        key: index,\n        onClick: e => handleClick(index, hexcode, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      };\n    });\n    return tileObj;\n    /*\n    Get blends from backend \n    TODO: Move this to handleclick, poor placement here. not working out.\n    */\n\n    var obj;\n\n    if (selectedHexcode !== null && selectedHexcode !== undefined) {// fetch(\"http://localhost:9000/randomblendhexcodes/\" + selectedHexcode + \"?limit=\" + randomBlendIndex.length.toString())\n      //   .then(res => res.json())\n      //   .then(data => obj = JSON.parse(data))\n      //   .then(obj => blendedHexcodes = obj)\n      //   .then(() => {\n      //     /*\n      //     Add blends into hexcodes[] \n      //     */\n      //     for (let i = 0; i < hexcodes.length; i++) {\n      //       if (randomBlendIndex.includes(i)) {\n      //         let j = randomBlendIndex.indexOf(i);\n      //         hexcodes[i] = blendedHexcodes[j];\n      //       }\n      //     }\n      //   })\n\n      /*\n      Map hexcodes to tiles \n      */\n    }\n  }\n  /*  \n  Get random emojis for every tile\n  */\n\n\n  function getRandomHexcodes() {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => {\n        resolve(obj);\n      });\n    });\n  }\n  /*  \n  Get random blends\n  */\n\n\n  function getRandomBlendHexcodes(hexcode) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"http://localhost:9000/randomblendhexcodes/\" + hexcode + \"?limit=\" + randomBlendIndex.length.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => {\n        resolve(obj);\n      });\n    });\n  }\n  /*\n  Update emoji history and remove the oldest entry if length exceeds max.\n  */\n\n\n  function updateEmojiHistory(hexcode, num) {\n    let newEmojis = emojiHistory;\n\n    for (let i = 0; i < num; i++) {\n      newEmojis.push(hexcode);\n\n      if (newEmojis.length > lenHistory) {\n        newEmojis.shift();\n      }\n    }\n\n    setEmojiHistory(newEmojis);\n  }\n\n  const handleClick = (id, hexcode, e) => {\n    //TODO: Remove this before final build:\n    console.log(hexcode + ' was clicked. ID is ' + id);\n    /*\n    TODO: Replace all emoji with 'loading' emoji with no click handler\n    */\n\n    updateEmojiHistory(hexcode, 1);\n    /*\n    Get hexcodes for new tiles:\n    TODO: Finish this and connect to rest of code\n    */\n\n    Promise.all([getRandomHexcodes(), getRandomBlendHexcodes(hexcode)]).then(values => {\n      console.log(values);\n      var newTileObj;\n      newTileObj = newTileObject(values, hexcode);\n      setEmojiTiles(newTileObj);\n    }); //var testimg;\n    //var fetchurl = \"http://localhost:9000/blendemojis/demo/\" + emoji.hexcode + \"/\" + \"1F0CF\";\n    // fetch(fetchurl, { headers: { 'Content-Type': 'blob' } })\n    //   .then(response => response.body)\n    //   .then(body => {\n    //     const reader = body.getReader();\n    //     return new ReadableStream({\n    //       start(controller) {\n    //         return pump();\n    //         function pump() {\n    //           return reader.read().then(({ done, value }) => {\n    //             // When no more data needs to be consumed, close the stream\n    //             if (done) {\n    //               controller.close();\n    //               return;\n    //             }\n    //             // Enqueue the next data chunk into our target stream\n    //             controller.enqueue(value);\n    //             return pump();\n    //           });\n    //         }\n    //       }\n    //     })\n    //   })\n    //   .then(stream => new Response(stream))\n    //   .then(response => response.blob())\n    //   .then(blob => URL.createObjectURL(blob))\n    //   .then(url => testimg = url)\n    //   .then(() => {\n    //     var obj;\n    //     var newTileObj;\n    //     fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString())\n    //       .then(res => res.json())\n    //       .then(data => obj = JSON.parse(data))\n    //       .then(() => newTileObj = newTileObject(obj, demoBlends, testimg))\n    //       .then(() => setEmojiTiles(newTileObj))\n    //   })\n    //   .catch(err => console.error(err));\n  };\n  /*\n  Display the initial emoji options.\n  This is occuring twice according to the API terminal\n  */\n\n\n  window.addEventListener('DOMContentLoaded', event => {\n    /*\n      TODO: Replace this with a call to the getrandoms function\n    */\n    updateEmojiHistory(openmoji.openmojis[3073].hexcode, lenHistory);\n    var obj;\n    fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString()).then(res => res.json()).then(data => obj = JSON.parse(data)).then(() => iniTileObj = newTileObject([obj, []])).then(() => setEmojiTiles(iniTileObj));\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TiledHexagons, {\n      tileSideLengths: 60,\n      tileGap: 4,\n      tileBorderRadii: 9,\n      maxHorizontal: maxHorizontal,\n      tileTextStyles: {\n        fontFamily: 'Source Sans Pro',\n        fontSize: '68px'\n      },\n      tiles: emojiTiles,\n      onLoad: () => handleClick()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Hexgrid, \"+3VtAv/BIw3CeMu2hnKoMc1i9do=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["TiledHexagons","useState","useEffect","React","Component","openmoji","require","fs","numEmojis","maxHorizontal","maxVertical","Math","ceil","center","round","lenHistory","lenRandom","defaultEmojis","index","push","openmojis","hexcode","randomBlendIndex","Hexgrid","emojiHistory","setEmojiHistory","iniTileObj","newTileObject","emojiTiles","setEmojiTiles","getTileColour","tileIndex","colour","getTileImage","image","Array","isArray","_emojis","selectedHexcode","hexcodes","blendedHexcodes","length","i","tileObj","map","img","key","onClick","e","handleClick","fill","styles","normal","hover","active","obj","undefined","getRandomHexcodes","Promise","resolve","reject","fetch","toString","then","res","json","data","JSON","parse","getRandomBlendHexcodes","updateEmojiHistory","num","newEmojis","shift","id","console","log","all","values","newTileObj","window","addEventListener","event","fontFamily","fontSize"],"mappings":"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","sourcesContent":["import { TiledHexagons } from 'tiled-hexagons'\nimport { useState, useEffect } from 'react'\nimport React, { Component } from 'react';\n\nconst openmoji = require('openmoji');\nconst fs = require('fs');\n\nconst numEmojis = 259;\nconst maxHorizontal = 19;//111\nconst maxVertical = Math.ceil(numEmojis / maxHorizontal);\n\nconst center = Math.round((maxHorizontal * (maxVertical / 4)) + ((maxHorizontal - 1) * (maxVertical / 4))) - Math.round((maxHorizontal) / 2);//Math.ceil(numEmojis/2)-3;\nconst lenHistory = Math.ceil(maxHorizontal / 2);\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\n\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073].hexcode);\n}\n\nconst randomBlendIndex = [93, 94, 95, 96, 97, 98, 99, 100];\n\nconst Hexgrid = () => {\n  const [emojiHistory, setEmojiHistory] = useState([]);\n  var iniTileObj = newTileObject([defaultEmojis]);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj)\n\n\n  \n  function getTileColour(tileIndex) {\n    let colour = 'white';\n    if (tileIndex <= (center - 1) && tileIndex >= (center - lenHistory + 1)) {\n      colour = '#dbf7fd';//'#d4d4d4';\n    }\n    if (tileIndex === center) {\n      colour = '#a4eefc';\n    }\n    return colour;\n  }\n\n  function getTileImage(tileIndex, hexcode) {\n    let image = `nothing`;\n\n    if (Array.isArray(hexcode)) { //Then hexcode is a blend\n      // fetch(\"http://localhost:9000/blendemojis/\" + emoji.hexcode + \"/\" + \"1F0CF\")\n      // .then(res => res.json())\n      // .then(data => console.log(data))\n    }\n    else { //it is a single emoji character\n      image = `/images/${hexcode}.svg`;\n    }\n\n    return image;\n  }\n\n  function newTileObject(_emojis, selectedHexcode) {\n    let hexcodes = _emojis[0];\n    let blendedHexcodes = _emojis[1];\n\n\n    /*\n    TODO: Substitute blendedHexcodes into hexcodes where appropriate\n    */\n\n    /*\n    Insert emoji history into active tiles\n    */\n    if (emojiHistory.length >= 1) {\n      for (let i = 0; i < emojiHistory.length; i++) {\n        if (center - i > 49) {\n          hexcodes[center - i] = emojiHistory[emojiHistory.length - 1 - i];\n        }\n      }\n    }\n\n    /*\n    TODO: Make promises, so everything resolves on time.\n    */\n\n      /*\n      Map hexcodes to tiles \n      */\n      const tileObj = hexcodes.map((hexcode, index) => {\n        /*  \n        Assign tile colour based on position in grid\n        */\n        let colour = getTileColour(index);\n\n        /*  \n        Assign tile image based on position in grid\n        */\n        //let image = `/images/${hexcode}.svg`;\n        let image = getTileImage(index, hexcode);\n        return {\n          img: image,\n          key: index,\n          onClick: (e) => handleClick(index, hexcode, e),\n          fill: '',\n          styles: {\n            normal: {\n              fill: colour\n            },\n            hover: {\n              fill: '#6cc7da'\n            },\n            active: {\n              fill: '#779df1'\n            }\n          }\n        }\n      })\n\n      return tileObj;\n\n      /*\n      Get blends from backend \n      TODO: Move this to handleclick, poor placement here. not working out.\n      */\n      var obj;\n      if (selectedHexcode !== null && selectedHexcode !== undefined) {\n        // fetch(\"http://localhost:9000/randomblendhexcodes/\" + selectedHexcode + \"?limit=\" + randomBlendIndex.length.toString())\n        //   .then(res => res.json())\n        //   .then(data => obj = JSON.parse(data))\n        //   .then(obj => blendedHexcodes = obj)\n        //   .then(() => {\n        //     /*\n        //     Add blends into hexcodes[] \n        //     */\n        //     for (let i = 0; i < hexcodes.length; i++) {\n        //       if (randomBlendIndex.includes(i)) {\n        //         let j = randomBlendIndex.indexOf(i);\n        //         hexcodes[i] = blendedHexcodes[j];\n        //       }\n        //     }\n        //   })\n        /*\n        Map hexcodes to tiles \n        */\n    \n  }}\n\n  /*  \n  Get random emojis for every tile\n  */\n  function getRandomHexcodes() {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString())\n        .then(res => res.json())\n        .then(data => obj = JSON.parse(data))\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  /*  \n  Get random blends\n  */\n  function getRandomBlendHexcodes(hexcode) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"http://localhost:9000/randomblendhexcodes/\" + hexcode + \"?limit=\" + randomBlendIndex.length.toString())\n        .then(res => res.json())\n        .then(data => obj = JSON.parse(data))\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  /*\n  Update emoji history and remove the oldest entry if length exceeds max.\n  */\n  function updateEmojiHistory(hexcode, num) {\n    let newEmojis = emojiHistory;\n    for (let i = 0; i < num; i++) {\n      newEmojis.push(hexcode);   \n      if (newEmojis.length > lenHistory) {\n        newEmojis.shift();\n      }   \n    }\n    setEmojiHistory(newEmojis);\n  }\n\n  const handleClick = (id, hexcode, e) => {\n    //TODO: Remove this before final build:\n    console.log(hexcode + ' was clicked. ID is ' + id);\n\n    /*\n    TODO: Replace all emoji with 'loading' emoji with no click handler\n    */\n\n    updateEmojiHistory(hexcode, 1);\n\n    /*\n    Get hexcodes for new tiles:\n    TODO: Finish this and connect to rest of code\n    */\n    Promise.all([getRandomHexcodes(), getRandomBlendHexcodes(hexcode)]).then((values) => {\n      console.log(values);\n      var newTileObj;\n      newTileObj = newTileObject(values, hexcode);\n      setEmojiTiles(newTileObj);\n    });\n\n    //var testimg;\n    //var fetchurl = \"http://localhost:9000/blendemojis/demo/\" + emoji.hexcode + \"/\" + \"1F0CF\";\n    // fetch(fetchurl, { headers: { 'Content-Type': 'blob' } })\n    //   .then(response => response.body)\n    //   .then(body => {\n    //     const reader = body.getReader();\n\n    //     return new ReadableStream({\n    //       start(controller) {\n    //         return pump();\n    //         function pump() {\n    //           return reader.read().then(({ done, value }) => {\n    //             // When no more data needs to be consumed, close the stream\n    //             if (done) {\n    //               controller.close();\n    //               return;\n    //             }\n    //             // Enqueue the next data chunk into our target stream\n    //             controller.enqueue(value);\n    //             return pump();\n    //           });\n    //         }\n    //       }\n    //     })\n    //   })\n    //   .then(stream => new Response(stream))\n    //   .then(response => response.blob())\n    //   .then(blob => URL.createObjectURL(blob))\n    //   .then(url => testimg = url)\n    //   .then(() => {\n    //     var obj;\n    //     var newTileObj;\n    //     fetch(\"http://localhost:9000/randomemojis?limit=\" + numEmojis.toString())\n    //       .then(res => res.json())\n    //       .then(data => obj = JSON.parse(data))\n    //       .then(() => newTileObj = newTileObject(obj, demoBlends, testimg))\n    //       .then(() => setEmojiTiles(newTileObj))\n    //   })\n    //   .catch(err => console.error(err));\n  }\n\n  /*\n  Display the initial emoji options.\n  This is occuring twice according to the API terminal\n  */\n  window.addEventListener('DOMContentLoaded', (event) => {\n    /*\n      TODO: Replace this with a call to the getrandoms function\n    */\n      updateEmojiHistory(openmoji.openmojis[3073].hexcode, lenHistory);\n\n    var obj;\n    fetch(\"http://localhost:9000/randomhexcodes?limit=\" + numEmojis.toString())\n      .then(res => res.json())\n      .then(data => obj = JSON.parse(data))\n      .then(() => iniTileObj = newTileObject([obj, []]))\n      .then(() => setEmojiTiles(iniTileObj))\n  });\n\n  return (\n    <>\n      <TiledHexagons\n        tileSideLengths={60}\n        tileGap={4}\n        tileBorderRadii={9}\n        maxHorizontal={maxHorizontal}\n        tileTextStyles={{\n          fontFamily: 'Source Sans Pro',\n          fontSize: '68px',\n        }}\n        tiles={emojiTiles}\n        onLoad={() => handleClick()}\n      />\n    </>\n  );\n}\n\nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}