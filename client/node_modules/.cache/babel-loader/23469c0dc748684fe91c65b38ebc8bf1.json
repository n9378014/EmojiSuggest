{"ast":null,"code":"var _jsxFileName = \"/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js\",\n    _s = $RefreshSig$();\n\nimport { Hexagon, TiledHexagons } from 'tiled-hexagons';\nimport { useState } from 'react';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst openmoji = require('openmoji');\n\nconst Hexgrid = () => {\n  _s();\n\n  const [selectedEmojis, setSelectedEmojis] = useState([]);\n\n  function generateEmojis() {\n    var numEmojis = 113; //id 56 is the center\n\n    let numbers = [];\n    let emojis = [];\n\n    while (numbers.length < numEmojis) {\n      var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n      if (numbers.indexOf(r) === -1) numbers.push(r);\n    }\n\n    for (let index = 0; index < numbers.length; index++) {\n      emojis.push(openmoji.openmojis[numbers[index]]);\n    }\n\n    return emojis; // The function returns the product of p1 and p2\n  }\n\n  function newTileObject(_emojis) {\n    let emojis = _emojis;\n    let emojiFills = [];\n\n    for (let index = 0; index < emojis.length; index++) {\n      if (index === 56) {\n        emojiFills.push('#a4eefc');\n      } else {\n        emojiFills.push('white');\n      }\n    }\n\n    if (selectedEmojis.length >= 1) {\n      for (let i = 0; i < selectedEmojis.length; i++) {\n        if (56 - i > 49) {\n          emojis[56 - i] = selectedEmojis[selectedEmojis.length - 1 - i];\n          emojiFills[56 - i] = '#a4eefc';\n        }\n      }\n    }\n\n    const tileObj = emojis.map((emoji, index) => {\n      let colour = emojiFills[index].toString();\n      return {\n        img: `/images/${emoji.hexcode}.svg`,\n        key: index,\n        onClick: e => handleClick(index, emoji, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      };\n    });\n    return tileObj;\n  }\n\n  const handleClick = (id, emoji, e) => {\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id); //Update emoji history:\n\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis); //Create new emoji tiles:\n\n    const newTileObj = newTileObject(generateEmojis());\n    setEmojiTiles(newTileObj);\n  };\n\n  const iniTileObj = newTileObject(generateEmojis());\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TiledHexagons, {\n      tileSideLengths: 60,\n      tileGap: 4,\n      tileBorderRadii: 9,\n      maxHorizontal: 13,\n      tileTextStyles: {\n        fontFamily: 'Source Sans Pro',\n        fontSize: '68px'\n      },\n      tiles: emojiTiles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Hexgrid, \"UmqgXtnRhHxUOsrV1qZ5MYNowxc=\");\n\n_c = Hexgrid;\nexport default Hexgrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hexgrid\");","map":{"version":3,"sources":["/Users/graceheffernan/Desktop/EGH400-1/emojisuggest/client/src/Hexgrid.js"],"names":["Hexagon","TiledHexagons","useState","React","openmoji","require","Hexgrid","selectedEmojis","setSelectedEmojis","generateEmojis","numEmojis","numbers","emojis","length","r","Math","floor","random","openmojis","indexOf","push","index","newTileObject","_emojis","emojiFills","i","tileObj","map","emoji","colour","toString","img","hexcode","key","onClick","e","handleClick","fill","styles","normal","hover","active","id","console","log","newEmojis","newTileObj","setEmojiTiles","iniTileObj","emojiTiles","fontFamily","fontSize"],"mappings":"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","sourcesContent":["import { Hexagon, TiledHexagons } from 'tiled-hexagons'\nimport { useState } from 'react'\nimport React from 'react';\n\nconst openmoji = require('openmoji');\n\n\nconst Hexgrid = () => {\n  const [selectedEmojis, setSelectedEmojis] = useState([]);\n\n  function generateEmojis() {\n\n    var numEmojis = 113; //id 56 is the center\n\n    let numbers = [];\n    let emojis = [];\n  \n    while(numbers.length < numEmojis){\n      var r = Math.floor(Math.random() * (openmoji.openmojis.length - 1));\n      if(numbers.indexOf(r) === -1) numbers.push(r);\n  }\n  \n  for (let index = 0; index < numbers.length; index++) {\n      emojis.push(openmoji.openmojis[numbers[index]]);\n  }    \n  \n    return emojis;   // The function returns the product of p1 and p2\n  }\n\n  function newTileObject(_emojis){\n    let emojis = _emojis;\n    let emojiFills = [];\n    for (let index = 0; index < emojis.length; index++) {\n      if (index === 56) {\n        emojiFills.push('#a4eefc');\n      } else {\n        emojiFills.push('white');\n      }\n    }\n\n    if (selectedEmojis.length >= 1) {\n      for (let i = 0; i < selectedEmojis.length; i++) {\n        if(56-i > 49){\n          emojis[56-i] = selectedEmojis[selectedEmojis.length-1-i];\n          emojiFills[56-i] = '#a4eefc';\n        }\n      }\n    }\n    const tileObj = emojis.map((emoji, index) => {\n      let colour = emojiFills[index].toString();\n        return { \n          img: `/images/${emoji.hexcode}.svg`, \n          key: index,\n          onClick: (e) => handleClick(index, emoji, e),\n          fill: '',\n          styles: {\n            normal: {\n                fill: colour\n            },\n            hover: {\n              fill: '#6cc7da'\n            },\n            active: {\n              fill: '#779df1'\n            }\n        }\n        }\n      })\n\n      return tileObj;\n  }\n\n  const handleClick = (id, emoji, e) => {\n    console.log(emoji.hexcode + ' was clicked. ID is ' + id);\n    //Update emoji history:\n    let newEmojis = selectedEmojis;\n    newEmojis.push(emoji);\n    setSelectedEmojis(newEmojis);\n    \n    //Create new emoji tiles:\n    const newTileObj = newTileObject(generateEmojis());\n    setEmojiTiles(newTileObj);\n\n  }\n  const iniTileObj = newTileObject(generateEmojis());\n\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj)\n    return ( \n        <>\n            <TiledHexagons\n            tileSideLengths={60}\n            tileGap={4}\n            tileBorderRadii={9}\n            maxHorizontal={13}\n            tileTextStyles={{\n            fontFamily: 'Source Sans Pro',\n            fontSize: '68px',\n            }}\n            tiles={emojiTiles}\n            />\n    </>\n    );\n}\n \nexport default Hexgrid;"]},"metadata":{},"sourceType":"module"}