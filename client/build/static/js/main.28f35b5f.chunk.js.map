{"version":3,"sources":["Hexgrid.js","App.js","reportWebVitals.js","index.js"],"names":["openmoji","require","numEmojis","maxHorizontal","maxVertical","Math","ceil","center","round","lenHistory","defaultEmojis","index","push","openmojis","hexcode","tempmojis","combineHistIndex","cat1Index","reverse","cat2Index","cat3Index","cat4Index","cat5Index","cat6Index","cat7Index","cat8Index","cat9Index","cat10Index","cat11Index","cat12Index","imageURLs","Array","Hexgrid","useState","emojiHistory","setEmojiHistory","iniTileObj","newTileObject","emojiTiles","setEmojiTiles","tmpTileObj","getTileImage","tileIndex","image","isArray","_emojis","selectedHexcode","hexcodes","i","length","console","log","tileObj","map","colour","includes","getTileColour","img","key","onClick","e","handleClick","fill","styles","normal","hover","active","updateEmojiHistory","num","newEmojis","shift","getVarietyHexcodes","blendedwith","limit","Promise","resolve","reject","obj","strEnd","toString","fetch","then","res","json","data","JSON","parse","catch","error","message","id","imgURL","saveAs","all","tvalues","newTileObj","values","forEach","indexOf","window","addEventListener","event","scroll","document","querySelector","scrollLeft","scrollTop","tileSideLengths","tileGap","tileBorderRadii","tileTextStyles","fontFamily","fontSize","tiles","onLoad","App","className","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.28f35b5f.chunk.js","sourcesContent":["import { TiledHexagons } from 'tiled-hexagons'\nimport { useState, useEffect } from 'react'\nimport React, { Component } from 'react';\nimport { saveAs } from 'file-saver';\n\nconst openmoji = require('openmoji');\nconst fs = require('fs');\n\nconst numEmojis = 259; //If this is adjusted, the catIndex allocations and calls to api\\variety will need to be changed\nconst maxHorizontal = 19;\nconst maxVertical = Math.ceil(numEmojis / maxHorizontal);\n\nconst center = Math.round((maxHorizontal * (maxVertical / 4)) + ((maxHorizontal - 1) * (maxVertical / 4))) - Math.round((maxHorizontal) / 2);//Math.ceil(numEmojis/2)-3;\nconst lenHistory = Math.ceil(maxHorizontal / 2) - 1;\nconst lenRandom = lenHistory;\nconst defaultEmojis = [];\n\nfor (let index = 0; index < numEmojis; index++) {\n  defaultEmojis.push(openmoji.openmojis[3073].hexcode);\n}\nvar tempmojis = [];\nfor (let index = 0; index < numEmojis; index++) {\n  tempmojis.push(openmoji.openmojis[3073].hexcode)\n}\n\nconst combineHistIndex = [100, 137];\nconst cat1Index = [0, 1, 2, 3, 4, 5, //Top left petal \n  19, 20, 21, 22, 23, 24,\n  37, 38, 39, 40, 41, 42, 43,\n  56, 57, 58, 59, 60, 61, 62,\n  74, 75, 76, 77, 78, 79, 80, 81,\n  93, 94, 95, 96, 97, 98, 99, 100].reverse(); //100\n\nconst cat2Index = [7, 8, 9, 10, 11, //Top middle petal \n  26, 27, 28, 29,\n  45, 46, 47,\n  64, 65,\n  83].reverse();\n\nconst cat3Index = [13, 14, 15, 16, 17, 18, //Top right petal\n  31, 32, 33, 34, 35, 36,\n  49, 50, 51, 52, 53, 54, 55,\n  67, 68, 69, 70, 71, 72, 73,\n  85, 86, 87, 88, 89, 90, 91, 92,\n  103, 104, 105, 106, 107, 108, 109, 110].reverse();\n\nconst cat4Index = [130, 131, 132, 133, 134, 135, 136, 137,\n148, 149, 150, 151, 152, 153, 154, 155,\n167, 168, 169, 170, 171, 172, 173,\n185, 186, 187, 188, 189, 190, 191,\n204, 205, 206, 207, 208, 209,\n222, 223, 224, 225, 226, 227,\n241, 242, 243, 244, 245]; //Bottom left petal\nconst cat5Index = [157,\n175, 176,\n193, 194, 195,\n211, 212, 213, 214,\n229, 230, 231, 232, 233,\n247, 248, 249, 250, 251, 252]; //Bottom middle petal\nconst cat6Index = [140, 141, 142, 143, 144, 145, 146, 147,\n159, 160, 161, 162, 163, 164, 165, 166,\n178, 179, 180, 181, 182, 183, 184,\n197, 198, 199, 200, 201, 202, 203,\n216, 217, 218, 219, 220, 221,\n235, 236, 237, 238, 239, 240,\n254, 255, 256, 257, 258]; //Bottom right petal\n\n//Single emoji rows, fanning out from center:\nconst cat7Index = [121, 122, 123, 124, 125, 126, 127, 128, 129]; //Line heading right from center\nconst cat8Index = [139, 158, 177, 196, 215, 234, 253]; //Line heading right-down from center\nconst cat9Index = [138, 156, 174, 192, 210, 228, 246]; //Line heading left-down from center\nconst cat10Index = [119, 118, 117, 116, 115, 114, 113, 112, 111]; //Line heading left from center\nconst cat11Index = [101, 82, 63, 44, 25, 6]; //Line heading left-up from center\nconst cat12Index = [102, 84, 66, 48, 30, 12]; //Line heading right-up from center\n\nlet imageURLs = new Array(numEmojis);\n\nconst Hexgrid = () => {\n  const [emojiHistory, setEmojiHistory] = useState([]);\n  var iniTileObj = newTileObject(defaultEmojis);\n  const [emojiTiles, setEmojiTiles] = useState(iniTileObj); //\n  const tmpTileObj = newTileObject(tempmojis, openmoji.openmojis[3073].hexcode);\n\n  function getTileColour(tileIndex) {\n    let colour = 'white';\n    if (cat7Index.includes(tileIndex) || cat8Index.includes(tileIndex) || cat9Index.includes(tileIndex) || cat10Index.includes(tileIndex) || cat11Index.includes(tileIndex) || cat12Index.includes(tileIndex)) {\n      colour = '#dbf7fd'; //white\n    }\n    else {\n      colour = 'white';//'blue;\n    }\n    // if (tileIndex <= (center - 1) && tileIndex >= (center - lenHistory)) { //If tile is part of emoji history\n    //   colour = '#dbf7fd';//'#d4d4d4';\n    // }\n    if (tileIndex === center) { //If active emoji tile\n      colour = '#a4eefc'; //blue\n    }\n    return colour;\n  }\n\n  function getTileImage(tileIndex, hexcode) {\n    let image = ``;\n    if (Array.isArray(hexcode)) { //Then hexcode is a blend\n      //image = `http://localhost:9000/blends/1F9431F0CF.png`;\n      // fetch(\"http://localhost:9000/blendemojis/\" + hexcode[0] + \"/\" + hexcode[1])\n      //   .then(res => res.json())\n      //   .then(data => { image = \"http://localhost:9000/blends/\" + data.url;})\n      //   .then(() => { return image })\n      //return 'http://localhost:9000/blends/1F9431F0CF.png';\n      return image\n    }\n    else { //it is a single emoji character\n      image = \"/images/\" + hexcode + \".png\";\n      return image;\n    }\n  }\n\n  function newTileObject(_emojis, selectedHexcode) {\n    let hexcodes = _emojis;\n    //let blendedHexcodes = _emojis[1];\n    for (let i = 0; i < hexcodes.length; i++) {\n      imageURLs[i] = getTileImage(i, hexcodes[i]);\n    }\n\n    /*\n    Substitute blendedHexcodes into hexcodes where appropriate\n    */\n    // if (blendedHexcodes !== undefined && blendedHexcodes !== null && selectedHexcode !== undefined) {\n    //   cat1Index.forEach(index => {\n    //     hexcodes[index] = blendedHexcodes[cat1Index.indexOf(index)];\n    //     //console.log(hexcodes[index]);\n    //   });\n    // }\n\n    /*\n    Insert emoji history into active tiles\n    */\n    if (emojiHistory.length >= 1) {\n      for (let i = 0; i < emojiHistory.length; i++) {\n        if (center - i - 1 >= (center - lenHistory)) {\n          hexcodes[center - i - 1] = emojiHistory[emojiHistory.length - 2 - i];\n        }\n      }\n    }\n\n    // if (emojiHistory.length >= 1) {\n    //   values[0][center] = emojiHistory[emojiHistory.length-1];\n    //   for (let i = 0; i < emojiHistory.length-1; i++) {\n    //     if (center - i -1> 49) {\n    //       values[0][center - i - 2] = emojiHistory[emojiHistory.length - 1 - i];\n    //     }\n    //   }\n    // }\n    console.log('tiles len ' + hexcodes.length);\n    /*\n    Map hexcodes to tiles \n    */\n    const tileObj = hexcodes.map((hexcode, index) => {\n      if(!hexcode || hexcode.length === 0){\n        hexcode = '2049';\n      }\n      /*  \n      Assign tile colour based on position in grid\n      */\n      let colour = getTileColour(index);\n\n      /*  \n      Assign tile image based on position in grid\n      */\n      if (Array.isArray(hexcode)) { //Then hexcode is a blend\n        //console.log(\"Hex is array: \" + hexcode);\n        imageURLs[index] = \"/blends/\" + hexcode[0] + hexcode[1] + '.png';\n      }\n      else { //it is a single emoji character\n        imageURLs[index] = \"/images/\" + hexcode + \".png\";\n      }\n      return {\n        img: imageURLs[index],\n        key: index,\n        onClick: (e) => handleClick(index, hexcode, e),\n        fill: '',\n        styles: {\n          normal: {\n            fill: colour\n          },\n          hover: {\n            fill: '#6cc7da'\n          },\n          active: {\n            fill: '#779df1'\n          }\n        }\n      }\n    })\n\n    return tileObj;\n  }\n\n  /*  \n  Get random emojis for every tile\n  */\n  function getRandomHexcodes() {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"/api/randomhexcodes?limit=\" + numEmojis.toString())\n        .then(res => res.json())\n        .then(data => obj = JSON.parse(data))\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  /*  \n  Get random blends\n  */\n  function getRandomBlendHexcodes(hexcode) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"/api/randomblendhexcodes/\" + hexcode + \"?limit=\" + cat1Index.length.toString())\n        .then(res => res.json())\n        .then(data => obj = JSON.parse(data))\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  /*  \n  Get markov emojis\n  */\n  function getMarkovHexcodes(hexcode) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"/api/markovhexcodes/\" + hexcode + \"?limit=\" + cat7Index.length.toString())\n        .then(res => res.json())\n        .then(data => obj = JSON.parse(data))\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  /*  \nGet markov blends\n*/\n  function getMarkovBlendHexcodes(hexcode, limit) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      fetch(\"/api/markovblendhexcodes/\" + hexcode + \"?limit=\" + limit.toString())\n        .then(res => res.json())\n        .then(data => obj = JSON.parse(data))\n        .then(() => { resolve(obj); })\n    })\n  }\n\n  /*\n  Update emoji history and remove the oldest entry if length exceeds max.\n  */\n  function updateEmojiHistory(hexcode, num) {\n    let newEmojis = emojiHistory;\n    for (let i = 0; i < num; i++) {\n      newEmojis.push(hexcode);\n      if (newEmojis.length > lenHistory + 1) {\n        newEmojis.shift();\n      }\n    }\n    setEmojiHistory(newEmojis);\n  }\n\n  function getBlendHexcode(hexcode1, hexcode2) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      if (Array.isArray(hexcode1)) {\n        hexcode1 = hexcode1[0];\n      }\n      if (Array.isArray(hexcode2)) {\n        hexcode2 = hexcode2[0];\n      }\n\n      fetch(\"/api/blendemojis/\" + hexcode1 + \"/\" + hexcode2)\n        .then(res => res.json())\n        .then(() => { obj = [hexcode1, hexcode2]; })\n        .then(() => { resolve(obj); })\n    })\n  }\n  function getVarietyHexcodes(hexcode, blendedwith, limit) {\n    return new Promise((resolve, reject) => {\n      var obj;\n      var strEnd = '';\n      if (Array.isArray(hexcode)) {\n        strEnd = '&blendedwith=' + hexcode[0];\n        hexcode = hexcode[1];\n      }\n      else if (blendedwith.length > 0) {\n        strEnd = '&blendedwith=' + blendedwith;\n      }\n\n      if(emojiHistory[emojiHistory.length - 2] !== '1F504'){\n        strEnd = strEnd + '&prev=' + emojiHistory[emojiHistory.length - 2];\n      }\n      console.log(\"/api/variety/\" + hexcode + \"?limit=\" + limit.toString() + strEnd);\n\n      fetch(\"/api/variety/\" + hexcode + \"?limit=\" + limit.toString() + strEnd)\n        .then(res => res.json())\n        .then(data => { console.log(data); obj = JSON.parse(data); })\n        .then(() => { console.log(obj); })\n        .then(() => { resolve(obj); })\n        .catch(error => {\n          console.error(error.message)\n        });\n    })\n  }\n\n\n  const handleClick = (id, hexcode, e) => {\n    console.log(hexcode + ' was clicked. ID is ' + id);\n    // Promise.all([getVarietyHexcodes(hexcode, numEmojis)]).then((values) => {\n    //   console.log(\"Variety happends\");\n    //   console.log(values);\n    // }).catch(error => {\n    //   console.error(error.message)\n    // });\n\n    \n    if (id === center) {\n      var imgURL = '';\n\n      if (Array.isArray(hexcode)) { //Then hexcode is a blend\n        imgURL = \"/blends/\" + hexcode[0] + hexcode[1] + '.png';\n      }\n      else { //it is a single emoji character\n        imgURL = \"/images/\" + hexcode + \".png\";\n      }\n\n      saveAs(imgURL, 'blend.png');\n    }\n    else if (hexcode !== '1F504') {\n      updateEmojiHistory(hexcode, 1); //Add clicked emoji to emoji history\n\n      /*\n      Replace all emoji with 'loading' that can't be clicked\n      */\n      setEmojiTiles(tmpTileObj);\n      console.log(\"Hex: \" + hexcode);\n      let blendedwith = '';\n      //TODO: This is a quick fix, find a way to send both hexcodes and still get blends:\n      // if (Array.isArray(hexcode)) { //Then hexcode is a blend\n      //   blendedwith = hexcode[0];\n      //   hexcode = hexcode[1]; \n      // }\n\n      //Get hexcodes for new tiles, then assign them to tiles:\n      //Promise.all([getRandomHexcodes(), getRandomBlendHexcodes(hexcode), getMarkovHexcodes(hexcode), getBlendHexcode(hexcode, emojiHistory[emojiHistory.length - 2]), getBlendHexcode(emojiHistory[emojiHistory.length - 2], hexcode), getMarkovBlendHexcodes(hexcode, cat2Index.length), getMarkovBlendHexcodes(hexcode, cat3Index.length)]).then((values) => {\n      Promise.all([getVarietyHexcodes(hexcode, blendedwith, numEmojis)]).then((tvalues) => { //numEmojis = 259\n        console.log(tvalues[0]);\n        let values = tempmojis;\n        // values[0] = tvalues[0][0]; //random emoji\n        // values[1] = tvalues[0][1]; //random blends\n        // values[2] = tvalues[0][2]; //markov emoji\n        // values[3] = tvalues[0][3]; //markov blends\n        cat1Index.forEach(index => { //Top-left petal\n          values[index] = tvalues[0][0][cat1Index.indexOf(index)];\n        });\n\n        cat2Index.forEach(index => { //Top-left petal\n          values[index] = tvalues[0][1][cat2Index.indexOf(index)];\n        });\n        cat3Index.forEach(index => { //Top-left petal\n          values[index] = tvalues[0][2][cat3Index.indexOf(index)];\n        });\n        cat4Index.forEach(index => { //Top-left petal\n          values[index] = tvalues[0][3][cat4Index.indexOf(index)];\n        });\n        cat5Index.forEach(index => { //Top-left petal\n          values[index] = tvalues[0][4][cat5Index.indexOf(index)];\n        });\n        cat6Index.forEach(index => { //Top-left petal\n          values[index] = tvalues[0][5][cat6Index.indexOf(index)];\n        });\n        cat7Index.forEach(index => { //Top-left petal\n          values[index] = tvalues[0][6][cat7Index.indexOf(index)];\n        });\n        cat8Index.forEach(index => { //Top-left petal\n          values[index] = tvalues[0][7][cat8Index.indexOf(index)];\n        });\n        cat9Index.forEach(index => { //Top-left petal\n          values[index] = tvalues[0][8][cat9Index.indexOf(index)];\n        });\n        cat11Index.forEach(index => { //Top-left petal\n          values[index] = tvalues[0][9][cat11Index.indexOf(index)];\n        });\n        cat12Index.forEach(index => { //Top-left petal\n          values[index] = tvalues[0][10][cat12Index.indexOf(index)];\n        });\n        if(tvalues[0][11].length > 0){\n          combineHistIndex.forEach(index => { //History tiles\n            values[index] = tvalues[0][11][combineHistIndex.indexOf(index)];\n          });  \n        }\n\n        values[center] = hexcode;\n        // console.log('values ' + values);\n        // console.log('values ' + typeof values);\n        // console.log(\"value 0  \" + values[0]);\n\n                //Substitute blendedHexcodes into hexcodes where appropriate:\n        // if (values[1] !== undefined && values[1] !== null && values[2] !== null && hexcode !== undefined) {\n        //   cat1Index.forEach(index => { //Top-left petal\n        //     values[0][index] = values[1][cat1Index.indexOf(index)];\n        //   });\n        //   cat2Index.forEach(index => { //Top-middle petal\n        //     values[0][index] = values[3][cat2Index.indexOf(index)];\n        //   });\n        //   cat3Index.forEach(index => { //Top-right petal\n        //     values[0][index] = values[3][cat3Index.indexOf(index)];\n        //   });\n        //   cat4Index.forEach(index => { //Bottom-left petal\n        //     values[0][index] = values[1][cat4Index.indexOf(index)];\n        //   });\n        //   cat5Index.forEach(index => { //Bottom-middle petal\n        //     values[0][index] = values[3][cat5Index.indexOf(index)];\n        //   });\n        //   cat6Index.forEach(index => { //Bottom-right petal\n        //     values[0][index] = values[3][cat6Index.indexOf(index)];\n        //   });\n\n        //   cat7Index.forEach(index => { //Line headed right from centre: always random\n        //     values[0][index] = values[2][cat7Index.indexOf(index)];\n        //   });\n        //   cat8Index.forEach(index => {  //Line heading right-down from center\n        //     values[0][index] = values[2][cat8Index.indexOf(index)];\n        //   });\n        //   cat9Index.forEach(index => {  //Line heading left-down from center\n        //     values[0][index] = values[2][cat9Index.indexOf(index)];\n        //   });\n        //   // cat10Index.forEach(index => {  //Line heading left from center: always history\n        //   //   values[0][index] = values[2][cat10Index.indexOf(index)];\n        //   // });\n        //   cat11Index.forEach(index => {  //Line heading left-up from center\n        //     values[0][index] = values[2][cat11Index.indexOf(index)];\n        //   });\n        //   cat12Index.forEach(index => {  //Line heading right-up from center\n        //     values[0][index] = values[2][cat12Index.indexOf(index)];\n        //   });\n        // }\n\n        // if (emojiHistory[emojiHistory.length - 2] !== '1F504') {\n        //   values[0][100] = values[3]; //Make this one a blend between current and most recent history\n        //   values[0][137] = values[4]; //Make this one a blend between current and most recent history  \n        //   cat1Index.forEach(index => {\n        //     if (index !== 100) {\n        //       values[0][index] = values[0][index + 1];\n        //     }\n        //   });\n        // }\n        // else{\n        //   // values[0][100] = values[3][0]; \n        //   // values[0][137] = values[4][1];   \n        // }\n\n        //Insert emoji history into active tiles:\n        // if (emojiHistory.length >= 1) {\n        //   values[center] = emojiHistory[emojiHistory.length - 1];\n        //   for (let i = 0; i < emojiHistory.length; i++) {\n        //     if (center - i - 1 >= (center - lenHistory)) {\n        //       values[center - i - 1] = emojiHistory[emojiHistory.length - 1 - i];\n        //     }\n        //   }\n        // }\n\n        var newTileObj;\n        const tilePromise = new Promise((resolve, reject) => {\n          newTileObj = newTileObject(values, hexcode);\n          resolve();\n        });\n        tilePromise\n          .then(() => {\n            setEmojiTiles(newTileObj); //console.log('values ' + values.length);\n          }).catch(error => {\n            console.log(\"Something went wrong with the tilePromise.\")\n            console.error(error.message)\n          });\n\n        //newTileObj = newTileObject(values, hexcode); //gen tiles then return them\n      }).catch(error => {\n        console.error(error.message)\n      });\n    }\n  }\n\n  /*\n  Display the initial emoji options.\n  This is occuring twice according to the API terminal\n  */\n  window.addEventListener('DOMContentLoaded', (event) => {\n    const scroll = document.querySelector('.App');\n    scroll.scrollLeft = 350;\n    scroll.scrollTop = 350;\n\n    /*\n      Fill the emoji history with placeholders\n    */\n    updateEmojiHistory(openmoji.openmojis[3073].hexcode, lenHistory + 1);\n\n    /*\n      TODO: Replace this with a call to the getrandoms function\n    */\n    var obj;\n    fetch(\"/api/randomhexcodes?limit=\" + numEmojis.toString())\n      .then(res => res.json())\n      .then(data => obj = JSON.parse(data))\n      .then(() => iniTileObj = newTileObject(obj))\n      .then(() => setEmojiTiles(iniTileObj))\n      .catch(error => {\n        console.log(\"Something went wrong with the randomhexcodes fetch request.\")\n        console.error(error.message)\n      })\n  });\n\n  return (\n    <>\n      <TiledHexagons\n        tileSideLengths={60}\n        tileGap={4}\n        tileBorderRadii={9}\n        maxHorizontal={maxHorizontal}\n        tileTextStyles={{\n          fontFamily: 'Source Sans Pro',\n          fontSize: '68px',\n        }}\n        tiles={emojiTiles}\n        onLoad={() => handleClick()}\n      />\n    </>\n  );\n}\n\nexport default Hexgrid;","import React, { Component } from \"react\";\n// Importing style sheet (TODO: remove this later)\nimport './App.css';\n\n// Importing pages and components\nimport Home from \"./Home\";\nimport Navbar from \"./Navbar\";\nimport Hexgrid from \"./Hexgrid\";\n\n\nclass App extends Component {\n  render(){\n    return (    \n      <div className=\"App\">\n        {/* Navigation Bar Component*/}\n        {/*<Navbar /> */} \n        <div className=\"content\">\n          <Hexgrid />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}